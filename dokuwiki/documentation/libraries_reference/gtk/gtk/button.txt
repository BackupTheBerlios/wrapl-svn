====== Button ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Bin#T|Gtk.Gtk.Bin.T]]
  * [[..:..:Gtk:Gtk:Container#T|Gtk.Gtk.Container.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  The GtkButton widget is generally used to attach a function to that is called
  when the button is pressed. The various signals and how to use them are
  outlined below.
  The GtkButton widget can hold any valid child widget. That is it can hold most
  any other standard GtkWidget. The most commonly used child is the GtkLabel.
  

==== :SetUseUnderline ====
'':SetUseUnderline(self @ [[#T|T]], use_underline @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  If true, an underline in the text of the button label indicates the next
  character should be used for the mnemonic accelerator key.
  button :        a GtkButton
  use_underline : TRUE if underlines in the text indicate mnemonics

==== :SetUseStock ====
'':SetUseStock(self @ [[#T|T]], use_stock @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  If TRUE, the label set on the button is used as a stock id to select the stock
  item for the button.
  button :    a GtkButton
  use_stock : TRUE if the button should use a stock item

==== :SetRelief ====
'':SetRelief(self @ [[#T|T]], newstyle @ [[..:..:Gtk:Gtk:ReliefStyle#T|Gtk.Gtk.ReliefStyle.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the relief style of the edges of the given GtkButton widget. Three styles
  exist, GTK_RELIEF_NORMAL, GTK_RELIEF_HALF, GTK_RELIEF_NONE. The default style
  is, as one can guess, GTK_RELIEF_NORMAL.
  button :   The GtkButton you want to set relief styles of.
  newstyle : The GtkReliefStyle as described above.

==== :SetLabel ====
'':SetLabel(self @ [[#T|T]], label @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the text of the label of the button to str. This text is also used to
  select the stock item if gtk_button_set_use_stock() is used.
  This will also clear any previously set labels.
  button : a GtkButton
  label :  a string

==== :SetImagePosition ====
'':SetImagePosition(self @ [[#T|T]], position @ [[..:..:Gtk:Gtk:PositionType#T|Gtk.Gtk.PositionType.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the position of the image relative to the text inside the button.
  button :   a GtkButton
  position : the position

==== :EventWindow ====
'':EventWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''


==== :LabelText ====
'':LabelText(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''


==== :ActivateTimeout ====
'':ActivateTimeout(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Constructed ====
'':Constructed(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :InButton ====
'':InButton(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ButtonDown ====
'':ButtonDown(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Relief ====
'':Relief(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the relief style of the edges of the given GtkButton widget. Three styles
  exist, GTK_RELIEF_NORMAL, GTK_RELIEF_HALF, GTK_RELIEF_NONE. The default style
  is, as one can guess, GTK_RELIEF_NORMAL.
  button :   The GtkButton you want to set relief styles of.
  newstyle : The GtkReliefStyle as described above.
  Returns the current relief style of the given GtkButton.
  button :  The GtkButton you want the GtkReliefStyle from.
  Returns : The current GtkReliefStyle

==== :UseUnderline ====
'':UseUnderline(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Returns whether an embedded underline in the button label indicates a mnemonic.
  See gtk_button_set_use_underline().
  button :  a GtkButton
  Returns : TRUE if an embedded underline in the button label indicates the
            mnemonic accelerator keys.
  If true, an underline in the text of the button label indicates the next
  character should be used for the mnemonic accelerator key.
  button :        a GtkButton
  use_underline : TRUE if underlines in the text indicate mnemonics

==== :UseStock ====
'':UseStock(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Returns whether the button label is a stock item.
  button :  a GtkButton
  Returns : TRUE if the button label is used to select a stock item instead of
            being used directly as the label text.
  If TRUE, the label set on the button is used as a stock id to select the stock
  item for the button.
  button :    a GtkButton
  use_stock : TRUE if the button should use a stock item

==== :Depressed ====
'':Depressed(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :DepressOnActivate ====
'':DepressOnActivate(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :FocusOnClick ====
'':FocusOnClick(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets whether the button will grab focus when it is clicked with the mouse.
  Making mouse clicks not grab focus is useful in places like toolbars where you
  don't want the keyboard focus removed from the main area of the application.
  button :         a GtkButton
  focus_on_click : whether the button grabs focus when clicked with the mouse
  Returns whether the button grabs focus when it is clicked with the mouse. See
  gtk_button_set_focus_on_click().
  button :  a GtkButton
  Returns : TRUE if the button grabs focus when it is clicked with the mouse.

==== :Clicked ====
'':Clicked(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits a "clicked" signal to the given GtkButton.
  button : The GtkButton you want to send the signal to.

==== :Enter ====
'':Enter(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits a "enter" signal to the given GtkButton.
  button : The GtkButton you want to send the signal to.

==== :GetAlignment ====
'':GetAlignment(self @ [[#T|T]], xalign @ [[..:..:Std:Object#T|Std.Object.T]], yalign @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the alignment of the child in the button.
  button : a GtkButton
  xalign : return location for horizontal alignment
  yalign : return location for vertical alignment

==== :GetFocusOnClick ====
'':GetFocusOnClick(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the button grabs focus when it is clicked with the mouse. See
  gtk_button_set_focus_on_click().
  button :  a GtkButton
  Returns : TRUE if the button grabs focus when it is clicked with the mouse.

==== :GetImage ====
'':GetImage(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Gets the widget that is currenty set as the image of button. This may have been
  explicitly set by gtk_button_set_image() or constructed by
  gtk_button_new_from_stock().
  button :  a GtkButton
  Returns : a GtkWidget or NULL in case there is no image

==== :GetImagePosition ====
'':GetImagePosition(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:PositionType#T|Gtk.Gtk.PositionType.T]]''

  Gets the position of the image relative to the text inside the button.
  button :  a GtkButton
  Returns : the position

==== :GetLabel ====
'':GetLabel(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Fetches the text from the label of the button, as set by gtk_button_set_label
  (). If the label text has not been set the return value will be NULL. This will
  be the case if you create an empty button with gtk_button_new() to use as a
  container.
  button :  a GtkButton
  Returns : The text of the label widget. This string is owned by the widget and
            must not be modified or freed.

==== :GetRelief ====
'':GetRelief(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ReliefStyle#T|Gtk.Gtk.ReliefStyle.T]]''

  Returns the current relief style of the given GtkButton.
  button :  The GtkButton you want the GtkReliefStyle from.
  Returns : The current GtkReliefStyle

==== :GetUseStock ====
'':GetUseStock(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the button label is a stock item.
  button :  a GtkButton
  Returns : TRUE if the button label is used to select a stock item instead of
            being used directly as the label text.

==== :GetUseUnderline ====
'':GetUseUnderline(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether an embedded underline in the button label indicates a mnemonic.
  See gtk_button_set_use_underline().
  button :  a GtkButton
  Returns : TRUE if an embedded underline in the button label indicates the
            mnemonic accelerator keys.

==== :Leave ====
'':Leave(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits a "leave" signal to the given GtkButton.
  button : The GtkButton you want to send the signal to.

==== :Pressed ====
'':Pressed(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits a "pressed" signal to the given GtkButton.
  button : The GtkButton you want to send the signal to.

==== :Released ====
'':Released(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits a "released" signal to the given GtkButton.
  button : The GtkButton you want to send the signal to.

==== :SetAlignment ====
'':SetAlignment(self @ [[#T|T]], xalign @ [[..:..:Std:Real#T|Std.Real.T]], yalign @ [[..:..:Std:Real#T|Std.Real.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the alignment of the child. This property has no effect unless the child
  is a GtkMisc or a GtkAligment.
  button : a GtkButton
  xalign : the horizontal position of the child, 0.0 is left aligned, 1.0 is
           right aligned
  yalign : the vertical position of the child, 0.0 is top aligned, 1.0 is bottom
           aligned

==== :SetFocusOnClick ====
'':SetFocusOnClick(self @ [[#T|T]], focus_on_click @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the button will grab focus when it is clicked with the mouse.
  Making mouse clicks not grab focus is useful in places like toolbars where you
  don't want the keyboard focus removed from the main area of the application.
  button :         a GtkButton
  focus_on_click : whether the button grabs focus when clicked with the mouse

==== :SetImage ====
'':SetImage(self @ [[#T|T]], image @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Set the image of button to the given widget. Note that it depends on the "gtk-
  button-images" setting whether the image will be displayed or not, you don't
  have to call gtk_widget_show() on image yourself.
  button : a GtkButton
  image :  a widget to set as the image for the button

==== New ====
''New() : [[# T| T]]''

  Creates a new GtkButton widget. To add a child widget to the button, use
  gtk_container_add().
  Returns : The newly created GtkButton widget.

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== NewWithMnemonic ====
''NewWithMnemonic(label : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

  Creates a new GtkButton containing a label. If characters in label are preceded
  by an underscore, they are underlined. If you need a literal underscore
  character in a label, use '__' (two underscores). The first underlined
  character represents a keyboard accelerator called a mnemonic. Pressing Alt and
  that key activates the button.
  label :   The text of the button, with an underscore in front of the mnemonic
            character
  Returns : a new GtkButton

==== NewWithLabel ====
''NewWithLabel(label : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

  Creates a GtkButton widget with a GtkLabel child containing the given text.
  label :   The text you want the GtkLabel to hold.
  Returns : The newly created GtkButton widget.

==== NewFromStock ====
''NewFromStock(stock_id : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

  Creates a new GtkButton containing the image and text from a stock item. Some
  stock ids have preprocessor macros like GTK_STOCK_OK and GTK_STOCK_APPLY.
  If stock_id is unknown, then it will be treated as a mnemonic label (as for
  gtk_button_new_with_mnemonic()).
  stock_id : the name of the stock item
  Returns :  a new GtkButton

