====== TreeModel ======
==== T ====

  The GtkTreeModel interface defines a generic tree interface for use by the
  GtkTreeView widget. It is an abstract interface, and is designed to be usable
  with any appropriate data structure. The programmer just has to implement this
  interface on their own data type for it to be viewable by a GtkTreeView widget.
  The model is represented as a hierarchical tree of strongly-typed, columned
  data. In other words, the model can be seen as a tree where every node has
  different values depending on which column is being queried. The type of data
  found in a column is determined by using the GType system (ie. G_TYPE_INT,
  GTK_TYPE_BUTTON, G_TYPE_POINTER, etc.). The types are homogeneous per column
  across all nodes. It is important to note that this interface only provides a
  way of examining a model and observing changes. The implementation of each
  individual model decides how and if changes are made.
  In order to make life simpler for programmers who do not need to write their
  own specialized model, two generic models are provided &#8212; the GtkTreeStore
  and the GtkListStore. To use these, the developer simply pushes data into these
  models as necessary. These models provide the data structure as well as all
  appropriate tree interfaces. As a result, implementing drag and drop, sorting,
  and storing data is trivial. For the vast majority of trees and lists, these
  two models are sufficient.
  Models are accessed on a node/column level of granularity. One can query for
  the value of a model at a certain node and a certain column on that node. There
  are two structures used to reference a particular node in a model. They are the
  GtkTreePath and the GtkTreeIter [4] Most of the interface consists of
  operations on a GtkTreeIter.
  A path is essentially a potential node. It is a location on a model that may or
  may not actually correspond to a node on a specific model. The GtkTreePath
  struct can be converted into either an array of unsigned integers or a string.
  The string form is a list of numbers separated by a colon. Each number refers
  to the offset at that level. Thus, the path &#8220;0&#8221; refers to the root
  node and the path &#8220;2:4&#8221; refers to the fifth child of the third
  node.
  By contrast, a GtkTreeIter is a reference to a specific node on a specific
  model. It is a generic struct with an integer and three generic pointers. These
  are filled in by the model in a model-specific way. One can convert a path to
  an iterator by calling gtk_tree_model_get_iter(). These iterators are the
  primary way of accessing a model and are similar to the iterators used by
  GtkTextBuffer. They are generally statically allocated on the stack and only
  used for a short time. The model interface defines a set of operations using
  them for navigating the model.
  It is expected that models fill in the iterator with private data. For example,
  the GtkListStore model, which is internally a simple linked list, stores a list
  node in one of the pointers. The GtkTreeModelSort stores an array and an offset
  in two of the pointers. Additionally, there is an integer field. This field is
  generally filled with a unique stamp per model. This stamp is for catching
  errors resulting from using invalid iterators with a model.
  The lifecycle of an iterator can be a little confusing at first. Iterators are
  expected to always be valid for as long as the model is unchanged (and doesn't
  emit a signal). The model is considered to own all outstanding iterators and
  nothing needs to be done to free them from the user's point of view.
  Additionally, some models guarantee that an iterator is valid for as long as
  the node it refers to is valid (most notably the GtkTreeStore and
  GtkListStore). Although generally uninteresting, as one always has to allow for
  the case where iterators do not persist beyond a signal, some very important
  performance enhancements were made in the sort model. As a result, the
  GTK_TREE_MODEL_ITERS_PERSIST flag was added to indicate this behavior.
  To help show some common operation of a model, some examples are provided. The
  first example shows three ways of getting the iter at the location &#8220;3:2:
  5&#8221;. While the first method shown is easier, the second is much more
  common, as you often get paths from callbacks.
  Example 15.&#160;Acquiring a GtkTreeIter
  /* Three ways of getting the iter pointing to the location
   */
  {
    GtkTreePath *path;
    GtkTreeIter iter;
    GtkTreeIter parent_iter;
  
    /* get the iterator from a string */
    gtk_tree_model_get_iter_from_string (model, &iter, "3:2:5");
  
    /* get the iterator from a path */
    path = gtk_tree_path_new_from_string ("3:2:5");
    gtk_tree_model_get_iter (model, &iter, path);
    gtk_tree_path_free (path);
  
  
    /* walk the tree to find the iterator */
    gtk_tree_model_iter_nth_child (model, &iter, NULL, 3);
    parent_iter = iter;
    gtk_tree_model_iter_nth_child (model, &iter, &parent_iter, 2);
    parent_iter = iter;
    gtk_tree_model_iter_nth_child (model, &iter, &parent_iter, 5);
  }
  
  This second example shows a quick way of iterating through a list and getting a
  string and an integer from each row. The populate_model function used below is
  not shown, as it is specific to the GtkListStore. For information on how to
  write such a function, see the GtkListStore documentation.
  Example 16.&#160;Reading data from a GtkTreeModel
  enum
  {
    STRING_COLUMN,
    INT_COLUMN,
    N_COLUMNS
  };
  
  {
    GtkTreeModel *list_store;
    GtkTreeIter iter;
    gboolean valid;
    gint row_count = 0;
  
    /* make a new list_store */
    list_store = gtk_list_store_new (N_COLUMNS, G_TYPE_STRING, G_TYPE_INT);
  
    /* Fill the list store with data */
    populate_model (list_store);
  
    /* Get the first iter in the list */
    valid = gtk_tree_model_get_iter_first (list_store, &iter);
  
    while (valid)
      {
        /* Walk through the list, reading each row */
        gchar *str_data;
        gint   int_data;
  
        /* Make sure you terminate calls to gtk_tree_model_get()
         * with a '-1' value
         */
        gtk_tree_model_get (list_store, &iter,
                            STRING_COLUMN, &str_data,
                            INT_COLUMN, &int_data,
                            -1);
  
        /* Do something with the data */
        g_print ("Row %d: (%s,%d)\n", row_count, str_data, int_data);
        g_free (str_data);
  
        row_count ++;
        valid = gtk_tree_model_iter_next (list_store, &iter);
      }
  }
  
  

==== :UnrefNode ====
'':UnrefNode(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Lets the tree unref the node. This is an optional method for models to
  implement. To be more specific, models may ignore this call as it exists
  primarily for performance reasons.
  For more information on what this means, see gtk_tree_model_ref_node(). Please
  note that nodes that are deleted are not unreffed.
  tree_model : A GtkTreeModel.
  iter :       The GtkTreeIter.

==== :Foreach ====
'':Foreach(self @ [[#T|T]], func @ [[..:..:Std:Function#T|Std.Function.T]], user_data @ [[..:..:Std:Address#T|Std.Address.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Calls func on each node in model in a depth-first fashion. If func returns
  TRUE, then the tree ceases to be walked, and gtk_tree_model_foreach() returns.
  model :     A GtkTreeModel
  func :      A function to be called on each row
  user_data : User data to passed to func.

==== :Get ====
'':Get(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the value of one or more cells in the row referenced by iter. The variable
  argument list should contain integer column numbers, each column number
  followed by a place to store the value being retrieved. The list is terminated
  by a -1. For example, to get a value from column 0 with type G_TYPE_STRING, you
  would write: gtk_tree_model_get (model, iter, 0, &place_string_here, -1), where
  place_string_here is a gchar* to be filled with the string. If appropriate, the
  returned values have to be freed or unreferenced.
  tree_model : a GtkTreeModel
  iter :       a row in tree_model
  ... :        pairs of column number and value return locations, terminated by -
               1

==== :GetColumnType ====
'':GetColumnType(self @ [[#T|T]], index_ @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''

  Returns the type of the column.
  tree_model : A GtkTreeModel.
  index_ :     The column index.
  Returns :    The type of the column.

==== :GetFlags ====
'':GetFlags(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Returns a set of flags supported by this interface. The flags are a bitwise
  combination of GtkTreeModelFlags. The flags supported should not change during
  the lifecycle of the tree_model.
  tree_model : A GtkTreeModel.
  Returns :    The flags supported by this interface.

==== :GetIter ====
'':GetIter(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], path @ [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets iter to a valid iterator pointing to path.
  tree_model : A GtkTreeModel.
  iter :       The uninitialized GtkTreeIter.
  path :       The GtkTreePath.
  Returns :    TRUE, if iter was set.

==== :GetIterFirst ====
'':GetIterFirst(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Initializes iter with the first iterator in the tree (the one at the path "0")
  and returns TRUE. Returns FALSE if the tree is empty.
  tree_model : A GtkTreeModel.
  iter :       The uninitialized GtkTreeIter.
  Returns :    TRUE, if iter was set.

==== :GetIterFromString ====
'':GetIterFromString(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], path_string @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets iter to a valid iterator pointing to path_string, if it exists. Otherwise,
  iter is left invalid and FALSE is returned.
  tree_model :  A GtkTreeModel.
  iter :        An uninitialized GtkTreeIter.
  path_string : A string representation of a GtkTreePath.
  Returns :     TRUE, if iter was set.

==== :GetNColumns ====
'':GetNColumns(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Returns the number of columns supported by tree_model.
  tree_model : A GtkTreeModel.
  Returns :    The number of columns.

==== :GetPath ====
'':GetPath(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]]''

  Returns a newly-created GtkTreePath referenced by iter. This path should be
  freed with gtk_tree_path_free().
  tree_model : A GtkTreeModel.
  iter :       The GtkTreeIter.
  Returns :    a newly-created GtkTreePath.

==== :GetStringFromIter ====
'':GetStringFromIter(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Generates a string representation of the iter. This string is a ':' separated
  list of numbers. For example, "4:10:0:3" would be an acceptable return value
  for this string.
  tree_model : A GtkTreeModel.
  iter :       An GtkTreeIter.
  Returns :    A newly-allocated string. Must be freed with g_free().

==== :GetValist ====
'':GetValist(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], var_args @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  See gtk_tree_model_get(), this version takes a va_list for language bindings to
  use.
  tree_model : a GtkTreeModel
  iter :       a row in tree_model
  var_args :   va_list of column/return location pairs

==== :GetValue ====
'':GetValue(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], column @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], value @ [[..:..:Gtk:GObject:Value#T|Gtk.GObject.Value.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets initializes and sets value to that at column. When done with value,
  g_value_unset() needs to be called to free any allocated memory.
  tree_model : A GtkTreeModel.
  iter :       The GtkTreeIter.
  column :     The column to lookup the value at.
  value :      An empty GValue to set.

==== :IterChildren ====
'':IterChildren(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], parent @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets iter to point to the first child of parent. If parent has no children,
  FALSE is returned and iter is set to be invalid. parent will remain a valid
  node after this function has been called.
  If parent is NULL returns the first node, equivalent to
  gtk_tree_model_get_iter_first (tree_model, iter);
  tree_model : A GtkTreeModel.
  iter :       The new GtkTreeIter to be set to the child.
  parent :     The GtkTreeIter, or NULL
  Returns :    TRUE, if child has been set to the first child.

==== :IterHasChild ====
'':IterHasChild(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns TRUE if iter has children, FALSE otherwise.
  tree_model : A GtkTreeModel.
  iter :       The GtkTreeIter to test for children.
  Returns :    TRUE if iter has children.

==== :IterNChildren ====
'':IterNChildren(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Returns the number of children that iter has. As a special case, if iter is
  NULL, then the number of toplevel nodes is returned.
  tree_model : A GtkTreeModel.
  iter :       The GtkTreeIter, or NULL.
  Returns :    The number of children of iter.

==== :IterNext ====
'':IterNext(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets iter to point to the node following it at the current level. If there is
  no next iter, FALSE is returned and iter is set to be invalid.
  tree_model : A GtkTreeModel.
  iter :       The GtkTreeIter.
  Returns :    TRUE if iter has been changed to the next node.

==== :IterNthChild ====
'':IterNthChild(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], parent @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], n @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets iter to be the child of parent, using the given index. The first index is
  0. If n is too big, or parent has no children, iter is set to an invalid
  iterator and FALSE is returned. parent will remain a valid node after this
  function has been called. As a special case, if parent is NULL, then the nth
  root node is set.
  tree_model : A GtkTreeModel.
  iter :       The GtkTreeIter to set to the nth child.
  parent :     The GtkTreeIter to get the child from, or NULL.
  n :          Then index of the desired child.
  Returns :    TRUE, if parent has an nth child.

==== :IterParent ====
'':IterParent(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], child @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets iter to be the parent of child. If child is at the toplevel, and doesn't
  have a parent, then iter is set to an invalid iterator and FALSE is returned.
  child will remain a valid node after this function has been called.
  tree_model : A GtkTreeModel
  iter :       The new GtkTreeIter to set to the parent.
  child :      The GtkTreeIter.
  Returns :    TRUE, if iter is set to the parent of child.

==== :RefNode ====
'':RefNode(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Lets the tree ref the node. This is an optional method for models to implement.
  To be more specific, models may ignore this call as it exists primarily for
  performance reasons.
  This function is primarily meant as a way for views to let caching model know
  when nodes are being displayed (and hence, whether or not to cache that node.)
  For example, a file-system based model would not want to keep the entire file-
  hierarchy in memory, just the sections that are currently being displayed by
  every current view.
  A model should be expected to be able to get an iter independent of its reffed
  state.
  tree_model : A GtkTreeModel.
  iter :       The GtkTreeIter.

==== :RowChanged ====
'':RowChanged(self @ [[#T|T]], path @ [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits the "row_changed" signal on tree_model.
  tree_model : A GtkTreeModel
  path :       A GtkTreePath pointing to the changed row
  iter :       A valid GtkTreeIter pointing to the changed row

==== :RowDeleted ====
'':RowDeleted(self @ [[#T|T]], path @ [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits the "row_deleted" signal on tree_model. This should be called by models
  after a row has been removed. The location pointed to by path should be the
  location that the row previously was at. It may not be a valid location
  anymore.
  tree_model : A GtkTreeModel
  path :       A GtkTreePath pointing to the previous location of the deleted
               row.

==== :RowHasChildToggled ====
'':RowHasChildToggled(self @ [[#T|T]], path @ [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits the "row_has_child_toggled" signal on tree_model. This should be called
  by models after the child state of a node changes.
  tree_model : A GtkTreeModel
  path :       A GtkTreePath pointing to the changed row
  iter :       A valid GtkTreeIter pointing to the changed row

==== :RowInserted ====
'':RowInserted(self @ [[#T|T]], path @ [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits the "row_inserted" signal on tree_model
  tree_model : A GtkTreeModel
  path :       A GtkTreePath pointing to the inserted row
  iter :       A valid GtkTreeIter pointing to the inserted row

==== :RowsReordered ====
'':RowsReordered(self @ [[#T|T]], path @ [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], new_order @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits the "rows_reordered" signal on tree_model. This should be called by
  models when their rows have been reordered.
  tree_model : A GtkTreeModel
  path :       A GtkTreePath pointing to the tree node whose children have been
               reordered
  iter :       A valid GtkTreeIter pointing to the node whose children have been
               reordered, or NULL if the depth of path is 0.
               an array of integers mapping the current position of each child to
  new_order :  its old position before the re-ordering, i.e. new_order[newpos] =
               oldpos.

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


