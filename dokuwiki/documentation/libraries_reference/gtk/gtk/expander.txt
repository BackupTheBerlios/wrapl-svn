====== Expander ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Bin#T|Gtk.Gtk.Bin.T]]
  * [[..:..:Gtk:Gtk:Container#T|Gtk.Gtk.Container.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

A GtkExpander allows the user to hide or show its child by clicking on an
expander triangle similar to the triangles used in a GtkTreeView.
Normally you use an expander as you would use any other descendant of GtkBin;
you create the child widget and use gtk_container_add() to add it to the
expander. When the expander is toggled, it will take care of showing and hiding
the child automatically.
Special Usage
There are situations in which you may prefer to show and hide the expanded
widget yourself, such as when you want to actually create the widget at
expansion time. In this case, create a GtkExpander but do not add a child to
it. The expander widget has an expanded property which can be used to monitor
its expansion state. You should watch this property with a signal connection as
follows:
expander = gtk_expander_new_with_mnemonic ("_More Options");
g_signal_connect (expander, "notify::expanded",
                  G_CALLBACK (expander_callback), NULL);
...
static void
expander_callback (GObject    *object,
                   GParamSpec *param_spec,
                   gpointer    user_data)
{
  GtkExpander *expander;
  expander = GTK_EXPANDER (object);
  if (gtk_expander_get_expanded (expander))
    {
      /* Show or create widgets */
    }
  else
    {
      /* Hide or destroy widgets */
    }
}
**** GtkExpander as GtkBuildable ****
The GtkExpander implementation of the GtkBuildable interface supports placing a
child in the label position by specifying "label" as the "type" attribute of a
<child> element. A normal content child can be specified without specifying a
<child> type attribute.
Example 38.&#160;A UI definition fragment with GtkExpander
<object class="GtkExpander">
  <child type="label">
    <object class="GtkLabel" id="expander-label"/>
  </child>
  <child>
    <object class="GtkEntry" id="expander-content"/>
  </child>
</object>

==== :SetUseUnderline ====
'':SetUseUnderline(self @ [[#T|T]], use_underline @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

If true, an underline in the text of the expander label indicates the next
character should be used for the mnemonic accelerator key.
expander :      a GtkExpander
use_underline : TRUE if underlines in the text indicate mnemonics
Since 2.4

==== :SetUseMarkup ====
'':SetUseMarkup(self @ [[#T|T]], use_markup @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

Sets whether the text of the label contains markup in Pango's text markup
language. See gtk_label_set_markup().
expander :   a GtkExpander
use_markup : TRUE if the label's text should be parsed for markup
Since 2.4

==== :SetSpacing ====
'':SetSpacing(self @ [[#T|T]], spacing @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

Sets the spacing field of expander, which is the number of pixels to place
between expander and the child.
expander : a GtkExpander
spacing :  distance between the expander and child in pixels.
Since 2.4

==== :Priv ====
'':Priv(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :GetExpanded ====
'':GetExpanded(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

Queries a GtkExpander and returns its current state. Returns TRUE if the child
widget is revealed.
See gtk_expander_set_expanded().
expander : a GtkExpander
Returns :  the current state of the expander.
Since 2.4

==== :GetLabel ====
'':GetLabel(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

Fetches the text from the label of the expander, as set by
gtk_expander_set_label(). If the label text has not been set the return value
will be NULL. This will be the case if you create an empty button with
gtk_button_new() to use as a container.
expander : a GtkExpander
Returns :  The text of the label widget. This string is owned by the widget and
           must not be modified or freed.
Since 2.4

==== :GetLabelWidget ====
'':GetLabelWidget(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

Retrieves the label widget for the frame. See gtk_expander_set_label_widget().
expander : a GtkExpander
Returns :  the label widget, or NULL if there is none.
Since 2.4
***** Property Details *****
The "expanded" property
  "expanded"                 gboolean              : Read / Write / Construct
Whether the expander has been opened to reveal the child widget.
Default value: FALSE

==== :GetSpacing ====
'':GetSpacing(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

Gets the value set by gtk_expander_set_spacing().
expander : a GtkExpander
Returns :  spacing between the expander and child.
Since 2.4

==== :GetUseMarkup ====
'':GetUseMarkup(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

Returns whether the label's text is interpreted as marked up with the Pango
text markup language. See gtk_expander_set_use_markup().
expander : a GtkExpander
Returns :  TRUE if the label's text will be parsed for markup
Since 2.4

==== :GetUseUnderline ====
'':GetUseUnderline(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

Returns whether an embedded underline in the expander label indicates a
mnemonic. See gtk_expander_set_use_underline().
expander : a GtkExpander
Returns :  TRUE if an embedded underline in the expander label indicates the
           mnemonic accelerator keys.
Since 2.4

==== :SetExpanded ====
'':SetExpanded(self @ [[#T|T]], expanded @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

Sets the state of the expander. Set to TRUE, if you want the child widget to be
revealed, and FALSE if you want the child widget to be hidden.
expander : a GtkExpander
expanded : whether the child widget is revealed
Since 2.4

==== :SetLabel ====
'':SetLabel(self @ [[#T|T]], label @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

Sets the text of the label of the expander to label.
This will also clear any previously set labels.
expander : a GtkExpander
label :    a string
Since 2.4

==== :SetLabelWidget ====
'':SetLabelWidget(self @ [[#T|T]], label_widget @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

Set the label widget for the expander. This is the widget that will appear
embedded alongside the expander arrow.
expander :     a GtkExpander
label_widget : the new label widget
Since 2.4

==== New ====
''New(label : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

Creates a new expander using label as the text of the label.
label :   the text of the label
Returns : a new GtkExpander widget.
Since 2.4

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== NewWithMnemonic ====
''NewWithMnemonic(label : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

Creates a new expander using label as the text of the label. If characters in
label are preceded by an underscore, they are underlined. If you need a literal
underscore character in a label, use '__' (two underscores). The first
underlined character represents a keyboard accelerator called a mnemonic.
Pressing Alt and that key activates the button.
label :   the text of the label with an underscore in front of the mnemonic
          character
Returns : a new GtkExpander widget.
Since 2.4

