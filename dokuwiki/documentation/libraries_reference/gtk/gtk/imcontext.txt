====== IMContext ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  

==== :SetUsePreedit ====
'':SetUsePreedit(self @ [[#T|T]], use_preedit @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the IM context should use the preedit string to display feedback.
  If use_preedit is FALSE (default is TRUE), then the IM context may use some
  other method to display feedback, such as displaying it in a child of the root
  window.
  context :     a GtkIMContext
  use_preedit : whether the IM context should use the preedit string.

==== :DeleteSurrounding ====
'':DeleteSurrounding(self @ [[#T|T]], offset @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], n_chars @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Asks the widget that the input context is attached to to delete characters
  around the cursor position by emitting the GtkIMContext::delete_surrounding
  signal. Note that offset and n_chars are in characters not in bytes which
  differs from the usage other places in GtkIMContext.
  In order to use this function, you should first call
  gtk_im_context_get_surrounding() to get the current context, and call this
  function immediately afterwards to make sure that you know what you are
  deleting. You should also account for the fact that even if the signal was
  handled, the input context might not have deleted all the characters that were
  requested to be deleted.
  This function is used by an input method that wants to make subsitutions in the
  existing text in response to new input. It is not useful for applications.
  context : a GtkIMContext
  offset :  offset from cursor position in chars; a negative value means start
            before the cursor.
  n_chars : number of characters to delete.
  Returns : TRUE if the signal was handled.

==== :FilterKeypress ====
'':FilterKeypress(self @ [[#T|T]], event @ [[..:..:Gtk:Gdk:EventKey#T|Gtk.Gdk.EventKey.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Allow an input method to internally handle key press and release events. If
  this function returns TRUE, then no further processing should be done for this
  key event.
  context : a GtkIMContext
  event :   the key event
  Returns : TRUE if the input method handled the key event.

==== :FocusIn ====
'':FocusIn(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Notify the input method that the widget to which this input context corresponds
  has gained focus. The input method may, for example, change the displayed
  feedback to reflect this change.
  context : a GtkIMContext

==== :FocusOut ====
'':FocusOut(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Notify the input method that the widget to which this input context corresponds
  has lost focus. The input method may, for example, change the displayed
  feedback or reset the contexts state to reflect this change.
  context : a GtkIMContext

==== :GetPreeditString ====
'':GetPreeditString(self @ [[#T|T]], str @ [[..:..:Std:List#T|Std.List.T]], attrs @ [[..:..:Std:Object#T|Std.Object.T]], cursor_pos @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Retrieve the current preedit string for the input context, and a list of
  attributes to apply to the string. This string should be displayed inserted at
  the insertion point.
  context :    a GtkIMContext
  str :        location to store the retrieved string. The string retrieved must
               be freed with g_free().
               location to store the retrieved attribute list. When you are done
  attrs :      with this list, you must unreference it with pango_attr_list_unref
               ().
  cursor_pos : location to store position of cursor (in characters) within the
               preedit string.

==== :GetSurrounding ====
'':GetSurrounding(self @ [[#T|T]], text @ [[..:..:Std:List#T|Std.List.T]], cursor_index @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Retrieves context around the insertion point. Input methods typically want
  context in order to constrain input text based on existing text; this is
  important for languages such as Thai where only some sequences of characters
  are allowed.
  This function is implemented by emitting the GtkIMContext::retrieve_surrounding
  signal on the input method; in response to this signal, a widget should provide
  as much context as is available, up to an entire paragraph, by calling
  gtk_im_context_set_surrounding(). Note that there is no obligation for a widget
  to respond to the ::retrieve_surrounding signal, so input methods must be
  prepared to function without context.
  context :      a GtkIMContext
                 location to store a UTF-8 encoded string of text holding context
  text :         around the insertion point. If the function returns TRUE, then
                 you must free the result stored in this location with g_free().
  cursor_index : location to store byte index of the insertion cursor within
                 text.
  Returns :      TRUE if surrounding text was provided; in this case you must
                 free the result stored in *text.

==== :Reset ====
'':Reset(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Notify the input method that a change such as a change in cursor position has
  been made. This will typically cause the input method to clear the preedit
  state.
  context : a GtkIMContext

==== :SetClientWindow ====
'':SetClientWindow(self @ [[#T|T]], window @ [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Set the client window for the input context; this is the GdkWindow in which the
  input appears. This window is used in order to correctly position status
  windows, and may also be used for purposes internal to the input method.
  context : a GtkIMContext
  window :  the client window. This may be NULL to indicate that the previous
            client window no longer exists.

==== :SetCursorLocation ====
'':SetCursorLocation(self @ [[#T|T]], area @ [[..:..:Gtk:Gdk:Rectangle#T|Gtk.Gdk.Rectangle.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Notify the input method that a change in cursor position has been made. The
  location is relative to the client window.
  context : a GtkIMContext
  area :    new location

==== :SetSurrounding ====
'':SetSurrounding(self @ [[#T|T]], text @ [[..:..:Std:String#T|Std.String.T]], len @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], cursor_index @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets surrounding context around the insertion point and preedit string. This
  function is expected to be called in response to the GtkIMContext::
  retrieve_surrounding signal, and will likely have no effect if called at other
  times.
  context :      a GtkIMContext
  text :         text surrounding the insertion point, as UTF-8. the preedit
                 string should not be included within text.
  len :          the length of text, or -1 if text is nul-terminated
  cursor_index : the byte index of the insertion cursor within text.

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


