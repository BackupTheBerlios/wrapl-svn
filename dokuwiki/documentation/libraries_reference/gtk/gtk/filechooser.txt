====== FileChooser ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  GtkFileChooser is an interface that can be implemented by file selection
  widgets. In GTK+, the main objects that implement this interface are
  GtkFileChooserWidget, GtkFileChooserDialog, and GtkFileChooserButton. You do
  not need to write an object that implements the GtkFileChooser interface unless
  you are trying to adapt an existing file selector to expose a standard
  programming interface.
  GtkFileChooser allows for shortcuts to various places in the filesystem. In the
  default implementation these are displayed in the left pane. It may be a bit
  confusing at first taht these shortcuts come from various sources and in
  various flavours, so lets explain the terminology here:
            are created by the user, by dragging folders from the right pane to
  Bookmarks the left pane, or by using the "Add". Bookmarks can be renamed and
            deleted by the user.
            can be provided by the application or by the underlying filesystem
  Shortcuts abstraction (e.g. both the gnome-vfs and the Windows filesystems
            provide "Desktop" shortcuts). Shortcuts cannot be modified by the
            user.
  Volumes   are provided by the underlying filesystem abstraction. They are the
            "roots" of the filesystem.
  **** File Names and Encodings ****
  When the user is finished selecting files in a GtkFileChooser, your program can
  get the selected names either as filenames or as URIs. For URIs, the normal
  escaping rules are applied if the URI contains non-ASCII characters. However,
  filenames are always returned in the character set specified by the
  G_FILENAME_ENCODING environment variable. Please see the Glib documentation for
  more details about this variable.
  **** Important ****
  This means that while you can pass the result of gtk_file_chooser_get_filename
  () to open(2) or fopen(3), you may not be able to directly set it as the text
  of a GtkLabel widget unless you convert it first to UTF-8, which all GTK+
  widgets expect. You should use g_filename_to_utf8() to convert filenames into
  strings that can be passed to GTK+ widgets.
  ===============================================================================
  **** Adding a Preview Widget ****
  You can add a custom preview widget to a file chooser and then get notification
  about when the preview needs to be updated. To install a preview widget, use
  gtk_file_chooser_set_preview_widget(). Then, connect to the "update-preview"
  signal to get notified when you need to update the contents of the preview.
  Your callback should use gtk_file_chooser_get_preview_filename() to see what
  needs previewing. Once you have generated the preview for the corresponding
  file, you must call gtk_file_chooser_set_preview_widget_active() with a boolean
  flag that indicates whether your callback could successfully generate a
  preview.
  Example 31.&#160;Sample Usage
  {
    GtkImage *preview;
  
    ...
  
    preview = gtk_image_new ();
  
    gtk_file_chooser_set_preview_widget (my_file_chooser, preview);
    g_signal_connect (my_file_chooser, "update-preview",
  		    G_CALLBACK (update_preview_cb), preview);
  }
  
  static void
  update_preview_cb (GtkFileChooser *file_chooser, gpointer data)
  {
    GtkWidget *preview;
    char *filename;
    GdkPixbuf *pixbuf;
    gboolean have_preview;
  
    preview = GTK_WIDGET (data);
    filename = gtk_file_chooser_get_preview_filename (file_chooser);
  
    pixbuf = gdk_pixbuf_new_from_file_at_size (filename, 128, 128, NULL);
    have_preview = (pixbuf != NULL);
    g_free (filename);
  
    gtk_image_set_from_pixbuf (GTK_IMAGE (preview), pixbuf);
    if (pixbuf)
      gobject_unref (pixbuf);
  
    gtk_file_chooser_set_preview_widget_active (file_chooser, have_preview);
  }
  	
  
  ===============================================================================
  **** Adding Extra Widgets ****
  You can add extra widgets to a file chooser to provide options that are not
  present in the default design. For example, you can add a toggle button to give
  the user the option to open a file in read-only mode. You can use
  gtk_file_chooser_set_extra_widget() to insert additional widgets in a file
  chooser.
  Example 32.&#160;Sample Usage
  {
    GtkWidget *toggle;
  
    ...
  
    toggle = gtk_check_button_new_with_label ("Open file read-only");
    gtk_widget_show (toggle);
    gtk_file_chooser_set_extra_widget (my_file_chooser, toggle);
  }
  	
  
  **** Note ****
  If you want to set more than one extra widget in the file chooser, you can a
  container such as a GtkVBox or a GtkTable and include your widgets in it. Then,
  set the container as the whole extra widget.
  ===============================================================================
  **** Key Bindings ****
  Internally, GTK+ implements a file chooser's graphical user interface with the
  private GtkFileChooserDefaultClass. This widget has several key_bindings and
  their associated signals. This section describes the available key binding
  signals.
  Example 33.&#160;GtkFileChooser key binding example
  The default keys that activate the key-binding signals in
  GtkFileChooserDefaultClass are as follows:
   __________________________________________________________________________
  |Signal_name___|Default_key_combinations___________________________________|
  |location-popup|Control+L_(empty_path);_/_(path_of_"/")[a];_~_(path_of_"~")|
  |up-folder_____|Alt+Up[b]_;_Backspace______________________________________|
  |down-folder___|Alt+Down___________________________________________________|
  |home-folder___|Alt+Home___________________________________________________|
  |desktop-folder|Alt+D______________________________________________________|
  |quick-bookmark|Alt+1_through_Alt+0________________________________________|
  |[a] Both the individual / key and the numeric keypad's "divide" key are   |
  |supported.                                                                |
  |[b] Both the individual Up key and the numeric keypad's Up key are        |
  |supported.________________________________________________________________|
  You can change these defaults to something else. For example, to add a Shift
  modifier to a few of the default bindings, you can include the following
  fragment in your .gtkrc-2.0 file:
  binding "my-own-gtkfilechooser-bindings" {
  	bind "<Alt><Shift>Up" {
  		"up-folder" ()
  	}
  	bind "<Alt><Shift>Down" {
  		"down-folder" ()
  	}
  	bind "<Alt><Shift>Home" {
  		"home-folder" ()
  	}
  }
  
  class "GtkFileChooserDefault" binding "my-own-gtkfilechooser-bindings"
  	
  
  *** The "GtkFileChooserDefault::location-popup" signal ***
            void user_function (GtkFileChooserDefault *chooser,
                                const char            *path,
                                gpointer user_data);
  	
  This is used to make the file chooser show a "Location" dialog which the user
  can use to manually type the name of the file he wishes to select. The path
  argument is a string that gets put in the text entry for the file name. By
  default this is bound to Control+L with a path string of "" (the empty string).
  It is also bound to / with a path string of "/" (a slash): this lets you type /
  and immediately type a path name. On Unix systems, this is bound to ~ (tilde)
  with a path string of "~" itself for access to home directories.
  chooser :   the object which received the signal.
  path :      default contents for the text entry for the file name
  user_data : user data set when the signal handler was connected.
  **** Tip ****
  You can create your own bindings for the location-popup signal with custom path
  strings, and have a crude form of easily-to-type bookmarks. For example, say
  you access the path /home/username/misc very frequently. You could then create
  an Alt+M shortcut by including the following in your .gtkrc-2.0:
  binding "misc-shortcut" {
  	bind "<Alt>M" {
  		"location-popup" ("/home/username/misc")
  	}
  }
  
  class "GtkFileChooserDefault" binding "misc-shortcut"
  	
  *** The "GtkFileChooserDefault::up-folder" signal ***
            void user_function (GtkFileChooserDefault *chooser,
                                gpointer user_data);
  	
  This is used to make the file chooser go to the parent of the current folder in
  the file hierarchy. By default this is bound to Backspace and Alt+Up (the Up
  key in the numeric keypad also works).
  chooser :   the object which received the signal.
  user_data : user data set when the signal handler was connected.
  *** The "GtkFileChooserDefault::down-folder" signal ***
            void user_function (GtkFileChooserDefault *chooser,
                                gpointer user_data);
  	
  This is used to make the file chooser go to a child of the current folder in
  the file hierarchy. The subfolder that will be used is displayed in the path
  bar widget of the file chooser. For example, if the path bar is showing "/foo/
  bar/baz", then this will cause the file chooser to switch to the "baz"
  subfolder. By default this is bound to Alt+Down (the Down key in the numeric
  keypad also works).
  chooser :   the object which received the signal.
  user_data : user data set when the signal handler was connected.
  *** The "GtkFileChooserDefault::home-folder" signal ***
            void user_function (GtkFileChooserDefault *chooser,
                                gpointer user_data);
  	
  This is used to make the file chooser show the user's home folder in the file
  list. By default this is bound to Alt+Home (the Home key in the numeric keypad
  also works).
  chooser :   the object which received the signal.
  user_data : user data set when the signal handler was connected.
  *** The "GtkFileChooserDefault::desktop-folder" signal ***
            void user_function (GtkFileChooserDefault *chooser,
                                gpointer user_data);
  	
  This is used to make the file chooser show the user's Desktop folder in the
  file list. By default this is bound to Alt+D.
  chooser :   the object which received the signal.
  user_data : user data set when the signal handler was connected.
  *** The "GtkFileChooserDefault::quick-bookmark" signal ***
            void user_function (GtkFileChooserDefault *chooser,
                                gint bookmark_index,
                                gpointer user_data);
  	
  This is used to make the file chooser switch to the bookmark specified in the
  bookmark_index parameter. For example, if you have three bookmarks, you can
  pass 0, 1, 2 to this signal to switch to each of them, respectively. By default
  this is bound to Alt+1, Alt+2, etc. until Alt+0. Note that in the default
  binding, that Alt+1 is actually defined to switch to the bookmark at index 0,
  and so on successively; Alt+0 is defined to switch to the bookmark at index 10.
  chooser :        the object which received the signal.
  bookmark_indes : index of the bookmark to switch to; the indices start at 0.
  user_data :      user data set when the signal handler was connected.
  

==== :UnselectUri ====
'':UnselectUri(self @ [[#T|T]], uri @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Unselects the file referred to by uri. If the file is not in the current
  directory, does not exist, or is otherwise not currently selected, does
  nothing.
  chooser : a GtkFileChooser
  uri :     the URI to unselect

==== :UnselectFilename ====
'':UnselectFilename(self @ [[#T|T]], filename @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Unselects a currently selected filename. If the filename is not in the current
  directory, does not exist, or is otherwise not currently selected, does
  nothing.
  chooser :  a GtkFileChooser
  filename : the filename to unselect

==== :AddFilter ====
'':AddFilter(self @ [[#T|T]], filter @ [[..:..:Gtk:Gtk:FileFilter#T|Gtk.Gtk.FileFilter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds filter to the list of filters that the user can select between. When a
  filter is selected, only files that are passed by that filter are displayed.
  Note that the chooser takes ownership of the filter, so you have to ref and
  sink it if you want to keep a reference.
  chooser : a GtkFileChooser
  filter :  a GtkFileFilter

==== :AddShortcutFolder ====
'':AddShortcutFolder(self @ [[#T|T]], folder @ [[..:..:Std:String#T|Std.String.T]], error @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Adds a folder to be displayed with the shortcut folders in a file chooser. Note
  that shortcut folders do not get saved, as they are provided by the
  application. For example, you can use this to add a "/usr/share/mydrawprogram/
  Clipart" folder to the volume list.
  chooser : a GtkFileChooser
  folder :  filename of the folder to add
  error :   location to store error, or NULL
  Returns : TRUE if the folder could be added successfully, FALSE otherwise. In
            the latter case, the error will be set as appropriate.

==== :AddShortcutFolderUri ====
'':AddShortcutFolderUri(self @ [[#T|T]], uri @ [[..:..:Std:String#T|Std.String.T]], error @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Adds a folder URI to be displayed with the shortcut folders in a file chooser.
  Note that shortcut folders do not get saved, as they are provided by the
  application. For example, you can use this to add a "file:///usr/share/
  mydrawprogram/Clipart" folder to the volume list.
  chooser : a GtkFileChooser
  uri :     URI of the folder to add
  error :   location to store error, or NULL
  Returns : TRUE if the folder could be added successfully, FALSE otherwise. In
            the latter case, the error will be set as appropriate.

==== :GetAction ====
'':GetAction(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:FileChooserAction#T|Gtk.Gtk.FileChooserAction.T]]''

  Gets the type of operation that the file chooser is performing; see
  gtk_file_chooser_set_action().
  chooser : a GtkFileChooser
  Returns : the action that the file selector is performing

==== :GetCurrentFolder ====
'':GetCurrentFolder(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the current folder of chooser as a local filename. See
  gtk_file_chooser_set_current_folder().
  Note that this is the folder that the file chooser is currently displaying
  (e.g. "/home/username/Documents"), which is not the same as the currently-
  selected folder if the chooser is in GTK_FILE_CHOOSER_SELECT_FOLDER mode (e.g.
  "/home/username/Documents/selected-folder/". To get the currently-selected
  folder in that mode, use gtk_file_chooser_get_uri() as the usual way to get the
  selection.
  chooser : a GtkFileChooser
            the full path of the current folder, or NULL if the current path
            cannot be represented as a local filename. Free with g_free(). This
  Returns : function will also return NULL if the file chooser was unable to load
            the last folder that was requested from it; for example, as would be
            for calling gtk_file_chooser_set_current_folder() on a nonexistent
            folder.

==== :GetCurrentFolderUri ====
'':GetCurrentFolderUri(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the current folder of chooser as an URI. See
  gtk_file_chooser_set_current_folder_uri().
  Note that this is the folder that the file chooser is currently displaying
  (e.g. "file:///home/username/Documents"), which is not the same as the
  currently-selected folder if the chooser is in GTK_FILE_CHOOSER_SELECT_FOLDER
  mode (e.g. "file:///home/username/Documents/selected-folder/". To get the
  currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
  usual way to get the selection.
  chooser : a GtkFileChooser
            the URI for the current folder. Free with g_free(). This function
            will also return NULL if the file chooser was unable to load the last
  Returns : folder that was requested from it; for example, as would be for
            calling gtk_file_chooser_set_current_folder_uri() on a nonexistent
            folder.

==== :GetDoOverwriteConfirmation ====
'':GetDoOverwriteConfirmation(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Queries whether a file chooser is set to confirm for overwriting when the user
  types a file name that already exists.
  chooser : a GtkFileChooser
  Returns : TRUE if the file chooser will present a confirmation dialog; FALSE
            otherwise.

==== :GetExtraWidget ====
'':GetExtraWidget(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Gets the current preview widget; see gtk_file_chooser_set_extra_widget().
  chooser : a GtkFileChooser
  Returns : the current extra widget, or NULL

==== :GetFilename ====
'':GetFilename(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the filename for the currently selected file in the file selector. If
  multiple files are selected, one of the filenames will be returned at random.
  If the file chooser is in folder mode, this function returns the selected
  folder.
  chooser : a GtkFileChooser
            The currently selected filename, or NULL if no file is selected, or
  Returns : the selected file can't be represented with a local filename. Free
            with g_free().

==== :GetFilenames ====
'':GetFilenames(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Lists all the selected files and subfolders in the current folder of chooser.
  The returned names are full absolute paths. If files in the current folder
  cannot be represented as local filenames they will be ignored. (See
  gtk_file_chooser_get_uris())
  chooser : a GtkFileChooser
            a GSList containing the filenames of all selected files and
  Returns : subfolders in the current folder. Free the returned list with
            g_slist_free(), and the filenames with g_free().

==== :GetFilter ====
'':GetFilter(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:FileFilter#T|Gtk.Gtk.FileFilter.T]]''

  Gets the current filter; see gtk_file_chooser_set_filter().
  chooser : a GtkFileChooser
  Returns : the current filter, or NULL

==== :GetLocalOnly ====
'':GetLocalOnly(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets whether only local files can be selected in the file selector. See
  gtk_file_chooser_set_local_only()
  chooser : a GtkFileChoosre
  Returns : TRUE if only local files can be selected.

==== :GetPreviewFilename ====
'':GetPreviewFilename(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the filename that should be previewed in a custom preview widget. See
  gtk_file_chooser_set_preview_widget().
  chooser : a GtkFileChooser
            the filename to preview, or NULL if no file is selected, or if the
  Returns : selected file cannot be represented as a local filename. Free with
            g_free()

==== :GetPreviewUri ====
'':GetPreviewUri(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the URI that should be previewed in a custom preview widget. See
  gtk_file_chooser_set_preview_widget().
  chooser : a GtkFileChooser
  Returns : the URI for the file to preview, or NULL if no file is selected. Free
            with g_free().

==== :GetPreviewWidget ====
'':GetPreviewWidget(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Gets the current preview widget; see gtk_file_chooser_set_preview_widget().
  chooser : a GtkFileChooser
  Returns : the current preview widget, or NULL

==== :GetPreviewWidgetActive ====
'':GetPreviewWidgetActive(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets whether the preview widget set by gtk_file_chooser_set_preview_widget()
  should be shown for the current filename. See
  gtk_file_chooser_set_preview_widget_active().
  chooser : a GtkFileChooser
  Returns : TRUE if the preview widget is active for the current filename.

==== :GetSelectMultiple ====
'':GetSelectMultiple(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets whether multiple files can be selected in the file selector. See
  gtk_file_chooser_set_select_multiple().
  chooser : a GtkFileChooser
  Returns : TRUE if multiple files can be selected.

==== :GetShowHidden ====
'':GetShowHidden(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets whether hidden files and folders are displayed in the file selector. See
  gtk_file_chooser_set_show_hidden().
  chooser : a GtkFileChooser
  Returns : TRUE if hidden files and folders are displayed.

==== :GetUri ====
'':GetUri(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the URI for the currently selected file in the file selector. If multiple
  files are selected, one of the filenames will be returned at random.
  If the file chooser is in folder mode, this function returns the selected
  folder.
  chooser : a GtkFileChooser
  Returns : The currently selected URI, or NULL if no file is selected. Free with
            g_free()

==== :GetUris ====
'':GetUris(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Lists all the selected files and subfolders in the current folder of chooser.
  The returned names are full absolute URIs.
  chooser : a GtkFileChooser
            a GSList containing the URIs of all selected files and subfolders in
  Returns : the current folder. Free the returned list with g_slist_free(), and
            the filenames with g_free().

==== :GetUsePreviewLabel ====
'':GetUsePreviewLabel(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets whether a stock label should be drawn with the name of the previewed file.
  See gtk_file_chooser_set_use_preview_label().
  chooser : a GtkFileChooser
  Returns : TRUE if the file chooser is set to display a label with the name of
            the previewed file, FALSE otherwise.

==== :ListFilters ====
'':ListFilters(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Lists the current set of user-selectable filters; see
  gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().
  chooser : a GtkFileChooser
            a GSList containing the current set of user selectable filters. The
  Returns : contents of the list are owned by GTK+, but you must free the list
            itself with g_slist_free() when you are done with it.

==== :ListShortcutFolderUris ====
'':ListShortcutFolderUris(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Queries the list of shortcut folders in the file chooser, as set by
  gtk_file_chooser_add_shortcut_folder_uri().
  chooser : a GtkFileChooser
  Returns : A list of folder URIs, or NULL if there are no shortcut folders. Free
            the returned list with g_slist_free(), and the URIs with g_free().

==== :ListShortcutFolders ====
'':ListShortcutFolders(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Queries the list of shortcut folders in the file chooser, as set by
  gtk_file_chooser_add_shortcut_folder().
  chooser : a GtkFileChooser
            A list of folder filenames, or NULL if there are no shortcut folders.
  Returns : Free the returned list with g_slist_free(), and the filenames with
            g_free().

==== :RemoveFilter ====
'':RemoveFilter(self @ [[#T|T]], filter @ [[..:..:Gtk:Gtk:FileFilter#T|Gtk.Gtk.FileFilter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Removes filter from the list of filters that the user can select between.
  chooser : a GtkFileChooser
  filter :  a GtkFileFilter

==== :RemoveShortcutFolder ====
'':RemoveShortcutFolder(self @ [[#T|T]], folder @ [[..:..:Std:String#T|Std.String.T]], error @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Removes a folder from a file chooser's list of shortcut folders.
  chooser : a GtkFileChooser
  folder :  filename of the folder to remove
  error :   location to store error, or NULL
            TRUE if the operation succeeds, FALSE otherwise. In the latter case,
  Returns : the error will be set as appropriate. See also:
            gtk_file_chooser_add_shortcut_folder()

==== :RemoveShortcutFolderUri ====
'':RemoveShortcutFolderUri(self @ [[#T|T]], uri @ [[..:..:Std:String#T|Std.String.T]], error @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Removes a folder URI from a file chooser's list of shortcut folders.
  chooser : a GtkFileChooser
  uri :     URI of the folder to remove
  error :   location to store error, or NULL
            TRUE if the operation succeeds, FALSE otherwise. In the latter case,
  Returns : the error will be set as appropriate. See also:
            gtk_file_chooser_add_shortcut_folder_uri()

==== :SelectAll ====
'':SelectAll(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Selects all the files in the current folder of a file chooser.
  chooser : a GtkFileChooser

==== :SelectFilename ====
'':SelectFilename(self @ [[#T|T]], filename @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Selects a filename. If the file name isn't in the current folder of chooser,
  then the current folder of chooser will be changed to the folder containing
  filename.
  chooser :  a GtkFileChooser
  filename : the filename to select
  Returns :  TRUE if both the folder could be changed and the file was selected
             successfully, FALSE otherwise.

==== :SelectUri ====
'':SelectUri(self @ [[#T|T]], uri @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Selects the file to by uri. If the URI doesn't refer to a file in the current
  folder of chooser, then the current folder of chooser will be changed to the
  folder containing filename.
  chooser : a GtkFileChooser
  uri :     the URI to select
  Returns : TRUE if both the folder could be changed and the URI was selected
            successfully, FALSE otherwise.

==== :SetAction ====
'':SetAction(self @ [[#T|T]], action @ [[..:..:Gtk:Gtk:FileChooserAction#T|Gtk.Gtk.FileChooserAction.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the type of operation that the chooser is performing; the user interface
  is adapted to suit the selected action. For example, an option to create a new
  folder might be shown if the action is GTK_FILE_CHOOSER_ACTION_SAVE but not if
  the action is GTK_FILE_CHOOSER_ACTION_OPEN.
  chooser : a GtkFileChooser
  action :  the action that the file selector is performing

==== :SetCurrentFolder ====
'':SetCurrentFolder(self @ [[#T|T]], filename @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets the current folder for chooser from a local filename. The user will be
  shown the full contents of the current folder, plus user interface elements for
  navigating to other folders.
  chooser :  a GtkFileChooser
  filename : the full path of the new current folder
  Returns :  TRUE if the folder could be changed successfully, FALSE otherwise.

==== :SetCurrentFolderUri ====
'':SetCurrentFolderUri(self @ [[#T|T]], uri @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets the current folder for chooser from an URI. The user will be shown the
  full contents of the current folder, plus user interface elements for
  navigating to other folders.
  chooser : a GtkFileChooser
  uri :     the URI for the new current folder
  Returns : TRUE if the folder could be changed successfully, FALSE otherwise.

==== :SetCurrentName ====
'':SetCurrentName(self @ [[#T|T]], name @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the current name in the file selector, as if entered by the user. Note
  that the name passed in here is a UTF-8 string rather than a filename. This
  function is meant for such uses as a suggested name in a "Save As..." dialog.
  If you want to preselect a particular existing file, you should use
  gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead. Please
  see the documentation for those functions for an example of using
  gtk_file_chooser_set_current_name() as well.
  chooser : a GtkFileChooser
  name :    the filename to use, as a UTF-8 string

==== :SetDoOverwriteConfirmation ====
'':SetDoOverwriteConfirmation(self @ [[#T|T]], do_overwrite_confirmation @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether a file chooser in GTK_FILE_CHOOSER_ACTION_SAVE mode will present a
  confirmation dialog if the user types a file name that already exists. This is
  FALSE by default.
  Regardless of this setting, the chooser will emit the "confirm-overwrite"
  signal when appropriate.
  If all you need is the stock confirmation dialog, set this property to TRUE.
  You can override the way confirmation is done by actually handling the
  "confirm-overwrite" signal; please refer to its documentation for the details.
  chooser :                   a GtkFileChooser
  do_overwrite_confirmation : whether to confirm overwriting in save mode

==== :SetExtraWidget ====
'':SetExtraWidget(self @ [[#T|T]], extra_widget @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets an application-supplied widget to provide extra options to the user.
  chooser :      a GtkFileChooser
  extra_widget : widget for extra options

==== :SetFilename ====
'':SetFilename(self @ [[#T|T]], filename @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets filename as the current filename for the file chooser, by changing to the
  file's parent folder and actually selecting the file in list. If the chooser is
  in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name will also appear in
  the dialog's file name entry.
  If the file name isn't in the current folder of chooser, then the current
  folder of chooser will be changed to the folder containing filename. This is
  equivalent to a sequence of gtk_file_chooser_unselect_all() followed by
  gtk_file_chooser_select_filename().
  Note that the file must exist, or nothing will be done except for the directory
  change.
  If you are implementing a File/Save As... dialog, you should use this function
  if you already have a file name to which the user may save; for example, when
  the user opens an existing file and then does File/Save As... on it. If you
  don't have a file name already &#8212; for example, if the user just created a
  new file and is saving it for the first time, do not call this function.
  Instead, use something similar to this:
  if (document_is_new)
    {
      /* the user just created a new document */
      gtk_file_chooser_set_current_folder (chooser, default_folder_for_saving);
      gtk_file_chooser_set_current_name (chooser, "Untitled document");
    }
  else
    {
      /* the user edited an existing document */
      gtk_file_chooser_set_filename (chooser, existing_filename);
    }
  chooser :  a GtkFileChooser
  filename : the filename to set as current
  Returns :  TRUE if both the folder could be changed and the file was selected
             successfully, FALSE otherwise.

==== :SetFilter ====
'':SetFilter(self @ [[#T|T]], filter @ [[..:..:Gtk:Gtk:FileFilter#T|Gtk.Gtk.FileFilter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the current filter; only the files that pass the filter will be displayed.
  If the user-selectable list of filters is non-empty, then the filter should be
  one of the filters in that list. Setting the current filter when the list of
  filters is empty is useful if you want to restrict the displayed set of files
  without letting the user change it.
  chooser : a GtkFileChooser
  filter :  a GtkFileFilter

==== :SetLocalOnly ====
'':SetLocalOnly(self @ [[#T|T]], local_only @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether only local files can be selected in the file selector. If
  local_only is TRUE (the default), then the selected file are files are
  guaranteed to be accessible through the operating systems native file file
  system and therefore the application only needs to worry about the filename
  functions in GtkFileChooser, like gtk_file_chooser_get_filename(), rather than
  the URI functions like gtk_file_chooser_get_uri(),
  chooser :    a GtkFileChooser
  local_only : TRUE if only local files can be selected

==== :SetPreviewWidget ====
'':SetPreviewWidget(self @ [[#T|T]], preview_widget @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets an application-supplied widget to use to display a custom preview of the
  currently selected file. To implement a preview, after setting the preview
  widget, you connect to the ::update-preview signal, and call
  gtk_file_chooser_get_preview_filename() or gtk_file_chooser_get_preview_uri()
  on each change. If you can display a preview of the new file, update your
  widget and set the preview active using
  gtk_file_chooser_set_preview_widget_active(). Otherwise, set the preview
  inactive.
  When there is no application-supplied preview widget, or the application-
  supplied preview widget is not active, the file chooser may display an
  internally generated preview of the current file or it may display no preview
  at all.
  chooser :        a GtkFileChooser
  preview_widget : widget for displaying preview.

==== :SetPreviewWidgetActive ====
'':SetPreviewWidgetActive(self @ [[#T|T]], active @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the preview widget set by gtk_file_chooser_set_preview_widget()
  should be shown for the current filename. When active is set to false, the file
  chooser may display an internally generated preview of the current file or it
  may display no preview at all. See gtk_file_chooser_set_preview_widget() for
  more details.
  chooser : a GtkFileChooser
  active :  whether to display the user-specified preview widget

==== :SetSelectMultiple ====
'':SetSelectMultiple(self @ [[#T|T]], select_multiple @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether multiple files can be selected in the file selector. This is only
  relevant if the action is set to be GTK_FILE_CHOOSER_ACTION_OPEN or
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
  chooser :         a GtkFileChooser
  select_multiple : TRUE if multiple files can be selected.

==== :SetShowHidden ====
'':SetShowHidden(self @ [[#T|T]], show_hidden @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether hidden files and folders are displayed in the file selector.
  chooser :     a GtkFileChooser
  show_hidden : TRUE if hidden files and folders should be displayed.

==== :SetUri ====
'':SetUri(self @ [[#T|T]], uri @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Sets the file referred to by uri as the current file for the file chooser, by
  changing to the URI's parent folder and actually selecting the URI in the list.
  If the chooser is GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI's base name will
  also appear in the dialog's file name entry.
  If the URI isn't in the current folder of chooser, then the current folder of
  chooser will be changed to the folder containing uri. This is equivalent to a
  sequence of gtk_file_chooser_unselect_all() followed by
  gtk_file_chooser_select_uri().
  Note that the URI must exist, or nothing will be done except for the directory
  change. If you are implementing a File/Save As... dialog, you should use this
  function if you already have a file name to which the user may save; for
  example, when the user opens an existing file and then does File/Save As... on
  it. If you don't have a file name already &#8212; for example, if the user just
  created a new file and is saving it for the first time, do not call this
  function. Instead, use something similar to this:
  if (document_is_new)
    {
      /* the user just created a new document */
      gtk_file_chooser_set_current_folder_uri (chooser,
  default_folder_for_saving);
      gtk_file_chooser_set_current_name (chooser, "Untitled document");
    }
  else
    {
      /* the user edited an existing document */
      gtk_file_chooser_set_uri (chooser, existing_uri);
    }
  chooser : a GtkFileChooser
  uri :     the URI to set as current
  Returns : TRUE if both the folder could be changed and the URI was selected
            successfully, FALSE otherwise.

==== :SetUsePreviewLabel ====
'':SetUsePreviewLabel(self @ [[#T|T]], use_label @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the file chooser should display a stock label with the name of the
  file that is being previewed; the default is TRUE. Applications that want to
  draw the whole preview area themselves should set this to FALSE and display the
  name themselves in their preview widget.
  See also: gtk_file_chooser_set_preview_widget()
  chooser :   a GtkFileChooser
  use_label : whether to display a stock label with the name of the previewed
              file

==== :UnselectAll ====
'':UnselectAll(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Unselects all the files in the current folder of a file chooser.
  chooser : a GtkFileChooser

==== ErrorQuark ====
''ErrorQuark() : [[..:..:Std:Object#T|Std.Object.T]]''

  Used to get the GError quark for GtkFileChooser errors.

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


