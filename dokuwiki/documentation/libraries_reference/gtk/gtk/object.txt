====== Object ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  **** Description ****
  GtkObject is the base class for all widgets, and for a few non-widget objects
  such as GtkAdjustment. GtkObject predates GObject; non-widgets that derive from
  GtkObject rather than GObject do so for backward compatibility reasons.
  GtkObjects are created with a "floating" reference count. This means that the
  initial reference is not owned by anyone. Calling g_object_unref() on a newly-
  created GtkObject is incorrect, the floating reference has to be removed first.
  This can be done by anyone at any time, by calling g_object_ref_sink() to
  convert the floating reference into a regular reference. g_object_ref_sink()
  returns a new reference if an object is already sunk (has no floating
  reference).
  When you add a widget to its parent container, the parent container will do
  this:
    g_object_ref_sink (G_OBJECT (child_widget));
  This means that the container now owns a reference to the child widget and the
  child widget has no floating reference.
  The purpose of the floating reference is to keep the child widget alive until
  you add it to a parent container:
     button = gtk_button_new ();
     /* button has one floating reference to keep it alive */
     gtk_container_add (GTK_CONTAINER (container), button);
     /* button has one non-floating reference owned by the container */
  GtkWindow is a special case, because GTK+ itself will ref/sink it on creation.
  That is, after calling gtk_window_new(), the GtkWindow will have one reference
  which is owned by GTK+, and no floating references.
  One more factor comes into play: the "destroy" signal, emitted by the
  gtk_object_destroy() method. The "destroy" signal asks all code owning a
  reference to an object to release said reference. So, for example, if you call
  gtk_object_destroy() on a GtkWindow, GTK+ will release the reference count that
  it owns; if you call gtk_object_destroy() on a GtkButton, then the button will
  be removed from its parent container and the parent container will release its
  reference to the button. Because these references are released, calling
  gtk_object_destroy() should result in freeing all memory associated with an
  object, unless some buggy code fails to release its references in response to
  the "destroy" signal. Freeing memory (referred to as finalization only happens
  if the reference count reaches zero.
  Some simple rules for handling ""
      * Never call g_object_unref() unless you have previously called
        g_object_ref(), even if you created the GtkObject. (Note: this is not
        true for GObject; for GObject, the creator of the object owns a
        reference.)
      * Call gtk_object_destroy() to get rid of most objects in most cases. In
        particular, widgets are almost always destroyed in this way.
      * Because of the floating reference count, you don't need to worry about
        reference counting for widgets and toplevel windows, unless you
        explicitly call g_object_ref() yourself.
  

==== :Weakunref ====
'':Weakunref(self @ [[#T|T]], notify @ [[..:..:Std:Function#T|Std.Function.T]], data @ [[..:..:Std:Address#T|Std.Address.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_weakunref is deprecated and should not be used in newly-written
  code. Use g_object_weak_unref() instead.
  Removes a weak reference callback to an object.
  object : object stop weakly referencing.
  notify : callback to search for.
  data :   data to search for.

==== :Weakref ====
'':Weakref(self @ [[#T|T]], notify @ [[..:..:Std:Function#T|Std.Function.T]], data @ [[..:..:Std:Address#T|Std.Address.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_weakref is deprecated and should not be used in newly-written code.
  Use g_object_weak_ref() instead.
  Adds a weak reference callback to an object. Weak references are used for
  notification when an object is finalized. They are called "weak references"
  because they allow you to safely hold a pointer to an object without calling
  g_object_ref() (g_object_ref() adds a strong reference, that is, forces the
  object to stay alive).
  object : object to weakly reference.
  notify : callback to invoke before the object is freed.
  data :   extra data to pass to notify.

==== :Unref ====
'':Unref(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_unref is deprecated and should not be used in newly-written code.
  Use g_object_unref() instead.
  Decreases the reference count of an object. When its reference count drops to
  0, the object is finalized (i.e. its memory is freed).
  object : the object to dereference.

==== :Flags ====
'':Flags(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Destroy ====
'':Destroy(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits the "destroy" signal notifying all reference holders that they should
  release the GtkObject. See the overview documentation at the top of the page
  for more details.
  The memory for the object itself won't be deleted until its reference count
  actually drops to 0; gtk_object_destroy() merely asks reference holders to
  release their references, it does not free the object.
  object : the object to destroy.

==== :Get ====
'':Get(self @ [[#T|T]], first_property_name @ [[..:..:Std:String#T|Std.String.T]], ___ @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_get is deprecated and should not be used in newly-written code. Use
  g_object_get() instead.
  Gets properties of an object.
  object :              a GtkObject.
  first_property_name : name of first property to get the value for.
  ... :                 NULL-terminated list of name-return location pairs.

==== :GetDataById ====
'':GetDataById(self @ [[#T|T]], data_id @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Address#T|Std.Address.T]]''

  **** Warning ****
  gtk_object_get_data_by_id is deprecated and should not be used in newly-written
  code. Use g_object_get_qdata() instead.
  Just like gtk_object_get_data() except that it takes a GQuark instead of a
  string, so it is slightly faster.
  Use gtk_object_data_try_key() and gtk_object_data_force_id() to get an id from
  a string.
  object :  object containing the associations.
  data_id : quark of the key.
  Returns : the data if found, or NULL if no such data exists.

==== :GetUserData ====
'':GetUserData(self @ [[#T|T]]) : [[..:..:Std:Address#T|Std.Address.T]]''

  **** Warning ****
  gtk_object_get_user_data is deprecated and should not be used in newly-written
  code. Use g_object_get_data() instead.
  Get the object's user data pointer.
  This is intended to be a pointer for your convenience in writing applications.
  object :  the object.
  Returns : the user data field for object.

==== :Ref ====
'':Ref(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]''

  **** Warning ****
  gtk_object_ref is deprecated and should not be used in newly-written code. Use
  g_object_ref() instead.
  Increases the reference count of the object.
  object :  the object to reference.
  Returns : object.

==== :RemoveData ====
'':RemoveData(self @ [[#T|T]], key @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_remove_data is deprecated and should not be used in newly-written
  code. Use g_object_set_data() to set the object data to NULL instead.
  Removes a specified datum from the object's data associations (the
  object_data). Subsequent calls to gtk_object_get_data() will return NULL.
  If you specified a destroy handler with gtk_object_set_data_full(), it will be
  invoked.
  object : the object maintaining the association.
  key :    name of the key for that association.

==== :RemoveDataById ====
'':RemoveDataById(self @ [[#T|T]], data_id @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_remove_data_by_id is deprecated and should not be used in newly-
  written code. Use g_object_set_qdata() with data of NULL instead.
  Just like gtk_object_remove_data() except that it takes a GQuark instead of a
  string, so it is slightly faster.
  Remove a specified datum from the object's data associations. Subsequent calls
  to gtk_object_get_data() will return NULL.
  Use gtk_object_data_try_key() and gtk_object_data_force_id() to get an id from
  a string.
  object :  object containing the associations.
  data_id : quark of the key.

==== :RemoveNoNotify ====
'':RemoveNoNotify(self @ [[#T|T]], key @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_remove_no_notify is deprecated and should not be used in newly-
  written code. Use g_object_steal_data() instead.
  Remove a specified datum from the object's data associations (the object_data),
  without invoking the association's destroy handler.
  Just like gtk_object_remove_data() except that any destroy handler will be
  ignored. Therefore this only affects data set using gtk_object_set_data_full().
  object : the object maintaining the association.
  key :    name of the key for that association.

==== :RemoveNoNotifyById ====
'':RemoveNoNotifyById(self @ [[#T|T]], key_id @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_remove_no_notify_by_id is deprecated and should not be used in
  newly-written code. Use g_object_steal_qdata() instead.
  Just like gtk_object_remove_no_notify() except that it takes a GQuark instead
  of a string, so it is slightly faster.
  Use gtk_object_data_try_key() and gtk_object_data_force_id() to get an id from
  a string.
  object : object containing the associations.
  key_id : quark of the key.

==== :Set ====
'':Set(self @ [[#T|T]], first_property_name @ [[..:..:Std:String#T|Std.String.T]], ___ @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_set is deprecated and should not be used in newly-written code. Use
  g_object_set() instead.
  Sets properties on an object.
  void set_box_properties (GtkBox* box)
  {
    gtk_object_set (GTK_OBJECT (box), "homogeneous", TRUE,
                                      "spacing", 8,
  				    NULL);
  }
  object :              a GtkObject.
  first_property_name : name of the first property to set
  ... :                 the value of the first argument, followed optionally by
                        more name/value pairs, followed by NULL.

==== :SetDataById ====
'':SetDataById(self @ [[#T|T]], data_id @ [[..:..:Std:Object#T|Std.Object.T]], data @ [[..:..:Std:Address#T|Std.Address.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_set_data_by_id is deprecated and should not be used in newly-written
  code. Use g_object_set_qdata() instead.
  Just like gtk_object_set_data() except that it takes a GQuark instead of a
  string, so it is slightly faster.
  Use gtk_object_data_try_key() and gtk_object_data_force_id() to get an id from
  a string.
  object :  object containing the associations.
  data_id : quark of the key.
  data :    data to associate with that key.

==== :SetDataByIdFull ====
'':SetDataByIdFull(self @ [[#T|T]], data_id @ [[..:..:Std:Object#T|Std.Object.T]], data @ [[..:..:Std:Address#T|Std.Address.T]], destroy @ [[..:..:Std:Function#T|Std.Function.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_set_data_by_id_full is deprecated and should not be used in newly-
  written code. Use g_object_set_qdata_full() instead.
  Just like gtk_object_set_data_full() except that it takes a GQuark instead of a
  string, so it is slightly faster.
  Use gtk_object_data_try_key() and gtk_object_data_force_id() to get an id from
  a string.
  object :  object containing the associations.
  data_id : quark of the key.
  data :    data to associate with that key.
  destroy : function to call when the association is destroyed.

==== :SetDataFull ====
'':SetDataFull(self @ [[#T|T]], key @ [[..:..:Std:String#T|Std.String.T]], data @ [[..:..:Std:Address#T|Std.Address.T]], destroy @ [[..:..:Std:Function#T|Std.Function.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_set_data_full is deprecated and should not be used in newly-written
  code. Use g_object_set_data_full() instead.
  Like gtk_object_set_data() except it adds notification for when the association
  is destroyed, either by gtk_object_remove_data() or when the object is
  destroyed.
  object :  object containing the associations.
  key :     name of the key.
  data :    data to associate with that key.
  destroy : function to call when the association is destroyed.

==== :SetUserData ====
'':SetUserData(self @ [[#T|T]], data @ [[..:..:Std:Address#T|Std.Address.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_set_user_data is deprecated and should not be used in newly-written
  code. Use g_object_set_data() instead.
  For convenience, every object offers a generic user data pointer. This function
  sets it.
  object : the object whose user data should be set.
  data :   the new value for the user data.

==== :Sink ====
'':Sink(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_sink has been deprecated since version 2.10 and should not be used
  in newly-written code. Use g_object_ref_sink() instead
  Removes the floating reference from a GtkObject, if it exists; otherwise does
  nothing. See the GtkObject overview documentation at the top of the page.
  object : the object to sink.

==== New ====
''New(type : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]], first_property_name : [[..:..:Std:String#T|Std.String.T]], ___ : [[..:..:Std:Object#T|Std.Object.T]]) : [[# T| T]]''

  **** Warning ****
  gtk_object_new is deprecated and should not be used in newly-written code. Use
  g_object_new() instead.
  Constructs an object given its arguments, enumerated in the call to the
  function.
                        the type identifying this object. Returned by
  type :                gtk_type_unique() (although for a properly-written object
                        it should be accessible through a GTK_TYPE_FOO macro.)
  first_property_name : name of the first property to set when constructing the
                        object.
  ... :                 the first argument's value, followed by any number of
                        name/argument-value pairs, terminated with NULL.
  Returns :             the new GtkObject.

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== AddArgType ====
''AddArgType(arg_name : [[..:..:Std:String#T|Std.String.T]], arg_type : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]], arg_flags : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], arg_id : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_object_add_arg_type is deprecated and should not be used in newly-written
  code.
  Deprecated in favor of the GObject property system including GParamSpec. Add a
  new type of argument to an object class. Usually this is called when
  registering a new type of object.
  arg_name :  fully qualify object name, for example GtkObject::user_data.
  arg_type :  type of the argument.
              bitwise-OR of the GtkArgFlags enum. (Whether the argument is
  arg_flags : settable or gettable, whether it is set when the object is
              constructed.)
  arg_id :    an internal number, passed in from here to the "set_arg" and
              "get_arg" handlers of the object.

