====== Notebook ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Container#T|Gtk.Gtk.Container.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  The GtkNotebook widget is a GtkContainer whose children are pages that can be
  switched between using tab labels along one edge.
  There are many configuration options for GtkNotebook. Among other things, you
  can choose on which edge the tabs appear (see gtk_notebook_set_tab_pos()),
  whether, if there are too many tabs to fit the noteobook should be made bigger
  or scrolling arrows added (see gtk_notebook_set_scrollable), and whether there
  will be a popup menu allowing the users to switch pages. (see
  gtk_notebook_enable_popup(), gtk_noteobook_disable_popup())
  **** GtkNotebook as GtkBuildable ****
  The GtkNoteboopk implementation of the GtkBuildable interface supports placing
  children into tabs by specifying "tab" as the "type" attribute of a <child>
  element. Note that the content of the tab must be created before the tab can be
  filled. A tab child can be specified without specifying a <child> type
  attribute.
  Example 37.&#160;A UI definition fragment with GtkNotebook
  <object class="GtkNotebook">
    <child>
      <object class="GtkLabel" id="notebook-content">
        <property name="label">Content</property>
      </object>
    </child>
    <child type="tab">
      <object class="GtkLabel" id="notebook-tab">
        <property name="label">Tab</property>
      </object>
    </child>
  </object>
  
  

==== :SetTabVborder ====
'':SetTabVborder(self @ [[#T|T]], tab_vborder @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_notebook_set_tab_vborder is deprecated and should not be used in newly-
  written code.

==== :SetTabReorderable ====
'':SetTabReorderable(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], reorderable @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the notebook tab can be reordered via drag and drop or not.
  notebook :    a GtkNotebook
  child :       a child GtkWidget
  reorderable : whether the tab is reorderable or not.

==== :SetTabPos ====
'':SetTabPos(self @ [[#T|T]], pos @ [[..:..:Gtk:Gtk:PositionType#T|Gtk.Gtk.PositionType.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the edge at which the tabs for switching pages in the notebook are drawn.
  notebook : a GtkNotebook.
  pos :      the edge to draw the tabs at.

==== :CurPage ====
'':CurPage(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:NotebookPage#T|Gtk.Gtk.NotebookPage.T]]''


==== :Children ====
'':Children(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :FirstTab ====
'':FirstTab(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :FocusTab ====
'':FocusTab(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :Menu ====
'':Menu(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Appends a page to notebook, specifying the widget to use as the label in the
  popup menu.
  notebook :   a GtkNotebook
  child :      the GtkWidget to use as the contents of the page.
  tab_label :  the GtkWidget to be used as the label for the page, or NULL to use
               the default label, 'page N'.
               the widget to use as a label for the page-switch menu, if that is
               enabled. If NULL, and tab_label is a GtkLabel or NULL, then the
  menu_label : menu label will be a newly created label with the same text as
               tab_label; If tab_label is not a GtkLabel, menu_label must be
               specified if the page-switch menu is to be used.
  Returns :    the index (starting from 0) of the appended page in the notebook,
               or -1 if function fails
  Prepends a page to notebook, specifying the widget to use as the label in the
  popup menu.
  notebook :   a GtkNotebook
  child :      the GtkWidget to use as the contents of the page.
  tab_label :  the GtkWidget to be used as the label for the page, or NULL to use
               the default label, 'page N'.
               the widget to use as a label for the page-switch menu, if that is
               enabled. If NULL, and tab_label is a GtkLabel or NULL, then the
  menu_label : menu label will be a newly created label with the same text as
               tab_label; If tab_label is not a GtkLabel, menu_label must be
               specified if the page-switch menu is to be used.
  Returns :    the index (starting from 0) of the prepended page in the notebook,
               or -1 if function fails
  Insert a page into notebook at the given position, specifying the widget to use
  as the label in the popup menu.
  notebook :   a GtkNotebook
  child :      the GtkWidget to use as the contents of the page.
  tab_label :  the GtkWidget to be used as the label for the page, or NULL to use
               the default label, 'page N'.
               the widget to use as a label for the page-switch menu, if that is
               enabled. If NULL, and tab_label is a GtkLabel or NULL, then the
  menu_label : menu label will be a newly created label with the same text as
               tab_label; If tab_label is not a GtkLabel, menu_label must be
               specified if the page-switch menu is to be used.
  position :   the index (starting at 0) at which to insert the page, or -1 to
               append the page after all other pages.
  Returns :    the index (starting from 0) of the inserted page in the notebook

==== :EventWindow ====
'':EventWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''


==== :Timer ====
'':Timer(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :TabHborder ====
'':TabHborder(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  **** Warning ****
  gtk_notebook_set_tab_hborder is deprecated and should not be used in newly-
  written code.

==== :TabVborder ====
'':TabVborder(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  **** Warning ****
  gtk_notebook_set_tab_vborder is deprecated and should not be used in newly-
  written code.

==== :ShowTabs ====
'':ShowTabs(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets whether to show the tabs for the notebook or not.
  notebook :  a GtkNotebook
  show_tabs : TRUE if the tabs should be shown.
  Returns whether the tabs of the notebook are shown. See
  gtk_notebook_set_show_tabs().
  notebook : a GtkNotebook
  Returns :  TRUE if the tabs are shown

==== :Homogeneous ====
'':Homogeneous(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ShowBorder ====
'':ShowBorder(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets whether a bevel will be drawn around the notebook pages. This only has a
  visual effect when the tabs are not shown. See gtk_notebook_set_show_tabs().
  notebook :    a GtkNotebook
  show_border : TRUE if a bevel should be drawn around the notebook.
  Returns whether a bevel will be drawn around the notebook pages. See
  gtk_notebook_set_show_border().
  notebook : a GtkNotebook
  Returns :  TRUE if the bevel is drawn

==== :TabPos ====
'':TabPos(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the edge at which the tabs for switching pages in the notebook are drawn.
  notebook : a GtkNotebook.
  pos :      the edge to draw the tabs at.
  Gets the edge at which the tabs for switching pages in the notebook are drawn.
  notebook : a GtkNotebook
  Returns :  the edge at which the tabs are drawn

==== :Scrollable ====
'':Scrollable(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets whether the tab label area will have arrows for scrolling if there are too
  many tabs to fit in the area.
  notebook :   a GtkNotebook
  scrollable : TRUE if scroll arrows should be added
  Returns whether the tab label area has arrows for scrolling. See
  gtk_notebook_set_scrollable().
  notebook : a GtkNotebook
  Returns :  TRUE if arrows for scrolling are present

==== :InChild ====
'':InChild(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ClickChild ====
'':ClickChild(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Button ====
'':Button(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :NeedTimer ====
'':NeedTimer(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ChildHasFocus ====
'':ChildHasFocus(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HaveVisibleChild ====
'':HaveVisibleChild(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :FocusOut ====
'':FocusOut(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HasBeforePrevious ====
'':HasBeforePrevious(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HasBeforeNext ====
'':HasBeforeNext(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HasAfterPrevious ====
'':HasAfterPrevious(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HasAfterNext ====
'':HasAfterNext(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :AppendPage ====
'':AppendPage(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], tab_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Appends a page to notebook.
  notebook :  a GtkNotebook
  child :     the GtkWidget to use as the contents of the page.
  tab_label : the GtkWidget to be used as the label for the page, or NULL to use
              the default label, 'page N'.
  Returns :   the index (starting from 0) of the appended page in the notebook,
              or -1 if function fails

==== :AppendPageMenu ====
'':AppendPageMenu(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], tab_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], menu_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Appends a page to notebook, specifying the widget to use as the label in the
  popup menu.
  notebook :   a GtkNotebook
  child :      the GtkWidget to use as the contents of the page.
  tab_label :  the GtkWidget to be used as the label for the page, or NULL to use
               the default label, 'page N'.
               the widget to use as a label for the page-switch menu, if that is
               enabled. If NULL, and tab_label is a GtkLabel or NULL, then the
  menu_label : menu label will be a newly created label with the same text as
               tab_label; If tab_label is not a GtkLabel, menu_label must be
               specified if the page-switch menu is to be used.
  Returns :    the index (starting from 0) of the appended page in the notebook,
               or -1 if function fails

==== :GetCurrentPage ====
'':GetCurrentPage(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Returns the page number of the current page.
  notebook : a GtkNotebook
  Returns :  the index (starting from 0) of the current page in the notebook. If
             the notebook has no pages, then -1 will be returned.

==== :GetGroup ====
'':GetGroup(self @ [[#T|T]]) : [[..:..:Std:Address#T|Std.Address.T]]''

  Gets the current group identificator pointer for notebook.
  notebook : a GtkNotebook
  Returns :  the group identificator, or NULL if none is set.

==== :GetGroupId ====
'':GetGroupId(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  **** Warning ****
  gtk_notebook_get_group_id has been deprecated since version 2.12 and should not
  be used in newly-written code. use gtk_notebook_get_group() instead.

==== :GetMenuLabel ====
'':GetMenuLabel(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Retrieves the menu label widget of the page containing child.
  notebook : a GtkNotebook
  child :    a widget contained in a page of notebook
  Returns :  the menu label, or NULL if the notebook page does not have a menu
             label other than the default (the tab label).

==== :GetMenuLabelText ====
'':GetMenuLabelText(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Retrieves the text of the menu label for the page containing child.
  notebook : a GtkNotebook
  child :    the child widget of a page of the notebook.
             value: the text of the tab label, or NULL if the widget does not
  Returns :  have a menu label other than the default menu label, or the menu
             label widget is not a GtkLabel. The string is owned by the widget
             and must not be freed.

==== :GetNPages ====
'':GetNPages(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the number of pages in a notebook.
  notebook : a GtkNotebook
  Returns :  the number of pages in the notebook.

==== :GetNthPage ====
'':GetNthPage(self @ [[#T|T]], page_num @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Returns the child widget contained in page number page_num.
  notebook : a GtkNotebook
  page_num : the index of a page in the notebook, or -1 to get the last page.
  Returns :  the child widget, or NULL if page_num is out of bounds.

==== :GetScrollable ====
'':GetScrollable(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the tab label area has arrows for scrolling. See
  gtk_notebook_set_scrollable().
  notebook : a GtkNotebook
  Returns :  TRUE if arrows for scrolling are present

==== :GetShowBorder ====
'':GetShowBorder(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether a bevel will be drawn around the notebook pages. See
  gtk_notebook_set_show_border().
  notebook : a GtkNotebook
  Returns :  TRUE if the bevel is drawn

==== :GetShowTabs ====
'':GetShowTabs(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the tabs of the notebook are shown. See
  gtk_notebook_set_show_tabs().
  notebook : a GtkNotebook
  Returns :  TRUE if the tabs are shown

==== :GetTabDetachable ====
'':GetTabDetachable(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the tab contents can be detached from notebook.
  notebook : a GtkNotebook
  child :    a child GtkWidget
  Returns :  TRUE if the tab is detachable.

==== :GetTabLabel ====
'':GetTabLabel(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Returns the tab label widget for the page child. NULL is returned if child is
  not in notebook or if no tab label has specifically been set for child.
  notebook : a GtkNotebook
  child :    the page
  Returns :  the tab label

==== :GetTabLabelText ====
'':GetTabLabelText(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Retrieves the text of the tab label for the page containing child.
  notebook : a GtkNotebook
  child :    a widget contained in a page of notebook
             value: the text of the tab label, or NULL if the tab label widget is
  Returns :  not a GtkLabel. The string is owned by the widget and must not be
             freed.

==== :GetTabPos ====
'':GetTabPos(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:PositionType#T|Gtk.Gtk.PositionType.T]]''

  Gets the edge at which the tabs for switching pages in the notebook are drawn.
  notebook : a GtkNotebook
  Returns :  the edge at which the tabs are drawn

==== :GetTabReorderable ====
'':GetTabReorderable(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets whether the tab can be reordered via drag and drop or not.
  notebook : a GtkNotebook
  child :    a child GtkWidget
  Returns :  TRUE if the tab is reorderable.

==== :InsertPage ====
'':InsertPage(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], tab_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], position @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Insert a page into notebook at the given position.
  notebook :  a GtkNotebook
  child :     the GtkWidget to use as the contents of the page.
  tab_label : the GtkWidget to be used as the label for the page, or NULL to use
              the default label, 'page N'.
  position :  the index (starting at 0) at which to insert the page, or -1 to
              append the page after all other pages.
  Returns :   the index (starting from 0) of the inserted page in the notebook,
              or -1 if function fails

==== :InsertPageMenu ====
'':InsertPageMenu(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], tab_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], menu_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], position @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Insert a page into notebook at the given position, specifying the widget to use
  as the label in the popup menu.
  notebook :   a GtkNotebook
  child :      the GtkWidget to use as the contents of the page.
  tab_label :  the GtkWidget to be used as the label for the page, or NULL to use
               the default label, 'page N'.
               the widget to use as a label for the page-switch menu, if that is
               enabled. If NULL, and tab_label is a GtkLabel or NULL, then the
  menu_label : menu label will be a newly created label with the same text as
               tab_label; If tab_label is not a GtkLabel, menu_label must be
               specified if the page-switch menu is to be used.
  position :   the index (starting at 0) at which to insert the page, or -1 to
               append the page after all other pages.
  Returns :    the index (starting from 0) of the inserted page in the notebook

==== :NextPage ====
'':NextPage(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Switches to the next page. Nothing happens if the current page is the last
  page.
  notebook : a GtkNotebook

==== :PopupDisable ====
'':PopupDisable(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Disables the popup menu.
  notebook : a GtkNotebook

==== :PopupEnable ====
'':PopupEnable(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Enables the popup menu: if the user clicks with the right mouse button on the
  bookmarks, a menu with all the pages will be popped up.
  notebook : a GtkNotebook

==== :PrependPage ====
'':PrependPage(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], tab_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Prepends a page to notebook.
  notebook :  a GtkNotebook
  child :     the GtkWidget to use as the contents of the page.
  tab_label : the GtkWidget to be used as the label for the page, or NULL to use
              the default label, 'page N'.
  Returns :   the index (starting from 0) of the prepended page in the notebook,
              or -1 if function fails

==== :PrependPageMenu ====
'':PrependPageMenu(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], tab_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], menu_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Prepends a page to notebook, specifying the widget to use as the label in the
  popup menu.
  notebook :   a GtkNotebook
  child :      the GtkWidget to use as the contents of the page.
  tab_label :  the GtkWidget to be used as the label for the page, or NULL to use
               the default label, 'page N'.
               the widget to use as a label for the page-switch menu, if that is
               enabled. If NULL, and tab_label is a GtkLabel or NULL, then the
  menu_label : menu label will be a newly created label with the same text as
               tab_label; If tab_label is not a GtkLabel, menu_label must be
               specified if the page-switch menu is to be used.
  Returns :    the index (starting from 0) of the prepended page in the notebook,
               or -1 if function fails

==== :PrevPage ====
'':PrevPage(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Switches to the previous page. Nothing happens if the current page is the first
  page.
  notebook : a GtkNotebook

==== :QueryTabLabelPacking ====
'':QueryTabLabelPacking(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], expand @ [[..:..:Std:Object#T|Std.Object.T]], fill @ [[..:..:Std:Object#T|Std.Object.T]], pack_type @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Query the packing attributes for the tab label of the page containing child.
  notebook :  a GtkNotebook
  child :     the page
  expand :    location to store the expand value (or NULL)
  fill :      location to store the fill value (or NULL)
  pack_type : location to store the pack_type (or NULL)

==== :RemovePage ====
'':RemovePage(self @ [[#T|T]], page_num @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Removes a page from the notebook given its index in the notebook.
  notebook : a GtkNotebook.
  page_num : the index of a notebook page, starting from 0. If -1, the last page
             will be removed.

==== :ReorderChild ====
'':ReorderChild(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], position @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Reorders the page containing child, so that it appears in position position. If
  position is greater than or equal to the number of children in the list or
  negative, child will be moved to the end of the list.
  notebook : a GtkNotebook
  child :    the child to move
  position : the new position, or -1 to move to the end

==== :SetCurrentPage ====
'':SetCurrentPage(self @ [[#T|T]], page_num @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Switches to the page number page_num.
  Note that due to historical reasons, GtkNotebook refuses to switch to a page
  unless the child widget is visible. Therefore, it is recommended to show child
  widgets before adding them to a notebook.
  notebook : a GtkNotebook
             index of the page to switch to, starting from 0. If negative, the
  page_num : last page will be used. If greater than the number of pages in the
             notebook, nothing will be done.

==== :SetGroup ====
'':SetGroup(self @ [[#T|T]], group @ [[..:..:Std:Address#T|Std.Address.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets a group identificator pointer for notebook, notebooks sharing the same
  group identificator pointer will be able to exchange tabs via drag and drop. A
  notebook with a NULL group identificator will not be able to exchange tabs with
  any other notebook.
  notebook : a GtkNotebook
  group :    a pointer to identify the notebook group, or NULL to unset it

==== :SetGroupId ====
'':SetGroupId(self @ [[#T|T]], group_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_notebook_set_group_id has been deprecated since version 2.12 and should not
  be used in newly-written code. use gtk_notebook_set_group() instead.

==== :SetHomogeneousTabs ====
'':SetHomogeneousTabs(self @ [[#T|T]], homogeneous @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_notebook_set_homogeneous_tabs is deprecated and should not be used in
  newly-written code.

==== :SetMenuLabel ====
'':SetMenuLabel(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], menu_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Changes the menu label for the page containing child.
  notebook :   a GtkNotebook
  child :      the child widget
  menu_label : the menu label, or NULL for default

==== :SetMenuLabelText ====
'':SetMenuLabelText(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], menu_text @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Creates a new label and sets it as the menu label of child.
  notebook :  a GtkNotebook
  child :     the child widget
  menu_text : the label text

==== :SetScrollable ====
'':SetScrollable(self @ [[#T|T]], scrollable @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the tab label area will have arrows for scrolling if there are too
  many tabs to fit in the area.
  notebook :   a GtkNotebook
  scrollable : TRUE if scroll arrows should be added

==== :SetShowBorder ====
'':SetShowBorder(self @ [[#T|T]], show_border @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether a bevel will be drawn around the notebook pages. This only has a
  visual effect when the tabs are not shown. See gtk_notebook_set_show_tabs().
  notebook :    a GtkNotebook
  show_border : TRUE if a bevel should be drawn around the notebook.

==== :SetShowTabs ====
'':SetShowTabs(self @ [[#T|T]], show_tabs @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether to show the tabs for the notebook or not.
  notebook :  a GtkNotebook
  show_tabs : TRUE if the tabs should be shown.

==== :SetTabBorder ====
'':SetTabBorder(self @ [[#T|T]], border_width @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_notebook_set_tab_border is deprecated and should not be used in newly-
  written code.

==== :SetTabDetachable ====
'':SetTabDetachable(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], detachable @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the tab can be detached from notebook to another notebook or
  widget.
  Note that 2 notebooks must share a common group identificator (see
  gtk_notebook_set_group_id()) to allow automatic tabs interchange between them.
  If you want a widget to interact with a notebook through DnD (i.e.: accept
  dragged tabs from it) it must be set as a drop destination and accept the
  target "GTK_NOTEBOOK_TAB". The notebook will fill the selection with a
  GtkWidget** pointing to the child widget that corresponds to the dropped tab.
   static void
   on_drop_zone_drag_data_received (GtkWidget        *widget,
                                    GdkDragContext   *context,
                                    gint              x,
                                    gint              y,
                                    GtkSelectionData *selection_data,
                                    guint             info,
                                    guint             time,
                                    gpointer          user_data)
   {
     GtkWidget *notebook;
     GtkWidget **child;
  
     notebook = gtk_drag_get_source_widget (context);
     child = (void*) selection_data->data;
  
     process_widget (*child);
     gtk_container_remove (GTK_CONTAINER (notebook), *child);
   }

==== :SetTabHborder ====
'':SetTabHborder(self @ [[#T|T]], tab_hborder @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  **** Warning ****
  gtk_notebook_set_tab_hborder is deprecated and should not be used in newly-
  written code.

==== :SetTabLabel ====
'':SetTabLabel(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], tab_label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Changes the tab label for child. If NULL is specified for tab_label, then the
  page will have the label 'page N'.
  notebook :  a GtkNotebook
  child :     the page
  tab_label : the tab label widget to use, or NULL for default tab label.

==== :SetTabLabelPacking ====
'':SetTabLabelPacking(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], expand @ [[..:..:Std:Symbol#T|Std.Symbol.T]], fill @ [[..:..:Std:Symbol#T|Std.Symbol.T]], pack_type @ [[..:..:Gtk:Gtk:PackType#T|Gtk.Gtk.PackType.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the packing parameters for the tab label of the page containing child. See
  gtk_box_pack_start() for the exact meaning of the parameters.
  notebook :  a GtkNotebook
  child :     the child widget
  expand :    whether to expand the bookmark or not
  fill :      whether the bookmark should fill the allocated area or not
  pack_type : the position of the bookmark

==== :SetTabLabelText ====
'':SetTabLabelText(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], tab_text @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Creates a new label and sets it as the tab label for the page containing child.
  notebook : a GtkNotebook
  child :    the page
  tab_text : the label text

==== New ====
''New() : [[# T| T]]''

  Creates a new GtkNotebook widget with no pages.
  Returns : the newly created GtkNotebook

==== SetWindowCreationHook ====
''SetWindowCreationHook(func : [[..:..:Std:Function#T|Std.Function.T]], data : [[..:..:Std:Address#T|Std.Address.T]], destroy : [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Installs a global function used to create a window when a detached tab is
  dropped in an empty area.
  func :    the GtkNotebookWindowCreationFunc, or NULL
  data :    user data for func
  destroy : Destroy notifier for data, or NULL

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


