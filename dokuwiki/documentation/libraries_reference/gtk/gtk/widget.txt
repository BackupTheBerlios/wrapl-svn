====== Widget ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

   GtkWidget introduces style properties - these are basically object properties that are stored not
  on the object, but in the style object associated to the widget. Style properties are set in
  resource files. This mechanism is used for configuring such things as the location of the scrollbar
  arrows through the theme, giving theme authors more control over the look of applications without
  the need to write a theme engine in C.
  Use gtk_widget_class_install_style_property() to install style properties for a widget class,
  gtk_widget_class_find_style_property() or gtk_widget_class_list_style_properties() to get
  information about existing style properties and gtk_widget_style_get_property(),
  gtk_widget_style_get() or gtk_widget_style_get_valist() to obtain the value of a style property.
  === GtkWidget as GtkBuildable ===
  The GtkWidget implementation of the GtkBuildable interface supports a custom <accelerator> element,
  which has attributes named key, modifiers and signal and allows to specify accelerators.
  Example 48.&#160;A UI definition fragment specifying an accelerator
  <object class="GtkButton">
    <accelerator key="q" modifiers="GDK_CONTROL_MASK" signal="clicked"/>
  </object>
  
  

==== :Unref ====
'':Unref(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_widget_unref has been deprecated since version 2.12 and should not be used in newly-written code. Use g_object_unref
  () instead.

==== :Unrealize ====
'':Unrealize(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is only useful in widget implementations. Causes a widget to be unrealized (frees all GDK resources
  associated with the widget, such as widget->window).
  
  widget : a GtkWidget
  

==== :Unparent ====
'':Unparent(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is only for use in widget implementations. Should be called by implementations of the remove method on
  GtkContainer, to dissociate a child from the container.
  
  widget : a GtkWidget
  

==== :Unmap ====
'':Unmap(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is only for use in widget implementations. Causes a widget to be unmapped if it's currently mapped.
  
  widget : a GtkWidget
  

==== :TriggerTooltipQuery ====
'':TriggerTooltipQuery(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Triggers a tooltip query on the display where the toplevel of widget is located. See gtk_tooltip_trigger_tooltip_query()
  for more information.
  
  widget : a GtkWidget
  

==== :TranslateCoordinates ====
'':TranslateCoordinates(self @ [[#T|T]], dest_widget @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], src_x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], src_y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], dest_x @ [[..:..:Std:Object#T|Std.Object.T]], dest_y @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Translate coordinates relative to src_widget's allocation to coordinates relative to dest_widget's allocations. In order
  to perform this operation, both widgets must be realized, and must share a common toplevel.
  
  src_widget :  a GtkWidget
  dest_widget : a GtkWidget
  src_x :       X position relative to src_widget
  src_y :       Y position relative to src_widget
  dest_x :      location to store X position relative to dest_widget
  dest_y :      location to store Y position relative to dest_widget
  Returns :     FALSE if either widget was not realized, or there was no common ancestor. In this case, nothing is stored
                in *dest_x and *dest_y. Otherwise TRUE.
  

==== :ThawChildNotify ====
'':ThawChildNotify(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Reverts the effect of a previous call to gtk_widget_freeze_child_notify(). This causes all queued "child-notify" signals
  on widget to be emitted.
  
  widget : a GtkWidget
  

==== :StyleGetValist ====
'':StyleGetValist(self @ [[#T|T]], first_property_name @ [[..:..:Std:String#T|Std.String.T]], var_args @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Non-vararg variant of gtk_widget_style_get(). Used primarily by language bindings.
  
  widget :              a GtkWidget
  first_property_name : the name of the first property to get
  var_args :            a va_list of pairs of property names and locations to return the property values, starting with
                        the location for first_property_name.
  

==== :StyleGetProperty ====
'':StyleGetProperty(self @ [[#T|T]], property_name @ [[..:..:Std:String#T|Std.String.T]], value @ [[..:..:Gtk:GObject:Value#T|Gtk.GObject.Value.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the value of a style property of widget.
  
  widget :        a GtkWidget
  property_name : the name of a style property
  value :         location to return the property value
  

==== :StyleGet ====
'':StyleGet(self @ [[#T|T]], first_property_name @ [[..:..:Std:String#T|Std.String.T]], __etc__ @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the values of a multiple style properties of widget.
  
  widget :              a GtkWidget
  first_property_name : the name of the first property to get
  ... :                 pairs of property names and locations to return the property values, starting with the location
                        for first_property_name, terminated by NULL.
  

==== :SizeRequest ====
'':SizeRequest(self @ [[#T|T]], requisition @ [[..:..:Gtk:Gtk:Requisition#T|Gtk.Gtk.Requisition.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is typically used when implementing a GtkContainer subclass. Obtains the preferred size of a widget. The
  container uses this information to arrange its child widgets and decide what size allocations to give them with
  gtk_widget_size_allocate().
  You can also call this function from an application, with some caveats. Most notably, getting a size request requires
  the widget to be associated with a screen, because font information may be needed. Multihead-aware applications should
  keep this in mind.
  Also remember that the size request is not necessarily the size a widget will actually be allocated.
  See also gtk_widget_get_child_requisition().
  
  widget :      a GtkWidget
  requisition : a GtkRequisition to be filled in
  

==== :SizeAllocate ====
'':SizeAllocate(self @ [[#T|T]], allocation @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is only used by GtkContainer subclasses, to assign a size and position to their child widgets.
  
  widget :     a GtkWidget
  allocation : position and size to be allocated to widget
  

==== :ShowNow ====
'':ShowNow(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Shows a widget. If the widget is an unmapped toplevel widget (i.e. a GtkWindow that has not yet been shown), enter the
  main loop and wait for the window to actually be mapped. Be careful; because the main loop is running, anything can
  happen during this function.
  
  widget : a GtkWidget
  

==== :ShowAll ====
'':ShowAll(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Recursively shows a widget, and any child widgets (if the widget is a container).
  
  widget : a GtkWidget
  

==== :Show ====
'':Show(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Flags a widget to be displayed. Any widget that isn't shown will not appear on the screen. If you want to show all the
  widgets in a container, it's easier to call gtk_widget_show_all() on the container, instead of individually showing the
  widgets.
  Remember that you have to show the containers containing a widget, in addition to the widget itself, before it will
  appear onscreen.
  When a toplevel container is shown, it is immediately realized and mapped; other shown widgets are realized and mapped
  when their toplevel container is realized and mapped.
  
  widget : a GtkWidget
  

==== :ShapeCombineMask ====
'':ShapeCombineMask(self @ [[#T|T]], shape_mask @ [[..:..:Gtk:Gdk:Bitmap#T|Gtk.Gdk.Bitmap.T]], offset_x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], offset_y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets a shape for this widget's GDK window. This allows for transparent windows etc., see gdk_window_shape_combine_mask()
  for more information.
  
  widget :     a GtkWidget
  shape_mask : shape to be added, or NULL to remove an existing shape
  offset_x :   X position of shape mask with respect to window
  offset_y :   Y position of shape mask with respect to window
  

==== :PrivateFlags ====
'':PrivateFlags(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :State ====
'':State(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :SavedState ====
'':SavedState(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Name ====
'':Name(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''


==== :Style ====
'':Style(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Style#T|Gtk.Gtk.Style.T]]''


==== :Requisition ====
'':Requisition(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Requisition#T|Gtk.Gtk.Requisition.T]]''


==== :Allocation ====
'':Allocation(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Rectangle#T|Gtk.Gdk.Rectangle.T]]''


==== :Window ====
'':Window(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''


==== :Parent ====
'':Parent(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :Activate ====
'':Activate(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  For widgets that can be "activated" (buttons, menu items, etc.) this function activates them. Activation is what happens
  when you press Enter on a widget during key navigation. If widget isn't activatable, the function returns FALSE.
  
  widget :  a GtkWidget that's activatable
  Returns : TRUE if the widget was activatable
  

==== :AddAccelerator ====
'':AddAccelerator(self @ [[#T|T]], accel_signal @ [[..:..:Std:String#T|Std.String.T]], accel_group @ [[..:..:Gtk:Gtk:AccelGroup#T|Gtk.Gtk.AccelGroup.T]], accel_key @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], accel_mods @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], accel_flags @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Installs an accelerator for this widget in accel_group that causes accel_signal to be emitted if the accelerator is
  activated. The accel_group needs to be added to the widget's toplevel via gtk_window_add_accel_group(), and the signal
  must be of type G_RUN_ACTION. Accelerators added through this function are not user changeable during runtime. If you
  want to support accelerators that can be changed by the user, use gtk_accel_map_add_entry() and
  gtk_widget_set_accel_path() or gtk_menu_item_set_accel_path() instead.
  
  widget :       widget to install an accelerator on
  accel_signal : widget signal to emit on accelerator activation
  accel_group :  accel group for this widget, added to its toplevel
  accel_key :    GDK keyval of the accelerator
  accel_mods :   modifier key combination of the accelerator
  accel_flags :  flag accelerators, e.g. GTK_ACCEL_VISIBLE
  

==== :AddEvents ====
'':AddEvents(self @ [[#T|T]], events @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds the events in the bitfield events to the event mask for widget. See gtk_widget_set_events() for details.
  
  widget : a GtkWidget
  events : an event mask, see GdkEventMask
  

==== :AddMnemonicLabel ====
'':AddMnemonicLabel(self @ [[#T|T]], label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds a widget to the list of mnemonic labels for this widget. (See gtk_widget_list_mnemonic_labels()). Note the list of
  mnemonic labels for the widget is cleared when the widget is destroyed, so the caller must make sure to update its
  internal state at this point as well, by using a connection to the "destroy" signal or a weak notifier.
  
  widget : a GtkWidget
  label :  a GtkWidget that acts as a mnemonic label for widget
  

==== :CanActivateAccel ====
'':CanActivateAccel(self @ [[#T|T]], signal_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Determines whether an accelerator that activates the signal identified by signal_id can currently be activated. This is
  done by emitting the "can-activate-accel" signal on widget; if the signal isn't overridden by a handler or in a derived
  widget, then the default check is that the widget must be sensitive, and the widget and all its ancestors mapped.
  
  widget :    a GtkWidget
  signal_id : the ID of a signal installed on widget
  Returns :   TRUE if the accelerator can be activated.
  

==== :ChildFocus ====
'':ChildFocus(self @ [[#T|T]], direction @ [[..:..:Gtk:Gtk:DirectionType#T|Gtk.Gtk.DirectionType.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  This function is used by custom widget implementations; if you're writing an app, you'd use gtk_widget_grab_focus() to
  move the focus to a particular widget, and gtk_container_set_focus_chain() to change the focus tab order. So you may
  want to investigate those functions instead.
  gtk_widget_child_focus() is called by containers as the user moves around the window using keyboard shortcuts. direction
  indicates what kind of motion is taking place (up, down, left, right, tab forward, tab backward). gtk_widget_child_focus
  () emits the "focus"" signal; widgets override the default handler for this signal in order to implement appropriate
  focus behavior.
  The default ::focus handler for a widget should return TRUE if moving in direction left the focus on a focusable
  location inside that widget, and FALSE if moving in direction moved the focus outside the widget. If returning TRUE,
  widgets normally call gtk_widget_grab_focus() to place the focus accordingly; if returning FALSE, they don't modify the
  current focus location.
  This function replaces gtk_container_focus() from GTK+ 1.2. It was necessary to check that the child was visible,
  sensitive, and focusable before calling gtk_container_focus(). gtk_widget_child_focus() returns FALSE if the widget is
  not currently in a focusable state, so there's no need for those checks.
  
  widget :    a GtkWidget
  direction : direction of focus movement
  Returns :   TRUE if focus ended up inside widget
  

==== :ChildNotify ====
'':ChildNotify(self @ [[#T|T]], child_property @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits a "child-notify" signal for the child property child_property on widget.
  This is the analogue of g_object_notify() for child properties.
  
  widget :         a GtkWidget
  child_property : the name of a child property installed on the class of widget's parent
  

==== :ClassPath ====
'':ClassPath(self @ [[#T|T]], path_length @ [[..:..:Std:Object#T|Std.Object.T]], path @ [[..:..:Std:List#T|Std.List.T]], path_reversed @ [[..:..:Std:List#T|Std.List.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Same as gtk_widget_path(), but always uses the name of a widget's type, never uses a custom name set with
  gtk_widget_set_name().
  
  widget :        a GtkWidget
  path_length :   location to store the length of the class path, or NULL
  path :          location to store the class path as an allocated string, or NULL
  path_reversed : location to store the reverse class path as an allocated string, or NULL
  

==== :CreatePangoContext ====
'':CreatePangoContext(self @ [[#T|T]]) : [[..:..:Gtk:Pango:Context#T|Gtk.Pango.Context.T]]''

  Creates a new PangoContext with the appropriate font map, font description, and base direction for drawing text for this
  widget. See also gtk_widget_get_pango_context().
  
  widget :  a GtkWidget
  Returns : the new PangoContext
  

==== :CreatePangoLayout ====
'':CreatePangoLayout(self @ [[#T|T]], text @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Gtk:Pango:Layout#T|Gtk.Pango.Layout.T]]''

  Creates a new PangoLayout with the appropriate font map, font description, and base direction for drawing text for this
  widget.
  If you keep a PangoLayout created in this way around, in order to notify the layout of changes to the base direction or
  font of this widget, you must call pango_layout_context_changed() in response to the "style-set" and "direction-changed"
  signals for the widget.
  
  widget :  a GtkWidget
  text :    text to set on the layout (can be NULL)
  Returns : the new PangoLayout
  

==== :Destroy ====
'':Destroy(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Destroys a widget. Equivalent to gtk_object_destroy(), except that you don't have to cast the widget to GtkObject. When
  a widget is destroyed, it will break any references it holds to other objects. If the widget is inside a container, the
  widget will be removed from the container. If the widget is a toplevel (derived from GtkWindow), it will be removed from
  the list of toplevels, and the reference GTK+ holds to it will be removed. Removing a widget from its container or the
  list of toplevels results in the widget being finalized, unless you've added additional references to the widget with
  g_object_ref().
  In most cases, only toplevel widgets (windows) require explicit destruction, because when you destroy a toplevel its
  children will be destroyed as well.
  
  widget : a GtkWidget
  

==== :Destroyed ====
'':Destroyed(self @ [[#T|T]], widget_pointer @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function sets *widget_pointer to NULL if widget_pointer != NULL. It's intended to be used as a callback connected
  to the "destroy" signal of a widget. You connect gtk_widget_destroyed() as a signal handler, and pass the address of
  your widget variable as user data. Then when the widget is destroyed, the variable will be set to NULL. Useful for
  example to avoid multiple copies of the same dialog.
  
  widget :         a GtkWidget
  widget_pointer : address of a variable that contains widget
  

==== :Draw ====
'':Draw(self @ [[#T|T]], area @ [[..:..:Gtk:Gdk:Rectangle#T|Gtk.Gdk.Rectangle.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_widget_draw is deprecated and should not be used in newly-written code.

==== :EnsureStyle ====
'':EnsureStyle(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Ensures that widget has a style (widget->style). Not a very useful function; most of the time, if you want the style,
  the widget is realized, and realized widgets are guaranteed to have a style already.
  
  widget : a GtkWidget
  

==== :ErrorBell ====
'':ErrorBell(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Notifies the user about an input-related error on this widget. If the "gtk-error-bell" setting is TRUE, it calls
  gdk_window_beep(), otherwise it does nothing.
  Note that the effect of gdk_window_beep() can be configured in many ways, depending on the windowing backend and the
  desktop environment or window manager that is used.
  
  widget : a GtkWidget
  

==== :Event ====
'':Event(self @ [[#T|T]], event @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Rarely-used function. This function is used to emit the event signals on a widget (those signals should never be emitted
  without using this function to do so). If you want to synthesize an event though, don't use this function; instead, use
  gtk_main_do_event() so the event will behave as if it were in the event queue. Don't synthesize expose events; instead,
  use gdk_window_invalidate_rect() to invalidate a region of the window.
  
  widget :  a GtkWidget
  event :   a GdkEvent
  Returns : return from the event signal emission (TRUE if the event was handled)
  

==== :FreezeChildNotify ====
'':FreezeChildNotify(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Stops emission of "child-notify" signals on widget. The signals are queued until gtk_widget_thaw_child_notify() is
  called on widget.
  This is the analogue of g_object_freeze_notify() for child properties.
  
  widget : a GtkWidget
  

==== :GetAccessible ====
'':GetAccessible(self @ [[#T|T]]) : [[..:..:Gtk:Atk:Object#T|Gtk.Atk.Object.T]]''

  Returns the accessible object that describes the widget to an assistive technology.
  If no accessibility library is loaded (i.e. no ATK implementation library is loaded via GTK_MODULES or via another
  application library, such as libgnome), then this AtkObject instance may be a no-op. Likewise, if no class-specific
  AtkObject implementation is available for the widget instance in question, it will inherit an AtkObject implementation
  from the first ancestor class for which such an implementation is defined.
  The documentation of the ATK library contains more information about accessible objects and their uses.
  
  widget :  a GtkWidget
  Returns : the AtkObject associated with widget
  

==== :GetAction ====
'':GetAction(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Action#T|Gtk.Gtk.Action.T]]''

  Returns the GtkAction that widget is a proxy for. See also gtk_action_get_proxies().
  
  widget :  a GtkWidget
  Returns : the action that a widget is a proxy for, or NULL, if it is not attached to an action.
  

==== :GetAncestor ====
'':GetAncestor(self @ [[#T|T]], widget_type @ [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Gets the first ancestor of widget with type widget_type. For example, gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)
  gets the first GtkBox that's an ancestor of widget. No reference will be added to the returned widget; it should not be
  unreferenced. See note about checking for a toplevel GtkWindow in the docs for gtk_widget_get_toplevel().
  Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor() considers widget to be an ancestor of itself.
  
  widget :      a GtkWidget
  widget_type : ancestor type
  Returns :     the ancestor widget, or NULL if not found
  

==== :GetChildRequisition ====
'':GetChildRequisition(self @ [[#T|T]], requisition @ [[..:..:Gtk:Gtk:Requisition#T|Gtk.Gtk.Requisition.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is only for use in widget implementations. Obtains widget->requisition, unless someone has forced a
  particular geometry on the widget (e.g. with gtk_widget_set_size_request()), in which case it returns that geometry
  instead of the widget's requisition.
  This function differs from gtk_widget_size_request() in that it retrieves the last size request value from widget-
  >requisition, while gtk_widget_size_request() actually calls the "size_request" method on widget to compute the size
  request and fill in widget->requisition, and only then returns widget->requisition.
  Because this function does not call the "size_request" method, it can only be used when you know that widget-
  >requisition is up-to-date, that is, gtk_widget_size_request() has been called since the last time a resize was queued.
  In general, only container implementations have this information; applications should use gtk_widget_size_request().
  
  widget :      a GtkWidget
  requisition : a GtkRequisition to be filled in
  

==== :GetChildVisible ====
'':GetChildVisible(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets the value set with gtk_widget_set_child_visible(). If you feel a need to use this function, your code probably
  needs reorganization.
  This function is only useful for container implementations and never should be called by an application.
  
  widget :  a GtkWidget
  Returns : TRUE if the widget is mapped with the parent.
  

==== :GetClipboard ====
'':GetClipboard(self @ [[#T|T]], selection @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Gtk:Gtk:Clipboard#T|Gtk.Gtk.Clipboard.T]]''

  Returns the clipboard object for the given selection to be used with widget. widget must have a GdkDisplay associated
  with it, so must be attached to a toplevel window.
  
  widget :    a GtkWidget
  selection : a GdkAtom which identifies the clipboard to use. GDK_SELECTION_CLIPBOARD gives the default clipboard.
              Another common value is GDK_SELECTION_PRIMARY, which gives the primary X selection.
  Returns :   the appropriate clipboard object. If no clipboard already exists, a new one will be created. Once a
              clipboard object has been created, it is persistent for all time.
  

==== :GetColormap ====
'':GetColormap(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Colormap#T|Gtk.Gdk.Colormap.T]]''

  Gets the colormap that will be used to render widget. No reference will be added to the returned colormap; it should not
  be unreferenced.
  
  widget :  a GtkWidget
  Returns : the colormap used by widget
  

==== :GetCompositeName ====
'':GetCompositeName(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Obtains the composite name of a widget.
  
  widget :  a GtkWidget
  Returns : the composite name of widget, or NULL if widget is not a composite child. The string should not be freed when
            it is no longer needed.
  

==== :GetDirection ====
'':GetDirection(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextDirection#T|Gtk.Gtk.TextDirection.T]]''

  Gets the reading direction for a particular widget. See gtk_widget_set_direction().
  
  widget :  a GtkWidget
  Returns : the reading direction for the widget.
  

==== :GetDisplay ====
'':GetDisplay(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Display#T|Gtk.Gdk.Display.T]]''

  Get the GdkDisplay for the toplevel window associated with this widget. This function can only be called after the
  widget has been added to a widget hierarchy with a GtkWindow at the top.
  In general, you should only create display specific resources when a widget has been realized, and you should free those
  resources when the widget is unrealized.
  
  widget :  a GtkWidget
  Returns : the GdkDisplay for the toplevel for this widget.
  

==== :GetEvents ====
'':GetEvents(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Returns the event mask for the widget (a bitfield containing flags from the GdkEventMask enumeration). These are the
  events that the widget will receive.
  
  widget :  a GtkWidget
  Returns : event mask for widget
  

==== :GetExtensionEvents ====
'':GetExtensionEvents(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:ExtensionMode#T|Gtk.Gdk.ExtensionMode.T]]''

  Retrieves the extension events the widget will receive; see gdk_input_set_extension_events().
  
  widget :  a GtkWidget
  Returns : extension events for widget
  

==== :GetHasTooltip ====
'':GetHasTooltip(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns the current value of the has-tooltip property. See GtkWidget:has-tooltip for more information.
  
  widget :  a GtkWidget
  Returns : current value of has-tooltip on widget.
  

==== :GetModifierStyle ====
'':GetModifierStyle(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:RcStyle#T|Gtk.Gtk.RcStyle.T]]''

  Returns the current modifier style for the widget. (As set by gtk_widget_modify_style().) If no style has previously
  set, a new GtkRcStyle will be created with all values unset, and set as the modifier style for the widget. If you make
  changes to this rc style, you must call gtk_widget_modify_style(), passing in the returned rc style, to make sure that
  your changes take effect.
  Caution: passing the style back to gtk_widget_modify_style() will normally end up destroying it, because
  gtk_widget_modify_style() copies the passed-in style and sets the copy as the new modifier style, thus dropping any
  reference to the old modifier style. Add a reference to the modifier style if you want to keep it alive.
  
  widget :  a GtkWidget
  Returns : the modifier style for the widget. This rc style is owned by the widget. If you want to keep a pointer to
            value this around, you must add a refcount using g_object_ref().
  

==== :GetName ====
'':GetName(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Retrieves the name of a widget. See gtk_widget_set_name() for the significance of widget names.
  
  widget :  a GtkWidget
  Returns : name of the widget. This string is owned by GTK+ and should not be modified or freed
  

==== :GetNoShowAll ====
'':GetNoShowAll(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns the current value of the GtkWidget:no-show-all property, which determines whether calls to gtk_widget_show_all()
  and gtk_widget_hide_all() will affect this widget.
  
  widget :  a GtkWidget
  Returns : the current value of the "no-show-all" property.
  

==== :GetPangoContext ====
'':GetPangoContext(self @ [[#T|T]]) : [[..:..:Gtk:Pango:Context#T|Gtk.Pango.Context.T]]''

  Gets a PangoContext with the appropriate font map, font description, and base direction for this widget. Unlike the
  context returned by gtk_widget_create_pango_context(), this context is owned by the widget (it can be used until the
  screen for the widget changes or the widget is removed from its toplevel), and will be updated to match any changes to
  the widget's attributes.
  If you create and keep a PangoLayout using this context, you must deal with changes to the context by calling
  pango_layout_context_changed() on the layout in response to the "style-set" and "direction-changed" signals for the
  widget.
  
  widget :  a GtkWidget
  Returns : the PangoContext for the widget.
  

==== :GetParent ====
'':GetParent(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Returns the parent container of widget.
  
  widget :  a GtkWidget
  Returns : the parent container of widget, or NULL
  

==== :GetParentWindow ====
'':GetParentWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''

  Gets widget's parent window.
  
  widget :  a GtkWidget.
  Returns : the parent window of widget.
  

==== :GetPointer ====
'':GetPointer(self @ [[#T|T]], x @ [[..:..:Std:Object#T|Std.Object.T]], y @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Obtains the location of the mouse pointer in widget coordinates. Widget coordinates are a bit odd; for historical
  reasons, they are defined as widget->window coordinates for widgets that are not GTK_NO_WINDOW widgets, and are relative
  to widget->allocation.x, widget->allocation.y for widgets that are GTK_NO_WINDOW widgets.
  
  widget : a GtkWidget
  x :      return location for the X coordinate, or NULL
  y :      return location for the Y coordinate, or NULL
  

==== :GetRootWindow ====
'':GetRootWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''

  Get the root window where this widget is located. This function can only be called after the widget has been added to a
  widget heirarchy with GtkWindow at the top.
  The root window is useful for such purposes as creating a popup GdkWindow associated with the window. In general, you
  should only create display specific resources when a widget has been realized, and you should free those resources when
  the widget is unrealized.
  
  widget :  a GtkWidget
  Returns : the GdkWindow root window for the toplevel for this widget.
  

==== :GetScreen ====
'':GetScreen(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Screen#T|Gtk.Gdk.Screen.T]]''

  Get the GdkScreen from the toplevel window associated with this widget. This function can only be called after the
  widget has been added to a widget hierarchy with a GtkWindow at the top.
  In general, you should only create screen specific resources when a widget has been realized, and you should free those
  resources when the widget is unrealized.
  
  widget :  a GtkWidget
  Returns : the GdkScreen for the toplevel for this widget.
  

==== :GetSettings ====
'':GetSettings(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Settings#T|Gtk.Gtk.Settings.T]]''

  Gets the settings object holding the settings (global property settings, RC file information, etc) used for this widget.
  Note that this function can only be called when the GtkWidget is attached to a toplevel, since the settings object is
  specific to a particular GdkScreen.
  
  widget :  a GtkWidget
  Returns : the relevant GtkSettings object
  

==== :GetSizeRequest ====
'':GetSizeRequest(self @ [[#T|T]], width @ [[..:..:Std:Object#T|Std.Object.T]], height @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the size request that was explicitly set for the widget using gtk_widget_set_size_request(). A value of -1 stored
  in width or height indicates that that dimension has not been set explicitly and the natural requisition of the widget
  will be used intead. See gtk_widget_set_size_request(). To get the size a widget will actually use, call
  gtk_widget_size_request() instead of this function.
  
  widget : a GtkWidget
  width :  return location for width, or NULL
  height : return location for height, or NULL
  

==== :GetStyle ====
'':GetStyle(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Style#T|Gtk.Gtk.Style.T]]''

  Simply an accessor function that returns widget->style.
  
  widget :  a GtkWidget
  Returns : the widget's GtkStyle
  

==== :GetTooltipMarkup ====
'':GetTooltipMarkup(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the contents of the tooltip for widget.
  
  widget :  a GtkWidget
  Returns : the tooltip text, or NULL. You should free the returned string with g_free() when done.
  

==== :GetTooltipText ====
'':GetTooltipText(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the contents of the tooltip for widget.
  
  widget :  a GtkWidget
  Returns : the tooltip text, or NULL. You should free the returned string with g_free() when done.
  

==== :GetTooltipWindow ====
'':GetTooltipWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Window#T|Gtk.Gtk.Window.T]]''

  Returns the GtkWindow of the current tooltip. This can be the GtkWindow created by default, or the custom tooltip window
  set using gtk_widget_set_tooltip_window().
  
  widget :  a GtkWidget
  Returns : The GtkWindow of the current tooltip.
  

==== :GetToplevel ====
'':GetToplevel(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  This function returns the topmost widget in the container hierarchy widget is a part of. If widget has no parent
  widgets, it will be returned as the topmost widget. No reference will be added to the returned widget; it should not be
  unreferenced.
  Note the difference in behavior vs. gtk_widget_get_ancestor(); gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW) would
  return NULL if widget wasn't inside a toplevel window, and if the window was inside a GtkWindow-derived widget which was
  in turn inside the toplevel GtkWindow. While the second case may seem unlikely, it actually happens when a GtkPlug is
  embedded inside a GtkSocket within the same application.
  To reliably find the toplevel GtkWindow, use gtk_widget_get_toplevel() and check if the TOPLEVEL flags is set on the
  result.
   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
   if (GTK_WIDGET_TOPLEVEL (toplevel))
     {
       [ Perform action on toplevel. ]
     }

==== :GetVisual ====
'':GetVisual(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Visual#T|Gtk.Gdk.Visual.T]]''

  Gets the visual that will be used to render widget.
  
  widget :  a GtkWidget
  Returns : the visual for widget
  

==== :GrabDefault ====
'':GrabDefault(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Causes widget to become the default widget. widget must have the GTK_CAN_DEFAULT flag set; typically you have to set
  this flag yourself by calling GTK_WIDGET_SET_FLAGS (widget, GTK_CAN_DEFAULT). The default widget is activated when the
  user presses Enter in a window. Default widgets must be activatable, that is, gtk_widget_activate() should affect them.
  
  widget : a GtkWidget
  

==== :GrabFocus ====
'':GrabFocus(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Causes widget to have the keyboard focus for the GtkWindow it's inside. widget must be a focusable widget, such as a
  GtkEntry; something like GtkFrame won't work. (More precisely, it must have the GTK_CAN_FOCUS flag set.)
  
  widget : a GtkWidget
  

==== :HasScreen ====
'':HasScreen(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Checks whether there is a GdkScreen is associated with this widget. All toplevel widgets have an associated screen, and
  all widgets added into a heirarchy with a toplevel window at the top.
  
  widget :  a GtkWidget
  Returns : TRUE if there is a GdkScreen associcated with the widget.
  

==== :Hide ====
'':Hide(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Reverses the effects of gtk_widget_show(), causing the widget to be hidden (invisible to the user).
  
  widget : a GtkWidget
  

==== :HideAll ====
'':HideAll(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Recursively hides a widget and any child widgets.
  
  widget : a GtkWidget
  

==== :HideOnDelete ====
'':HideOnDelete(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Utility function; intended to be connected to the "delete-event" signal on a GtkWindow. The function calls
  gtk_widget_hide() on its argument, then returns TRUE. If connected to ::delete-event, the result is that clicking the
  close button for a window (on the window frame, top right corner usually) will hide but not destroy the window. By
  default, GTK+ destroys windows when ::delete-event is received.
  
  widget :  a GtkWidget
  Returns : TRUE
  

==== :InputShapeCombineMask ====
'':InputShapeCombineMask(self @ [[#T|T]], shape_mask @ [[..:..:Gtk:Gdk:Bitmap#T|Gtk.Gdk.Bitmap.T]], offset_x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], offset_y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets an input shape for this widget's GDK window. This allows for windows which react to mouse click in a nonrectangular
  region, see gdk_window_input_shape_combine_mask() for more information.
  
  widget :     a GtkWidget
  shape_mask : shape to be added, or NULL to remove an existing shape
  offset_x :   X position of shape mask with respect to window
  offset_y :   Y position of shape mask with respect to window
  

==== :Intersect ====
'':Intersect(self @ [[#T|T]], area @ [[..:..:Gtk:Gdk:Rectangle#T|Gtk.Gdk.Rectangle.T]], intersection @ [[..:..:Gtk:Gdk:Rectangle#T|Gtk.Gdk.Rectangle.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Computes the intersection of a widget's area and area, storing the intersection in intersection, and returns TRUE if
  there was an intersection. intersection may be NULL if you're only interested in whether there was an intersection.
  
  widget :       a GtkWidget
  area :         a rectangle
  intersection : rectangle to store intersection of widget and area
  Returns :      TRUE if there was an intersection
  

==== :IsAncestor ====
'':IsAncestor(self @ [[#T|T]], ancestor @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Determines whether widget is somewhere inside ancestor, possibly with intermediate containers.
  
  widget :   a GtkWidget
  ancestor : another GtkWidget
  Returns :  TRUE if ancestor contains widget as a child, grandchild, great grandchild, etc.
  

==== :IsComposited ====
'':IsComposited(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Whether widget can rely on having its alpha channel drawn correctly. On X11 this function returns whether a compositing
  manager is running for widget's screen.
  Please note that the semantics of this call will change in the future if used on a widget that has a composited window
  in its heirarchy (as set by gdk_window_set_composited()).
  
  widget :  a GtkWidget
  Returns : TRUE if the widget can rely on its alpha channel being drawn correctly.
  

==== :IsFocus ====
'':IsFocus(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Determines if the widget is the focus widget within its toplevel. (This does not mean that the HAS_FOCUS flag is
  necessarily set; HAS_FOCUS will only be set if the toplevel widget additionally has the global input focus.)
  
  widget :  a GtkWidget
  Returns : TRUE if the widget is the focus widget.
  

==== :KeynavFailed ====
'':KeynavFailed(self @ [[#T|T]], direction @ [[..:..:Gtk:Gtk:DirectionType#T|Gtk.Gtk.DirectionType.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  This function should be called whenever keyboard navigation within a single widget hits a boundary. The function emits
  the "keynav-changed" signal on the widget and its return value should be interpreted in a way similar to the return
  value of gtk_widget_child_focus():
  When TRUE is returned, stay in the widget, the failed keyboard navigation is Ok and/or there is nowhere we can/should
  move the focus to.
  When FALSE is returned, the caller should continue with keyboard navigation outside the widget, e.g. by calling
  gtk_widget_child_focus() on the widget's toplevel.
  The default ::keynav-failed handler returns TRUE for GTK_DIR_TAB_FORWARD and GTK_DIR_TAB_BACKWARD. For the other values
  of GtkDirectionType, it looks at the "gtk-keynav-cursor-only"" setting and returns FALSE if the setting is TRUE. This
  way the entire user interface becomes cursor-navigatable on input devices such as mobile phones which only have cursor
  keys but no tab key.
  Whenever the default handler returns TRUE, it also calls gtk_widget_error_bell() to notify the user of the failed
  keyboard navigation.
  A use case for providing an own implementation of ::keynav-failed (either by connecting to it or by overriding it) would
  be a row of GtkEntry widgets where the user should be able to navigate the entire row with the cursor keys, as e.g.
  known from user interfaces that require entering license keys.
  
  widget :    a GtkWidget
  direction : direction of focus movement
  Returns :   TRUE if stopping keyboard navigation is fine, FALSE if the emitting widget should try to handle the keyboard
              navigation attempt in its parent container(s).
  

==== :ListAccelClosures ====
'':ListAccelClosures(self @ [[#T|T]]) : [[..:..:Std:List#T|Std.List.T]]''

  Lists the closures used by widget for accelerator group connections with gtk_accel_group_connect_by_path() or
  gtk_accel_group_connect(). The closures can be used to monitor accelerator changes on widget, by connecting to the
  GtkAccelGroup::accel-changed signal of the GtkAccelGroup of a closure which can be found out with
  gtk_accel_group_from_accel_closure().
  
  widget :  widget to list accelerator closures for
  Returns : a newly allocated GList of closures
  

==== :ListMnemonicLabels ====
'':ListMnemonicLabels(self @ [[#T|T]]) : [[..:..:Std:List#T|Std.List.T]]''

  Returns a newly allocated list of the widgets, normally labels, for which this widget is a the target of a mnemonic (see
  for example, gtk_label_set_mnemonic_widget()).
  The widgets in the list are not individually referenced. If you want to iterate through the list and perform actions
  involving callbacks that might destroy the widgets, you must call g_list_foreach (result, (GFunc)g_object_ref, NULL)
  first, and then unref all the widgets afterwards.
  
  widget :  a GtkWidget
  Returns : the list of mnemonic labels; free this list with g_list_free() when you are done with it.
  

==== :Map ====
'':Map(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is only for use in widget implementations. Causes a widget to be mapped if it isn't already.
  
  widget : a GtkWidget
  

==== :MnemonicActivate ====
'':MnemonicActivate(self @ [[#T|T]], group_cycling @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  
  widget :
  group_cycling :
  Returns :
  

==== :ModifyBase ====
'':ModifyBase(self @ [[#T|T]], state @ [[..:..:Gtk:Gtk:StateType#T|Gtk.Gtk.StateType.T]], color @ [[..:..:Gtk:Gdk:Color#T|Gtk.Gdk.Color.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the base color for a widget in a particular state. All other style values are left untouched. The base color is the
  background color used along with the text color (see gtk_widget_modify_text()) for widgets such as GtkEntry and
  GtkTextView. See also gtk_widget_modify_style().
  Note that "no window" widgets (which have the GTK_NO_WINDOW flag set) draw on their parent container's window and thus
  may not draw any background themselves. This is the case for e.g. GtkLabel. To modify the background of such widgets,
  you have to set the base color on their parent; if you want to set the background of a rectangular area around a label,
  try placing the label in a GtkEventBox widget and setting the base color on that.
  
  widget : a GtkWidget
  state :  the state for which to set the base color
  color :  the color to assign (does not need to be allocated), or NULL to undo the effect of previous calls to of
           gtk_widget_modify_base().
  

==== :ModifyBg ====
'':ModifyBg(self @ [[#T|T]], state @ [[..:..:Gtk:Gtk:StateType#T|Gtk.Gtk.StateType.T]], color @ [[..:..:Gtk:Gdk:Color#T|Gtk.Gdk.Color.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the background color for a widget in a particular state. All other style values are left untouched. See also
  gtk_widget_modify_style().
  Note that "no window" widgets (which have the GTK_NO_WINDOW flag set) draw on their parent container's window and thus
  may not draw any background themselves. This is the case for e.g. GtkLabel. To modify the background of such widgets,
  you have to set the background color on their parent; if you want to set the background of a rectangular area around a
  label, try placing the label in a GtkEventBox widget and setting the background color on that.
  
  widget : a GtkWidget
  state :  the state for which to set the background color
  color :  the color to assign (does not need to be allocated), or NULL to undo the effect of previous calls to of
           gtk_widget_modify_bg().
  

==== :ModifyCursor ====
'':ModifyCursor(self @ [[#T|T]], primary @ [[..:..:Gtk:Gdk:Color#T|Gtk.Gdk.Color.T]], secondary @ [[..:..:Gtk:Gdk:Color#T|Gtk.Gdk.Color.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the cursor color to use in a widget, overriding the "cursor-color" and "secondary-cursor-color" style properties.
  All other style values are left untouched. See also gtk_widget_modify_style().
  
  widget :    a GtkWidget
  primary :   the color to use for primary cursor (does not need to be allocated), or NULL to undo the effect of previous
              calls to of gtk_widget_modify_cursor().
  secondary : the color to use for secondary cursor (does not need to be allocated), or NULL to undo the effect of
              previous calls to of gtk_widget_modify_cursor().
  

==== :ModifyFg ====
'':ModifyFg(self @ [[#T|T]], state @ [[..:..:Gtk:Gtk:StateType#T|Gtk.Gtk.StateType.T]], color @ [[..:..:Gtk:Gdk:Color#T|Gtk.Gdk.Color.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the foreground color for a widget in a particular state. All other style values are left untouched. See also
  gtk_widget_modify_style().
  
  widget : a GtkWidget
  state :  the state for which to set the foreground color
  color :  the color to assign (does not need to be allocated), or NULL to undo the effect of previous calls to of
           gtk_widget_modify_fg().
  

==== :ModifyFont ====
'':ModifyFont(self @ [[#T|T]], font_desc @ [[..:..:Gtk:Pango:FontDescription#T|Gtk.Pango.FontDescription.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the font to use for a widget. All other style values are left untouched. See also gtk_widget_modify_style().
  
  widget :    a GtkWidget
  font_desc : the font description to use, or NULL to undo the effect of previous calls to gtk_widget_modify_font().
  

==== :ModifyStyle ====
'':ModifyStyle(self @ [[#T|T]], style @ [[..:..:Gtk:Gtk:RcStyle#T|Gtk.Gtk.RcStyle.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Modifies style values on the widget. Modifications made using this technique take precedence over style values set via
  an RC file, however, they will be overriden if a style is explicitely set on the widget using gtk_widget_set_style().
  The GtkRcStyle structure is designed so each field can either be set or unset, so it is possible, using this function,
  to modify some style values and leave the others unchanged.
  Note that modifications made with this function are not cumulative with previous calls to gtk_widget_modify_style() or
  with such functions as gtk_widget_modify_fg(). If you wish to retain previous values, you must first call
  gtk_widget_get_modifier_style(), make your modifications to the returned style, then call gtk_widget_modify_style() with
  that style. On the other hand, if you first call gtk_widget_modify_style(), subsequent calls to such functions
  gtk_widget_modify_fg() will have a cumulative effect with the initial modifications.
  
  widget : a GtkWidget
  style :  the GtkRcStyle holding the style modifications
  

==== :ModifyText ====
'':ModifyText(self @ [[#T|T]], state @ [[..:..:Gtk:Gtk:StateType#T|Gtk.Gtk.StateType.T]], color @ [[..:..:Gtk:Gdk:Color#T|Gtk.Gdk.Color.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the text color for a widget in a particular state. All other style values are left untouched. The text color is the
  foreground color used along with the base color (see gtk_widget_modify_base()) for widgets such as GtkEntry and
  GtkTextView. See also gtk_widget_modify_style().
  
  widget : a GtkWidget
  state :  the state for which to set the text color
  color :  the color to assign (does not need to be allocated), or NULL to undo the effect of previous calls to of
           gtk_widget_modify_text().
  

==== :Path ====
'':Path(self @ [[#T|T]], path_length @ [[..:..:Std:Object#T|Std.Object.T]], path @ [[..:..:Std:List#T|Std.List.T]], path_reversed @ [[..:..:Std:List#T|Std.List.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Obtains the full path to widget. The path is simply the name of a widget and all its parents in the container hierarchy,
  separated by periods. The name of a widget comes from gtk_widget_get_name(). Paths are used to apply styles to a widget
  in gtkrc configuration files. Widget names are the type of the widget by default (e.g. "GtkButton") or can be set to an
  application-specific value with gtk_widget_set_name(). By setting the name of a widget, you allow users or theme authors
  to apply styles to that specific widget in their gtkrc file. path_reversed_p fills in the path in reverse order, i.e.
  starting with widget's name instead of starting with the name of widget's outermost ancestor.
  
  widget :        a GtkWidget
  path_length :   location to store length of the path, or NULL
  path :          location to store allocated path string, or NULL
  path_reversed : location to store allocated reverse path string, or NULL
  

==== :QueueClear ====
'':QueueClear(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_widget_queue_clear is deprecated and should not be used in newly-written code. Use gtk_widget_queue_draw() instead.

==== :QueueClearArea ====
'':QueueClearArea(self @ [[#T|T]], x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], width @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], height @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_widget_queue_clear_area is deprecated and should not be used in newly-written code. Use gtk_widget_queue_draw_area()
  instead.

==== :QueueDraw ====
'':QueueDraw(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Equivalent to calling gtk_widget_queue_draw_area() for the entire area of a widget.
  
  widget : a GtkWidget
  

==== :QueueDrawArea ====
'':QueueDrawArea(self @ [[#T|T]], x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], width @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], height @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Invalidates the rectangular area of widget defined by x, y, width and height by calling gdk_window_invalidate_rect() on
  the widget's window and all its child windows. Once the main loop becomes idle (after the current batch of events has
  been processed, roughly), the window will receive expose events for the union of all regions that have been invalidated.
  Normally you would only use this function in widget implementations. You might also use it, or
  gdk_window_invalidate_rect() directly, to schedule a redraw of a GtkDrawingArea or some portion thereof.
  Frequently you can just call gdk_window_invalidate_rect() or gdk_window_invalidate_region() instead of this function.
  Those functions will invalidate only a single window, instead of the widget and all its children.
  The advantage of adding to the invalidated region compared to simply drawing immediately is efficiency; using an invalid
  region ensures that you only have to redraw one time.
  
  widget : a GtkWidget
  x :      x coordinate of upper-left corner of rectangle to redraw
  y :      y coordinate of upper-left corner of rectangle to redraw
  width :  width of region to draw
  height : height of region to draw
  

==== :QueueResize ====
'':QueueResize(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is only for use in widget implementations. Flags a widget to have its size renegotiated; should be called
  when a widget for some reason has a new size request. For example, when you change the text in a GtkLabel, GtkLabel
  queues a resize to ensure there's enough space for the new text.
  
  widget : a GtkWidget
  

==== :QueueResizeNoRedraw ====
'':QueueResizeNoRedraw(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function works like gtk_widget_queue_resize(), except that the widget is not invalidated.
  
  widget : a GtkWidget
  

==== :Realize ====
'':Realize(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Creates the GDK (windowing system) resources associated with a widget. For example, widget->window will be created when
  a widget is realized. Normally realization happens implicitly; if you show a widget and all its parent containers, then
  the widget will be realized and mapped automatically.
  Realizing a widget requires all the widget's parent widgets to be realized; calling gtk_widget_realize() realizes the
  widget's parents in addition to widget itself. If a widget is not yet inside a toplevel window when you realize it, bad
  things will happen.
  This function is primarily used in widget implementations, and isn't very useful otherwise. Many times when you think
  you might need it, a better approach is to connect to a signal that will be called after the widget is realized
  automatically, such as GtkWidget::expose-event. Or simply g_signal_connect_after() to the GtkWidget::realize signal.
  
  widget : a GtkWidget
  

==== :Ref ====
'':Ref(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  === Warning ===
  gtk_widget_ref has been deprecated since version 2.12 and should not be used in newly-written code. Use g_object_ref()
  instead.

==== :RegionIntersect ====
'':RegionIntersect(self @ [[#T|T]], region @ [[..:..:Gtk:Gdk:Region#T|Gtk.Gdk.Region.T]]) : [[..:..:Gtk:Gdk:Region#T|Gtk.Gdk.Region.T]]''

  Computes the intersection of a widget's area and region, returning the intersection. The result may be empty, use
  gdk_region_empty() to check.
  
  widget :  a GtkWidget
  region :  a GdkRegion, in the same coordinate system as widget->allocation. That is, relative to widget->window for
            NO_WINDOW widgets; relative to the parent window of widget->window for widgets with their own window.
            A newly allocated region holding the intersection of widget and region. The coordinates of the return value
  Returns : are relative to widget->window for NO_WINDOW widgets, and relative to the parent window of widget->window for
            widgets with their own window.
  

==== :RemoveAccelerator ====
'':RemoveAccelerator(self @ [[#T|T]], accel_group @ [[..:..:Gtk:Gtk:AccelGroup#T|Gtk.Gtk.AccelGroup.T]], accel_key @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], accel_mods @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Removes an accelerator from widget, previously installed with gtk_widget_add_accelerator().
  
  widget :      widget to install an accelerator on
  accel_group : accel group for this widget
  accel_key :   GDK keyval of the accelerator
  accel_mods :  modifier key combination of the accelerator
  Returns :     whether an accelerator was installed and could be removed
  

==== :RemoveMnemonicLabel ====
'':RemoveMnemonicLabel(self @ [[#T|T]], label @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Removes a widget from the list of mnemonic labels for this widget. (See gtk_widget_list_mnemonic_labels()). The widget
  must have previously been added to the list with gtk_widget_add_mnemonic_label().
  
  widget : a GtkWidget
  label :  a GtkWidget that was previously set as a mnemnic label for widget with gtk_widget_add_mnemonic_label().
  

==== :RenderIcon ====
'':RenderIcon(self @ [[#T|T]], stock_id @ [[..:..:Std:String#T|Std.String.T]], size @ [[..:..:Gtk:Gtk:IconSize#T|Gtk.Gtk.IconSize.T]], detail @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Gtk:Gdk:Pixbuf#T|Gtk.Gdk.Pixbuf.T]]''

  A convenience function that uses the theme engine and RC file settings for widget to look up stock_id and render it to a
  pixbuf. stock_id should be a stock icon ID such as GTK_STOCK_OPEN or GTK_STOCK_OK. size should be a size such as
  GTK_ICON_SIZE_MENU. detail should be a string that identifies the widget or code doing the rendering, so that theme
  engines can special-case rendering for that widget or code.
  The pixels in the returned GdkPixbuf are shared with the rest of the application and should not be modified. The pixbuf
  should be freed after use with g_object_unref().
  
  widget :   a GtkWidget
  stock_id : a stock ID
  size :     a stock size. A size of (GtkIconSize)-1 means render at the size of the source and don't scale (if there are
             multiple source sizes, GTK+ picks one of the available sizes).
  detail :   render detail to pass to theme engine
  Returns :  a new pixbuf, or NULL if the stock ID wasn't known
  

==== :Reparent ====
'':Reparent(self @ [[#T|T]], new_parent @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Moves a widget from one GtkContainer to another, handling reference count issues to avoid destroying the widget.
  
  widget :     a GtkWidget
  new_parent : a GtkContainer to move the widget into
  

==== :ResetRcStyles ====
'':ResetRcStyles(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Reset the styles of widget and all descendents, so when they are looked up again, they get the correct values for the
  currently loaded RC file settings.
  This function is not useful for applications.
  
  widget : a GtkWidget.
  

==== :ResetShapes ====
'':ResetShapes(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Recursively resets the shape on this widget and its descendants.
  
  widget : a GtkWidget
  

==== :SendExpose ====
'':SendExpose(self @ [[#T|T]], event @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Very rarely-used function. This function is used to emit an expose event signals on a widget. This function is not
  normally used directly. The only time it is used is when propagating an expose event to a child NO_WINDOW widget, and
  that is normally done using gtk_container_propagate_expose().
  If you want to force an area of a window to be redrawn, use gdk_window_invalidate_rect() or gdk_window_invalidate_region
  (). To cause the redraw to be done immediately, follow that call with a call to gdk_window_process_updates().
  
  widget :  a GtkWidget
  event :   a expose GdkEvent
  Returns : return from the event signal emission (TRUE if the event was handled)
  

==== :Set ====
'':Set(self @ [[#T|T]], first_property_name @ [[..:..:Std:String#T|Std.String.T]], __etc__ @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_widget_set is deprecated and should not be used in newly-written code. Use g_object_set() instead.

==== :SetAccelPath ====
'':SetAccelPath(self @ [[#T|T]], accel_path @ [[..:..:Std:String#T|Std.String.T]], accel_group @ [[..:..:Gtk:Gtk:AccelGroup#T|Gtk.Gtk.AccelGroup.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Given an accelerator group, accel_group, and an accelerator path, accel_path, sets up an accelerator in accel_group so
  whenever the key binding that is defined for accel_path is pressed, widget will be activated. This removes any
  accelerators (for any accelerator group) installed by previous calls to gtk_widget_set_accel_path(). Associating
  accelerators with paths allows them to be modified by the user and the modifications to be saved for future use. (See
  gtk_accel_map_save().)
  This function is a low level function that would most likely be used by a menu creation system like GtkUIManager. If you
  use GtkUIManager, setting up accelerator paths will be done automatically.
  Even when you you aren't using GtkUIManager, if you only want to set up accelerators on menu items
  gtk_menu_item_set_accel_path() provides a somewhat more convenient interface.
  
  widget :      a GtkWidget
  accel_path :  path used to look up the accelerator
  accel_group : a GtkAccelGroup.
  

==== :SetAppPaintable ====
'':SetAppPaintable(self @ [[#T|T]], app_paintable @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the application intends to draw on the widget in an "expose-event" handler.
  This is a hint to the widget and does not affect the behavior of the GTK+ core; many widgets ignore this flag entirely.
  For widgets that do pay attention to the flag, such as GtkEventBox and GtkWindow, the effect is to suppress default
  themed drawing of the widget's background. (Children of the widget will still be drawn.) The application is then
  entirely responsible for drawing the widget background.
  Note that the background is still drawn when the widget is mapped. If this is not suitable (e.g. because you want to
  make a transparent window using an RGBA visual), you can work around this by doing:
   gtk_widget_realize (window);
   gdk_window_set_back_pixmap (window->window, NULL, FALSE);
   gtk_widget_show (window);

==== :SetChildVisible ====
'':SetChildVisible(self @ [[#T|T]], is_visible @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether widget should be mapped along with its when its parent is mapped and widget has been shown with
  gtk_widget_show().
  The child visibility can be set for widget before it is added to a container with gtk_widget_set_parent(), to avoid
  mapping children unnecessary before immediately unmapping them. However it will be reset to its default state of TRUE
  when the widget is removed from a container.
  Note that changing the child visibility of a widget does not queue a resize on the widget. Most of the time, the size of
  a widget is computed from all visible children, whether or not they are mapped. If this is not the case, the container
  can queue a resize itself.
  This function is only useful for container implementations and never should be called by an application.
  
  widget :     a GtkWidget
  is_visible : if TRUE, widget should be mapped along with its parent.
  

==== :SetColormap ====
'':SetColormap(self @ [[#T|T]], colormap @ [[..:..:Gtk:Gdk:Colormap#T|Gtk.Gdk.Colormap.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the colormap for the widget to the given value. Widget must not have been previously realized. This probably should
  only be used from an init() function (i.e. from the constructor for the widget).
  
  widget :   a GtkWidget
  colormap : a colormap
  

==== :SetCompositeName ====
'':SetCompositeName(self @ [[#T|T]], name @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets a widgets composite name. The widget must be a composite child of its parent; see gtk_widget_push_composite_child
  ().
  
  widget : a GtkWidget.
  name :   the name to set
  

==== :SetDirection ====
'':SetDirection(self @ [[#T|T]], dir @ [[..:..:Gtk:Gtk:TextDirection#T|Gtk.Gtk.TextDirection.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the reading direction on a particular widget. This direction controls the primary direction for widgets containing
  text, and also the direction in which the children of a container are packed. The ability to set the direction is
  present in order so that correct localization into languages with right-to-left reading directions can be done.
  Generally, applications will let the default reading direction present, except for containers where the containers are
  arranged in an order that is explicitely visual rather than logical (such as buttons for text justification).
  If the direction is set to GTK_TEXT_DIR_NONE, then the value set by gtk_widget_set_default_direction() will be used.
  
  widget : a GtkWidget
  dir :    the new direction
  

==== :SetDoubleBuffered ====
'':SetDoubleBuffered(self @ [[#T|T]], double_buffered @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Widgets are double buffered by default; you can use this function to turn off the buffering. "Double buffered" simply
  means that gdk_window_begin_paint_region() and gdk_window_end_paint() are called automatically around expose events sent
  to the widget. gdk_window_begin_paint() diverts all drawing to a widget's window to an offscreen buffer, and
  gdk_window_end_paint() draws the buffer to the screen. The result is that users see the window update in one smooth
  step, and don't see individual graphics primitives being rendered.
  In very simple terms, double buffered widgets don't flicker, so you would only use this function to turn off double
  buffering if you had special needs and really knew what you were doing.
  Note: if you turn off double-buffering, you have to handle expose events, since even the clearing to the background
  color or pixmap will not happen automatically (as it is done in gdk_window_begin_paint()).
  
  widget :          a GtkWidget
  double_buffered : TRUE to double-buffer a widget
  

==== :SetEvents ====
'':SetEvents(self @ [[#T|T]], events @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the event mask (see GdkEventMask) for a widget. The event mask determines which events a widget will receive. Keep
  in mind that different widgets have different default event masks, and by changing the event mask you may disrupt a
  widget's functionality, so be careful. This function must be called while a widget is unrealized. Consider
  gtk_widget_add_events() for widgets that are already realized, or if you want to preserve the existing event mask. This
  function can't be used with GTK_NO_WINDOW widgets; to get events on those widgets, place them inside a GtkEventBox and
  receive events on the event box.
  
  widget : a GtkWidget
  events : event mask
  

==== :SetExtensionEvents ====
'':SetExtensionEvents(self @ [[#T|T]], mode @ [[..:..:Gtk:Gdk:ExtensionMode#T|Gtk.Gdk.ExtensionMode.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the extension events mask to mode. See GdkExtensionMode and gdk_input_set_extension_events().
  
  widget : a GtkWidget
  mode :   bitfield of extension events to receive
  

==== :SetHasTooltip ====
'':SetHasTooltip(self @ [[#T|T]], has_tooltip @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the has-tooltip property on widget to has_tooltip. See GtkWidget:has-tooltip for more information.
  
  widget :      a GtkWidget
  has_tooltip : whether or not widget has a tooltip.
  

==== :SetName ====
'':SetName(self @ [[#T|T]], name @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Widgets can be named, which allows you to refer to them from a gtkrc file. You can apply a style to widgets with a
  particular name in the gtkrc file. See the documentation for gtkrc files (on the same page as the docs for GtkRcStyle).
  Note that widget names are separated by periods in paths (see gtk_widget_path()), so names with embedded periods may
  cause confusion.
  
  widget : a GtkWidget
  name :   name for the widget
  

==== :SetNoShowAll ====
'':SetNoShowAll(self @ [[#T|T]], no_show_all @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the "no-show-all" property, which determines whether calls to gtk_widget_show_all() and gtk_widget_hide_all() will
  affect this widget.
  This is mostly for use in constructing widget hierarchies with externally controlled visibility, see GtkUIManager.
  
  widget :      a GtkWidget
  no_show_all : the new value for the "no-show-all" property
  

==== :SetParent ====
'':SetParent(self @ [[#T|T]], parent @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is useful only when implementing subclasses of GtkContainer. Sets the container as the parent of widget,
  and takes care of some details such as updating the state and style of the child to reflect its new location. The
  opposite function is gtk_widget_unparent().
  
  widget : a GtkWidget
  parent : parent container
  

==== :SetParentWindow ====
'':SetParentWindow(self @ [[#T|T]], parent_window @ [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets a non default parent window for widget.
  
  widget :        a GtkWidget.
  parent_window : the new parent window.
  

==== :SetRedrawOnAllocate ====
'':SetRedrawOnAllocate(self @ [[#T|T]], redraw_on_allocate @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the entire widget is queued for drawing when its size allocation changes. By default, this setting is TRUE
  and the entire widget is redrawn on every size change. If your widget leaves the upper left unchanged when made bigger,
  turning this setting off will improve performance.
  Note that for NO_WINDOW widgets setting this flag to FALSE turns off all allocation on resizing: the widget will not
  even redraw if its position changes; this is to allow containers that don't draw anything to avoid excess invalidations.
  If you set this flag on a NO_WINDOW widget that does draw on widget->window, you are responsible for invalidating both
  the old and new allocation of the widget when the widget is moved and responsible for invalidating regions newly when
  the widget increases size.
  
  widget :             a GtkWidget
  redraw_on_allocate : if TRUE, the entire widget will be redrawn when it is allocated to a new size. Otherwise, only the
                       new portion of the widget will be redrawn.
  

==== :SetScrollAdjustments ====
'':SetScrollAdjustments(self @ [[#T|T]], hadjustment @ [[..:..:Gtk:Gtk:Adjustment#T|Gtk.Gtk.Adjustment.T]], vadjustment @ [[..:..:Gtk:Gtk:Adjustment#T|Gtk.Gtk.Adjustment.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  For widgets that support scrolling, sets the scroll adjustments and returns TRUE. For widgets that don't support
  scrolling, does nothing and returns FALSE. Widgets that don't support scrolling can be scrolled by placing them in a
  GtkViewport, which does support scrolling.
  
  widget :      a GtkWidget
  hadjustment : an adjustment for horizontal scrolling, or NULL
  vadjustment : an adjustment for vertical scrolling, or NULL
  Returns :     TRUE if the widget supports scrolling
  

==== :SetSensitive ====
'':SetSensitive(self @ [[#T|T]], sensitive @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the sensitivity of a widget. A widget is sensitive if the user can interact with it. Insensitive widgets are
  "grayed out" and the user can't interact with them. Insensitive widgets are known as "inactive", "disabled", or
  "ghosted" in some other toolkits.
  
  widget :    a GtkWidget
  sensitive : TRUE to make the widget sensitive
  

==== :SetSizeRequest ====
'':SetSizeRequest(self @ [[#T|T]], width @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], height @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the minimum size of a widget; that is, the widget's size request will be width by height. You can use this function
  to force a widget to be either larger or smaller than it normally would be.
  In most cases, gtk_window_set_default_size() is a better choice for toplevel windows than this function; setting the
  default size will still allow users to shrink the window. Setting the size request will force them to leave the window
  at least as large as the size request. When dealing with window sizes, gtk_window_set_geometry_hints() can be a useful
  function as well.
  Note the inherent danger of setting any fixed size - themes, translations into other languages, different fonts, and
  user action can all change the appropriate size for a given widget. So, it's basically impossible to hardcode a size
  that will always be correct.
  The size request of a widget is the smallest size a widget can accept while still functioning well and drawing itself
  correctly. However in some strange cases a widget may be allocated less than its requested size, and in many cases a
  widget may be allocated more space than it requested.
  If the size request in a given direction is -1 (unset), then the "natural" size request of the widget will be used
  instead.
  Widgets can't actually be allocated a size less than 1 by 1, but you can pass 0,0 to this function to mean "as small as
  possible."
  
  widget : a GtkWidget
  width :  width widget should request, or -1 to unset
  height : height widget should request, or -1 to unset
  

==== :SetState ====
'':SetState(self @ [[#T|T]], state @ [[..:..:Gtk:Gtk:StateType#T|Gtk.Gtk.StateType.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function is for use in widget implementations. Sets the state of a widget (insensitive, prelighted, etc.) Usually
  you should set the state using wrapper functions such as gtk_widget_set_sensitive().
  
  widget : a GtkWidget
  state :  new state for widget
  

==== :SetStyle ====
'':SetStyle(self @ [[#T|T]], style @ [[..:..:Gtk:Gtk:Style#T|Gtk.Gtk.Style.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the GtkStyle for a widget (widget->style). You probably don't want to use this function; it interacts badly with
  themes, because themes work by replacing the GtkStyle. Instead, use gtk_widget_modify_style().
  
  widget : a GtkWidget
  style :  a GtkStyle, or NULL to remove the effect of a previous gtk_widget_set_style() and go back to the default style
  

==== :SetTooltipMarkup ====
'':SetTooltipMarkup(self @ [[#T|T]], markup @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets markup as the contents of the tooltip, which is marked up with the Pango text markup language.
  This function will take care of setting GtkWidget:has-tooltip to TRUE and of the default handler for the GtkWidget::
  query-tooltip signal.
  See also the GtkWidget:tooltip-markup property and gtk_tooltip_set_markup().
  
  widget : a GtkWidget
  markup : the contents of the tooltip for widget, or NULL
  

==== :SetTooltipText ====
'':SetTooltipText(self @ [[#T|T]], text @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets text as the contents of the tooltip. This function will take care of setting GtkWidget:has-tooltip to TRUE and of
  the default handler for the GtkWidget::query-tooltip signal.
  See also the GtkWidget:tooltip-text property and gtk_tooltip_set_text().
  
  widget : a GtkWidget
  text :   the contents of the tooltip for widget
  

==== :SetTooltipWindow ====
'':SetTooltipWindow(self @ [[#T|T]], custom_window @ [[..:..:Gtk:Gtk:Window#T|Gtk.Gtk.Window.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Replaces the default, usually yellow, window used for displaying tooltips with custom_window. GTK+ will take care of
  showing and hiding custom_window at the right moment, to behave likewise as the default tooltip window. If custom_window
  is NULL, the default tooltip window will be used.
  
  widget :        a GtkWidget
  custom_window : a GtkWindow, or NULL
  

==== :SetUposition ====
'':SetUposition(self @ [[#T|T]], x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_widget_set_uposition is deprecated and should not be used in newly-written code.

==== :SetUsize ====
'':SetUsize(self @ [[#T|T]], width @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], height @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_widget_set_usize is deprecated and should not be used in newly-written code. Use gtk_widget_set_size_request()
  instead.

==== New ====
''New(type : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]], first_property_name : [[..:..:Std:String#T|Std.String.T]], __etc__ : [[..:..:Std:Object#T|Std.Object.T]]) : [[# T| T]]''

  This is a convenience function for creating a widget and setting its properties in one go. For example you might write:
  gtk_widget_new (GTK_TYPE_LABEL, "label", "Hello World", "xalign", 0.0, NULL) to create a left-aligned label. Equivalent
  to g_object_new(), but returns a widget so you don't have to cast the object yourself.
  
  type :                type ID of the widget to create
  first_property_name : name of first property to set
  ... :                 value of first property, followed by more properties, NULL-terminated
  Returns :             a new GtkWidget of type widget_type
  

==== SetDefaultDirection ====
''SetDefaultDirection(dir : [[..:..:Gtk:Gtk:TextDirection#T|Gtk.Gtk.TextDirection.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default reading direction for widgets where the direction has not been explicitly set by
  gtk_widget_set_direction().
  
  dir : the new default direction. This cannot be GTK_TEXT_DIR_NONE.
  

==== SetDefaultColormap ====
''SetDefaultColormap(colormap : [[..:..:Gtk:Gdk:Colormap#T|Gtk.Gdk.Colormap.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default colormap to use when creating widgets. gtk_widget_push_colormap() is a better function to use if you
  only want to affect a few widgets, rather than all widgets.
  
  colormap : a GdkColormap
  

==== PushCompositeChild ====
''PushCompositeChild() : [[..:..:Std:Object#T|Std.Object.T]]''

  Makes all newly-created widgets as composite children until the corresponding gtk_widget_pop_composite_child() call.
  A composite child is a child that's an implementation detail of the container it's inside and should not be visible to
  people using the container. Composite children aren't treated differently by GTK (but see gtk_container_foreach() vs.
  gtk_container_forall()), but e.g. GUI builders might want to treat them in a different way.
  Here is a simple example:
    gtk_widget_push_composite_child ();
    scrolled_window->hscrollbar = gtk_hscrollbar_new (hadjustment);
    gtk_widget_set_composite_name (scrolled_window->hscrollbar, "hscrollbar");
    gtk_widget_pop_composite_child ();
    gtk_widget_set_parent (scrolled_window->hscrollbar,
                           GTK_WIDGET (scrolled_window));
    g_object_ref (scrolled_window->hscrollbar);

==== PushColormap ====
''PushColormap(cmap : [[..:..:Gtk:Gdk:Colormap#T|Gtk.Gdk.Colormap.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Pushes cmap onto a global stack of colormaps; the topmost colormap on the stack will be used to create all widgets.
  Remove cmap with gtk_widget_pop_colormap(). There's little reason to use this function.
  
  cmap : a GdkColormap
  

==== PopCompositeChild ====
''PopCompositeChild() : [[..:..:Std:Object#T|Std.Object.T]]''

  Cancels the effect of a previous call to gtk_widget_push_composite_child().

==== PopColormap ====
''PopColormap() : [[..:..:Std:Object#T|Std.Object.T]]''

  Removes a colormap pushed with gtk_widget_push_colormap().

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== GetDefaultVisual ====
''GetDefaultVisual() : [[..:..:Gtk:Gdk:Visual#T|Gtk.Gdk.Visual.T]]''

  Obtains the visual of the default colormap. Not really useful; used to be useful before gdk_colormap_get_visual()
  existed.
  
  Returns : visual of the default colormap
  

==== GetDefaultStyle ====
''GetDefaultStyle() : [[..:..:Gtk:Gtk:Style#T|Gtk.Gtk.Style.T]]''

  Returns the default style used by all widgets initially.
  
  Returns : the default style. This GtkStyle object is owned by GTK+ and should not be modified or freed.
  

==== GetDefaultDirection ====
''GetDefaultDirection() : [[..:..:Gtk:Gtk:TextDirection#T|Gtk.Gtk.TextDirection.T]]''

  Obtains the current default reading direction. See gtk_widget_set_default_direction().
  
  Returns : the current default direction.
  

==== GetDefaultColormap ====
''GetDefaultColormap() : [[..:..:Gtk:Gdk:Colormap#T|Gtk.Gdk.Colormap.T]]''

  Obtains the default colormap used to create widgets.
  
  Returns : default widget colormap
  

==== ClassListStyleProperties ====
''ClassListStyleProperties(klass : [[..:..:Std:Object#T|Std.Object.T]], n_properties : [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Returns all style properties of a widget class.
  
  klass :        a GtkWidgetClass
  n_properties : location to return the number of style properties found
  Returns :      an newly allocated array of GParamSpec*. The array must be freed with g_free().
  

==== ClassInstallStylePropertyParser ====
''ClassInstallStylePropertyParser(klass : [[..:..:Std:Object#T|Std.Object.T]], pspec : [[..:..:Std:Object#T|Std.Object.T]], parser : [[..:..:Std:Function#T|Std.Function.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Installs a style property on a widget class.
  
  klass :  a GtkWidgetClass
  pspec :  the GParamSpec for the style property
  parser : the parser for the style property
  

==== ClassInstallStyleProperty ====
''ClassInstallStyleProperty(klass : [[..:..:Std:Object#T|Std.Object.T]], pspec : [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Installs a style property on a widget class. The parser for the style property is determined by the value type of pspec.
  
  klass : a GtkWidgetClass
  pspec : the GParamSpec for the property
  

==== ClassFindStyleProperty ====
''ClassFindStyleProperty(klass : [[..:..:Std:Object#T|Std.Object.T]], property_name : [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Finds a style property of a widget class by name.
  
  klass :         a GtkWidgetClass
  property_name : the name of the style property to find
  Returns :       the GParamSpec of the style property or NULL if class has no style property with that name.
  

