====== Entry ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  The GtkEntry widget is a single line text entry widget. A fairly large set of key bindings are supported by default. If the entered text is longer than the allocation of the widget, the widget will scroll so that the cursor position is visible.
  

==== :TextIndexToLayoutIndex ====
'':TextIndexToLayoutIndex(self @ [[#T|T]], text_index @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Converts from a position in the entry's PangoLayout (returned by gtk_entry_get_layout()) to a position in the entry contents (returned by gtk_entry_get_text()).
  
  entry :      a GtkEntry
  text_index : byte index into the entry contents
  Returns :    byte index into the entry layout text
  

==== :SetWidthChars ====
'':SetWidthChars(self @ [[#T|T]], n_chars @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Changes the size request of the entry to be about the right size for n_chars characters. Note that it changes the size request, the size can still be affected by how you pack the widget into containers. If n_chars is -1, the size reverts to the default entry size.
  
  entry :   a GtkEntry
  n_chars : width in chars
  

==== :SetVisibility ====
'':SetVisibility(self @ [[#T|T]], visible @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the contents of the entry are visible or not. When visibility is set to FALSE, characters are displayed as the invisible char, and will also appear that way when the text in the entry widget is copied elsewhere.
  The default invisible char is the asterisk '*', but it can be changed with gtk_entry_set_invisible_char().
  
  entry :   a GtkEntry
  visible : TRUE if the contents of the entry are displayed as plaintext
  

==== :Text ====
'':Text(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Sets the text in the widget to the given value, replacing the current contents.
  
  entry : a GtkEntry
  text :  the new text
  
  === Warning ===
  gtk_entry_append_text is deprecated and should not be used in newly-written code. gtk_entry_append_text() is deprecated and should not be used in newly-written code. Use gtk_editable_insert_text() instead.
  === Warning ===
  gtk_entry_prepend_text is deprecated and should not be used in newly-written code. gtk_entry_prepend_text() is deprecated and should not be used in newly-written code. Use gtk_editable_insert_text() instead.
  Retrieves the contents of the entry widget. See also gtk_editable_get_chars().
  
  entry :   a GtkEntry
  Returns : a pointer to the contents of the widget as a string. This string points to internally allocated storage in the widget and must not be freed, modified or stored.
  

==== :Editable ====
'':Editable(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  === Warning ===
  gtk_entry_set_editable is deprecated and should not be used in newly-written code. Use gtk_editable_set_editable() instead.

==== :Visible ====
'':Visible(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :OverwriteMode ====
'':OverwriteMode(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :InDrag ====
'':InDrag(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :TextLength ====
'':TextLength(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :TextMaxLength ====
'':TextMaxLength(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :TextArea ====
'':TextArea(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''


==== :ImContext ====
'':ImContext(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:IMContext#T|Gtk.Gtk.IMContext.T]]''


==== :PopupMenu ====
'':PopupMenu(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :CurrentPos ====
'':CurrentPos(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :SelectionBound ====
'':SelectionBound(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :CachedLayout ====
'':CachedLayout(self @ [[#T|T]]) : [[..:..:Gtk:Pango:Layout#T|Gtk.Pango.Layout.T]]''


==== :CacheIncludesPreedit ====
'':CacheIncludesPreedit(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :NeedImReset ====
'':NeedImReset(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HasFrame ====
'':HasFrame(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the value set by gtk_entry_set_has_frame().
  
  entry :   a GtkEntry
  Returns : whether the entry has a beveled frame
  
  Sets whether the entry has a beveled frame around it.
  
  entry :   a GtkEntry
  setting : new value
  

==== :ActivatesDefault ====
'':ActivatesDefault(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Retrieves the value set by gtk_entry_set_activates_default().
  
  entry :   a GtkEntry
  Returns : TRUE if the entry will activate the default widget
  
  If setting is TRUE, pressing Enter in the entry will activate the default widget for the window containing the entry. This usually means that the dialog box containing the entry will be closed, since the default widget is usually one of the dialog buttons.
  (For experts: if setting is TRUE, the entry calls gtk_window_activate_default() on the window containing the entry, in the default handler for the "activate" signal.)
  
  entry :   a GtkEntry
  setting : TRUE to activate window's default widget on Enter keypress
  

==== :CursorVisible ====
'':CursorVisible(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :InClick ====
'':InClick(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :IsCellRenderer ====
'':IsCellRenderer(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :EditingCanceled ====
'':EditingCanceled(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :MouseCursorObscured ====
'':MouseCursorObscured(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :SelectWords ====
'':SelectWords(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :SelectLines ====
'':SelectLines(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ResolvedDir ====
'':ResolvedDir(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :TruncateMultiline ====
'':TruncateMultiline(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Button ====
'':Button(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :BlinkTimeout ====
'':BlinkTimeout(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :RecomputeIdle ====
'':RecomputeIdle(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ScrollOffset ====
'':ScrollOffset(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Ascent ====
'':Ascent(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Descent ====
'':Descent(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :TextSize ====
'':TextSize(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :NBytes ====
'':NBytes(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :PreeditLength ====
'':PreeditLength(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :PreeditCursor ====
'':PreeditCursor(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :DndPosition ====
'':DndPosition(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :DragStartX ====
'':DragStartX(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :DragStartY ====
'':DragStartY(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :InvisibleChar ====
'':InvisibleChar(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the character to use in place of the actual text when gtk_entry_set_visibility() has been called to set text visibility to FALSE. i.e. this is the character used in "password mode" to show the user how many characters have been typed. The default invisible char is an asterisk ('*'). If you set the invisible char to 0, then the user will get no feedback at all; there will be no text on the screen as they type.
  
  entry : a GtkEntry
  ch :    a Unicode character
  
  Retrieves the character displayed in place of the real characters for entries with visibility set to false. See gtk_entry_set_invisible_char().
  
  entry :   a GtkEntry
  Returns : the current invisible char, or 0, if the entry does not show invisible text at all.
  

==== :WidthChars ====
'':WidthChars(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the value set by gtk_entry_set_width_chars().
  
  entry :   a GtkEntry
  Returns : number of chars to request space for, or negative if unset
  
  Changes the size request of the entry to be about the right size for n_chars characters. Note that it changes the size request, the size can still be affected by how you pack the widget into containers. If n_chars is -1, the size reverts to the default entry size.
  
  entry :   a GtkEntry
  n_chars : width in chars
  

==== :AppendText ====
'':AppendText(self @ [[#T|T]], text @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_entry_append_text is deprecated and should not be used in newly-written code. gtk_entry_append_text() is deprecated and should not be used in newly-written code. Use gtk_editable_insert_text() instead.

==== :GetActivatesDefault ====
'':GetActivatesDefault(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Retrieves the value set by gtk_entry_set_activates_default().
  
  entry :   a GtkEntry
  Returns : TRUE if the entry will activate the default widget
  

==== :GetAlignment ====
'':GetAlignment(self @ [[#T|T]]) : [[..:..:Std:Real#T|Std.Real.T]]''

  Gets the value set by gtk_entry_set_alignment().
  
  entry :   a GtkEntry
  Returns : the alignment
  

==== :GetCompletion ====
'':GetCompletion(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:EntryCompletion#T|Gtk.Gtk.EntryCompletion.T]]''

  Returns the auxiliary completion object currently in use by entry.
  
  entry :   A GtkEntry
  Returns : The auxiliary completion object currently in use by entry.
  

==== :GetCursorHadjustment ====
'':GetCursorHadjustment(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Adjustment#T|Gtk.Gtk.Adjustment.T]]''

  Retrieves the horizontal cursor adjustment for the entry. See gtk_entry_set_cursor_hadjustment().
  
  entry :   a GtkEntry
  Returns : the horizontal cursor adjustment, or NULL if none has been set.
  

==== :GetHasFrame ====
'':GetHasFrame(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets the value set by gtk_entry_set_has_frame().
  
  entry :   a GtkEntry
  Returns : whether the entry has a beveled frame
  

==== :GetInnerBorder ====
'':GetInnerBorder(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Border#T|Gtk.Gtk.Border.T]]''

  This function returns the entry's "inner-border" property. See gtk_entry_set_inner_border() for more information.
  
  entry :   a GtkEntry
  Returns : the entry's GtkBorder, or NULL if none was set.
  

==== :GetInvisibleChar ====
'':GetInvisibleChar(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Retrieves the character displayed in place of the real characters for entries with visibility set to false. See gtk_entry_set_invisible_char().
  
  entry :   a GtkEntry
  Returns : the current invisible char, or 0, if the entry does not show invisible text at all.
  

==== :GetLayout ====
'':GetLayout(self @ [[#T|T]]) : [[..:..:Gtk:Pango:Layout#T|Gtk.Pango.Layout.T]]''

  Gets the PangoLayout used to display the entry. The layout is useful to e.g. convert text positions to pixel positions, in combination with gtk_entry_get_layout_offsets(). The returned layout is owned by the entry and must not be modified or freed by the caller.
  Keep in mind that the layout text may contain a preedit string, so gtk_entry_layout_index_to_text_index() and gtk_entry_text_index_to_layout_index() are needed to convert byte indices in the layout to byte indices in the entry contents.
  
  entry :   a GtkEntry
  Returns : the PangoLayout for this entry
  

==== :GetLayoutOffsets ====
'':GetLayoutOffsets(self @ [[#T|T]], x @ [[..:..:Std:Object#T|Std.Object.T]], y @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Obtains the position of the PangoLayout used to render text in the entry, in widget coordinates. Useful if you want to line up the text in an entry with some other text, e.g. when using the entry to implement editable cells in a sheet widget.
  Also useful to convert mouse events into coordinates inside the PangoLayout, e.g. to take some action if some part of the entry text is clicked.
  Note that as the user scrolls around in the entry the offsets will change; you'll need to connect to the "notify::scroll-offset" signal to track this. Remember when using the PangoLayout functions you need to convert to and from pixels using PANGO_PIXELS() or PANGO_SCALE.
  Keep in mind that the layout text may contain a preedit string, so gtk_entry_layout_index_to_text_index() and gtk_entry_text_index_to_layout_index() are needed to convert byte indices in the layout to byte indices in the entry contents.
  
  entry : a GtkEntry
  x :     location to store X offset of layout, or NULL
  y :     location to store Y offset of layout, or NULL
  

==== :GetMaxLength ====
'':GetMaxLength(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Retrieves the maximum allowed length of the text in entry. See gtk_entry_set_max_length().
  
  entry :   a GtkEntry
  Returns : the maximum allowed number of characters in GtkEntry, or 0 if there is no maximum.
  

==== :GetText ====
'':GetText(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Retrieves the contents of the entry widget. See also gtk_editable_get_chars().
  
  entry :   a GtkEntry
  Returns : a pointer to the contents of the widget as a string. This string points to internally allocated storage in the widget and must not be freed, modified or stored.
  

==== :GetVisibility ====
'':GetVisibility(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Retrieves whether the text in entry is visible. See gtk_entry_set_visibility().
  
  entry :   a GtkEntry
  Returns : TRUE if the text is currently visible
  

==== :GetWidthChars ====
'':GetWidthChars(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the value set by gtk_entry_set_width_chars().
  
  entry :   a GtkEntry
  Returns : number of chars to request space for, or negative if unset
  

==== :LayoutIndexToTextIndex ====
'':LayoutIndexToTextIndex(self @ [[#T|T]], layout_index @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Converts from a position in the entry contents (returned by gtk_entry_get_text()) to a position in the entry's PangoLayout (returned by gtk_entry_get_layout(), with text retrieved via pango_layout_get_text()).
  
  entry :        a GtkEntry
  layout_index : byte index into the entry layout text
  Returns :      byte index into the entry contents
  

==== :PrependText ====
'':PrependText(self @ [[#T|T]], text @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_entry_prepend_text is deprecated and should not be used in newly-written code. gtk_entry_prepend_text() is deprecated and should not be used in newly-written code. Use gtk_editable_insert_text() instead.

==== :SelectRegion ====
'':SelectRegion(self @ [[#T|T]], start @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], end @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_entry_select_region is deprecated and should not be used in newly-written code. Use gtk_editable_select_region() instead.

==== :SetActivatesDefault ====
'':SetActivatesDefault(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  If setting is TRUE, pressing Enter in the entry will activate the default widget for the window containing the entry. This usually means that the dialog box containing the entry will be closed, since the default widget is usually one of the dialog buttons.
  (For experts: if setting is TRUE, the entry calls gtk_window_activate_default() on the window containing the entry, in the default handler for the "activate" signal.)
  
  entry :   a GtkEntry
  setting : TRUE to activate window's default widget on Enter keypress
  

==== :SetAlignment ====
'':SetAlignment(self @ [[#T|T]], xalign @ [[..:..:Std:Real#T|Std.Real.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the alignment for the contents of the entry. This controls the horizontal positioning of the contents when the displayed text is shorter than the width of the entry.
  
  entry :  a GtkEntry
  xalign : The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts
  

==== :SetCompletion ====
'':SetCompletion(self @ [[#T|T]], completion @ [[..:..:Gtk:Gtk:EntryCompletion#T|Gtk.Gtk.EntryCompletion.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets completion to be the auxiliary completion object to use with entry. All further configuration of the completion mechanism is done on completion using the GtkEntryCompletion API. Completion is disabled if completion is set to NULL.
  
  entry :      A GtkEntry
  completion : The GtkEntryCompletion or NULL
  

==== :SetCursorHadjustment ====
'':SetCursorHadjustment(self @ [[#T|T]], adjustment @ [[..:..:Gtk:Gtk:Adjustment#T|Gtk.Gtk.Adjustment.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Hooks up an adjustment to the cursor position in an entry, so that when the cursor is moved, the adjustment is scrolled to show that position. See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining the adjustment.
  The adjustment has to be in pixel units and in the same coordinate system as the entry.
  
  entry :      a GtkEntry
  adjustment : an adjustment which should be adjusted when the cursor is moved, or NULL
  

==== :SetEditable ====
'':SetEditable(self @ [[#T|T]], editable @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_entry_set_editable is deprecated and should not be used in newly-written code. Use gtk_editable_set_editable() instead.

==== :SetHasFrame ====
'':SetHasFrame(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the entry has a beveled frame around it.
  
  entry :   a GtkEntry
  setting : new value
  

==== :SetInnerBorder ====
'':SetInnerBorder(self @ [[#T|T]], border @ [[..:..:Gtk:Gtk:Border#T|Gtk.Gtk.Border.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets entry's inner-border property to border, or clears it if NULL is passed. The inner-border is the area around the entry's text, but inside its frame.
  If set, this property overrides the inner-border style property. Overriding the style-provided border is useful when you want to do in-place editing of some text in a canvas or list widget, where pixel-exact positioning of the entry is important.
  
  entry :  a GtkEntry
  border : a GtkBorder, or NULL
  

==== :SetInvisibleChar ====
'':SetInvisibleChar(self @ [[#T|T]], ch @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the character to use in place of the actual text when gtk_entry_set_visibility() has been called to set text visibility to FALSE. i.e. this is the character used in "password mode" to show the user how many characters have been typed. The default invisible char is an asterisk ('*'). If you set the invisible char to 0, then the user will get no feedback at all; there will be no text on the screen as they type.
  
  entry : a GtkEntry
  ch :    a Unicode character
  

==== :SetMaxLength ====
'':SetMaxLength(self @ [[#T|T]], max @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the maximum allowed length of the contents of the widget. If the current contents are longer than the given length, then they will be truncated to fit.
  
  entry : a GtkEntry
  max :   the maximum length of the entry, or 0 for no maximum. (other than the maximum length of entries.) The value passed in will be clamped to the range 0-65536.
  

==== :SetPosition ====
'':SetPosition(self @ [[#T|T]], position @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_entry_set_position is deprecated and should not be used in newly-written code. Use gtk_editable_set_position() instead.

==== :SetText ====
'':SetText(self @ [[#T|T]], text @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the text in the widget to the given value, replacing the current contents.
  
  entry : a GtkEntry
  text :  the new text
  

==== New ====
''New() : [[# T| T]]''

  Creates a new entry.
  
  Returns : a new GtkEntry.
  

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== NewWithMaxLength ====
''NewWithMaxLength(max : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[# T| T]]''

  === Warning ===
  gtk_entry_new_with_max_length is deprecated and should not be used in newly-written code.

