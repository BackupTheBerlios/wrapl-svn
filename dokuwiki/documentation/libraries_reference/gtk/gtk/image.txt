====== Image ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Misc#T|Gtk.Gtk.Misc.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  The GtkImage widget displays an image. Various kinds of object can be displayed as an image; most
  typically, you would load a GdkPixbuf ("pixel buffer") from a file, and then display that. There's a
  convenience function to do this, gtk_image_new_from_file(), used as follows:
    GtkWidget *image;
    image = gtk_image_new_from_file ("myfile.png");
  If the file isn't loaded successfully, the image will contain a "broken image" icon similar to that
  used in many web browsers. If you want to handle errors in loading the file yourself, for example by
  displaying an error message, then load the image with gdk_pixbuf_new_from_file(), then create the
  GtkImage with gtk_image_new_from_pixbuf().
  The image file may contain an animation, if so the GtkImage will display an animation
  (GdkPixbufAnimation) instead of a static image.
  GtkImage is a subclass of GtkMisc, which implies that you can align it (center, left, right) and add
  padding to it, using GtkMisc methods.
  GtkImage is a "no window" widget (has no GdkWindow of its own), so by default does not receive
  events. If you want to receive events on the image, such as button clicks, place the image inside a
  GtkEventBox, then connect to the event signals on the event box.
  Example 9.&#160;Handling button press events on a GtkImage.
    static gboolean
    button_press_callback (GtkWidget      *event_box,
                           GdkEventButton *event,
                           gpointer        data)
    {
      g_print ("Event box clicked at coordinates %f,%f\n",
               event->x, event->y);
  
      /* Returning TRUE means we handled the event, so the signal
       * emission should be stopped (don't call any further
       * callbacks that may be connected). Return FALSE
       * to continue invoking callbacks.
       */
      return TRUE;
    }
  
    static GtkWidget*
    create_image (void)
    {
      GtkWidget *image;
      GtkWidget *event_box;
  
      image = gtk_image_new_from_file ("myfile.png");
  
      event_box = gtk_event_box_new ();
  
      gtk_container_add (GTK_CONTAINER (event_box), image);
  
      g_signal_connect (G_OBJECT (event_box),
                        "button_press_event",
                        G_CALLBACK (button_press_callback),
                        image);
  
      return image;
    }
  
  When handling events on the event box, keep in mind that coordinates in the image may be different
  from event box coordinates due to the alignment and padding settings on the image (see GtkMisc). The
  simplest way to solve this is to set the alignment to 0.0 (left/top), and set the padding to zero.
  Then the origin of the image will be the same as the origin of the event box.
  Sometimes an application will want to avoid depending on external data files, such as image files.
  GTK+ comes with a program to avoid this, called gdk-pixbuf-csource. This program allows you to
  convert an image into a C variable declaration, which can then be loaded into a GdkPixbuf using
  gdk_pixbuf_new_from_inline().
  

==== :SetPixelSize ====
'':SetPixelSize(self @ [[#T|T]], pixel_size @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the pixel size to use for named icons. If the pixel size is set to a value != -1, it is used instead of the icon
  size set by gtk_image_set_from_icon_name().
  
  image :      a GtkImage
  pixel_size : the new pixel size
  

==== :SetFromStock ====
'':SetFromStock(self @ [[#T|T]], stock_id @ [[..:..:Std:String#T|Std.String.T]], size @ [[..:..:Gtk:Gtk:IconSize#T|Gtk.Gtk.IconSize.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  See gtk_image_new_from_stock() for details.
  
  image :    a GtkImage
  stock_id : a stock icon name
  size :     a stock icon size
  

==== :SetFromPixmap ====
'':SetFromPixmap(self @ [[#T|T]], pixmap @ [[..:..:Gtk:Gdk:Pixmap#T|Gtk.Gdk.Pixmap.T]], mask @ [[..:..:Gtk:Gdk:Bitmap#T|Gtk.Gdk.Bitmap.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  See gtk_image_new_from_pixmap() for details.
  
  image :  a GtkImage
  pixmap : a GdkPixmap or NULL
  mask :   a GdkBitmap or NULL
  

==== :SetFromPixbuf ====
'':SetFromPixbuf(self @ [[#T|T]], pixbuf @ [[..:..:Gtk:Gdk:Pixbuf#T|Gtk.Gdk.Pixbuf.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  See gtk_image_new_from_pixbuf() for details.
  
  image :  a GtkImage
  pixbuf : a GdkPixbuf or NULL
  

==== :SetFromImage ====
'':SetFromImage(self @ [[#T|T]], gdk_image @ [[..:..:Gtk:Gdk:Image#T|Gtk.Gdk.Image.T]], mask @ [[..:..:Gtk:Gdk:Bitmap#T|Gtk.Gdk.Bitmap.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  See gtk_image_new_from_image() for details.
  
  image :     a GtkImage
  gdk_image : a GdkImage or NULL
  mask :      a GdkBitmap or NULL
  

==== :SetFromIconSet ====
'':SetFromIconSet(self @ [[#T|T]], icon_set @ [[..:..:Gtk:Gtk:IconSet#T|Gtk.Gtk.IconSet.T]], size @ [[..:..:Gtk:Gtk:IconSize#T|Gtk.Gtk.IconSize.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  See gtk_image_new_from_icon_set() for details.
  
  image :    a GtkImage
  icon_set : a GtkIconSet
  size :     a stock icon size
  

==== :SetFromIconName ====
'':SetFromIconName(self @ [[#T|T]], icon_name @ [[..:..:Std:String#T|Std.String.T]], size @ [[..:..:Gtk:Gtk:IconSize#T|Gtk.Gtk.IconSize.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  See gtk_image_new_from_icon_name() for details.
  
  image :     a GtkImage
  icon_name : an icon name
  size :      an icon size
  

==== :SetFromFile ====
'':SetFromFile(self @ [[#T|T]], filename @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  See gtk_image_new_from_file() for details.
  
  image :    a GtkImage
  filename : a filename or NULL
  

==== :SetFromAnimation ====
'':SetFromAnimation(self @ [[#T|T]], animation @ [[..:..:Gtk:Gdk:PixbufAnimation#T|Gtk.Gdk.PixbufAnimation.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Causes the GtkImage to display the given animation (or display nothing, if you set the animation to NULL).
  
  image :     a GtkImage
  animation : the GdkPixbufAnimation
  

==== :Set ====
'':Set(self @ [[#T|T]], val @ [[..:..:Gtk:Gdk:Image#T|Gtk.Gdk.Image.T]], mask @ [[..:..:Gtk:Gdk:Bitmap#T|Gtk.Gdk.Bitmap.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_image_set is deprecated and should not be used in newly-written code.

==== :StorageType ====
'':StorageType(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImageType#T|Gtk.Gtk.ImageType.T]]''

  Gets the type of representation being used by the GtkImage to store image data. If the GtkImage has no image data, the
  return value will be GTK_IMAGE_EMPTY.
  
  image :   a GtkImage
  Returns : image representation being used
  

==== :Pixmap ====
'':Pixmap(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImagePixmapData#T|Gtk.Gtk.ImagePixmapData.T]]''


==== :Image ====
'':Image(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImageImageData#T|Gtk.Gtk.ImageImageData.T]]''


==== :Pixbuf ====
'':Pixbuf(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImagePixbufData#T|Gtk.Gtk.ImagePixbufData.T]]''


==== :Stock ====
'':Stock(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImageStockData#T|Gtk.Gtk.ImageStockData.T]]''


==== :IconSet ====
'':IconSet(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImageIconSetData#T|Gtk.Gtk.ImageIconSetData.T]]''


==== :Anim ====
'':Anim(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImageAnimationData#T|Gtk.Gtk.ImageAnimationData.T]]''


==== :Name ====
'':Name(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImageIconNameData#T|Gtk.Gtk.ImageIconNameData.T]]''


==== :Mask ====
'':Mask(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Bitmap#T|Gtk.Gdk.Bitmap.T]]''


==== :IconSize ====
'':IconSize(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:IconSize#T|Gtk.Gtk.IconSize.T]]''


==== :Clear ====
'':Clear(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Resets the image to be empty.
  
  image : a GtkImage
  

==== :Get ====
'':Get(self @ [[#T|T]], val @ [[..:..:Std:Object#T|Std.Object.T]], mask @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_image_get is deprecated and should not be used in newly-written code.

==== :GetAnimation ====
'':GetAnimation(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:PixbufAnimation#T|Gtk.Gdk.PixbufAnimation.T]]''

  Gets the GdkPixbufAnimation being displayed by the GtkImage. The storage type of the image must be GTK_IMAGE_EMPTY or
  GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()). The caller of this function does not own a reference to the
  returned animation.
  
  image :   a GtkImage
  Returns : the displayed animation, or NULL if the image is empty
  

==== :GetIconName ====
'':GetIconName(self @ [[#T|T]], icon_name @ [[..:..:Std:List#T|Std.List.T]], size @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the icon name and size being displayed by the GtkImage. The storage type of the image must be GTK_IMAGE_EMPTY or
  GTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type()). The returned string is owned by the GtkImage and should not be
  freed.
  
  image :     a GtkImage
  icon_name : place to store an icon name
  size :      place to store an icon size
  

==== :GetIconSet ====
'':GetIconSet(self @ [[#T|T]], icon_set @ [[..:..:Std:Object#T|Std.Object.T]], size @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the icon set and size being displayed by the GtkImage. The storage type of the image must be GTK_IMAGE_EMPTY or
  GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type()).
  
  image :    a GtkImage
  icon_set : location to store a GtkIconSet
  size :     location to store a stock icon size
  

==== :GetImage ====
'':GetImage(self @ [[#T|T]], gdk_image @ [[..:..:Std:Object#T|Std.Object.T]], mask @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the GdkImage and mask being displayed by the GtkImage. The storage type of the image must be GTK_IMAGE_EMPTY or
  GTK_IMAGE_IMAGE (see gtk_image_get_storage_type()). The caller of this function does not own a reference to the returned
  image and mask.
  
  image :     a GtkImage
  gdk_image : return location for a GtkImage
  mask :      return location for a GdkBitmap
  

==== :GetPixbuf ====
'':GetPixbuf(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Pixbuf#T|Gtk.Gdk.Pixbuf.T]]''

  Gets the GdkPixbuf being displayed by the GtkImage. The storage type of the image must be GTK_IMAGE_EMPTY or
  GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()). The caller of this function does not own a reference to the
  returned pixbuf.
  
  image :   a GtkImage
  Returns : the displayed pixbuf, or NULL if the image is empty
  

==== :GetPixelSize ====
'':GetPixelSize(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the pixel size used for named icons.
  
  image :   a GtkImage
  Returns : the pixel size used for named icons.
  

==== :GetPixmap ====
'':GetPixmap(self @ [[#T|T]], pixmap @ [[..:..:Std:Object#T|Std.Object.T]], mask @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the pixmap and mask being displayed by the GtkImage. The storage type of the image must be GTK_IMAGE_EMPTY or
  GTK_IMAGE_PIXMAP (see gtk_image_get_storage_type()). The caller of this function does not own a reference to the
  returned pixmap and mask.
  
  image :  a GtkImage
  pixmap : location to store the pixmap, or NULL
  mask :   location to store the mask, or NULL
  

==== :GetStock ====
'':GetStock(self @ [[#T|T]], stock_id @ [[..:..:Std:List#T|Std.List.T]], size @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the stock icon name and size being displayed by the GtkImage. The storage type of the image must be GTK_IMAGE_EMPTY
  or GTK_IMAGE_STOCK (see gtk_image_get_storage_type()). The returned string is owned by the GtkImage and should not be
  freed.
  
  image :    a GtkImage
  stock_id : place to store a stock icon name
  size :     place to store a stock icon size
  

==== :GetStorageType ====
'':GetStorageType(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:ImageType#T|Gtk.Gtk.ImageType.T]]''

  Gets the type of representation being used by the GtkImage to store image data. If the GtkImage has no image data, the
  return value will be GTK_IMAGE_EMPTY.
  
  image :   a GtkImage
  Returns : image representation being used
  

==== New ====
''New() : [[# T| T]]''

  Creates a new empty GtkImage widget.
  
  Returns : a newly created GtkImage widget.
  

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== NewFromStock ====
''NewFromStock(stock_id : [[..:..:Std:String#T|Std.String.T]], size : [[..:..:Gtk:Gtk:IconSize#T|Gtk.Gtk.IconSize.T]]) : [[# T| T]]''

  Creates a GtkImage displaying a stock icon. Sample stock icon names are GTK_STOCK_OPEN, GTK_STOCK_QUIT. Sample stock
  sizes are GTK_ICON_SIZE_MENU, GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock icon name isn't known, the image will be empty.
  You can register your own stock icon names, see gtk_icon_factory_add_default() and gtk_icon_factory_add().
  
  stock_id : a stock icon name
  size :     a stock icon size
  Returns :  a new GtkImage displaying the stock icon
  

==== NewFromPixmap ====
''NewFromPixmap(pixmap : [[..:..:Gtk:Gdk:Pixmap#T|Gtk.Gdk.Pixmap.T]], mask : [[..:..:Gtk:Gdk:Bitmap#T|Gtk.Gdk.Bitmap.T]]) : [[# T| T]]''

  Creates a GtkImage widget displaying pixmap with a mask. A GdkPixmap is a server-side image buffer in the pixel format
  of the current display. The GtkImage does not assume a reference to the pixmap or mask; you still need to unref them if
  you own references. GtkImage will add its own reference rather than adopting yours.
  
  pixmap :  a GdkPixmap, or NULL
  mask :    a GdkBitmap, or NULL
  Returns : a new GtkImage
  

==== NewFromPixbuf ====
''NewFromPixbuf(pixbuf : [[..:..:Gtk:Gdk:Pixbuf#T|Gtk.Gdk.Pixbuf.T]]) : [[# T| T]]''

  Creates a new GtkImage displaying pixbuf. The GtkImage does not assume a reference to the pixbuf; you still need to
  unref it if you own references. GtkImage will add its own reference rather than adopting yours.
  Note that this function just creates an GtkImage from the pixbuf. The GtkImage created will not react to state changes.
  Should you want that, you should use gtk_image_new_from_icon_set().
  
  pixbuf :  a GdkPixbuf, or NULL
  Returns : a new GtkImage
  

==== NewFromImage ====
''NewFromImage(image : [[..:..:Gtk:Gdk:Image#T|Gtk.Gdk.Image.T]], mask : [[..:..:Gtk:Gdk:Bitmap#T|Gtk.Gdk.Bitmap.T]]) : [[# T| T]]''

  Creates a GtkImage widget displaying a image with a mask. A GdkImage is a client-side image buffer in the pixel format
  of the current display. The GtkImage does not assume a reference to the image or mask; you still need to unref them if
  you own references. GtkImage will add its own reference rather than adopting yours.
  
  image :   a GdkImage, or NULL
  mask :    a GdkBitmap, or NULL
  Returns : a new GtkImage
  

==== NewFromIconSet ====
''NewFromIconSet(icon_set : [[..:..:Gtk:Gtk:IconSet#T|Gtk.Gtk.IconSet.T]], size : [[..:..:Gtk:Gtk:IconSize#T|Gtk.Gtk.IconSize.T]]) : [[# T| T]]''

  Creates a GtkImage displaying an icon set. Sample stock sizes are GTK_ICON_SIZE_MENU, GTK_ICON_SIZE_SMALL_TOOLBAR.
  Instead of using this function, usually it's better to create a GtkIconFactory, put your icon sets in the icon factory,
  add the icon factory to the list of default factories with gtk_icon_factory_add_default(), and then use
  gtk_image_new_from_stock(). This will allow themes to override the icon you ship with your application.
  The GtkImage does not assume a reference to the icon set; you still need to unref it if you own references. GtkImage
  will add its own reference rather than adopting yours.
  
  icon_set : a GtkIconSet
  size :     a stock icon size
  Returns :  a new GtkImage
  

==== NewFromIconName ====
''NewFromIconName(icon_name : [[..:..:Std:String#T|Std.String.T]], size : [[..:..:Gtk:Gtk:IconSize#T|Gtk.Gtk.IconSize.T]]) : [[# T| T]]''

  Creates a GtkImage displaying an icon from the current icon theme. If the icon name isn't known, a "broken image" icon
  will be displayed instead. If the current icon theme is changed, the icon will be updated appropriately.
  
  icon_name : an icon name
  size :      a stock icon size
  Returns :   a new GtkImage displaying the themed icon
  

==== NewFromFile ====
''NewFromFile(filename : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

  Creates a new GtkImage displaying the file filename. If the file isn't found or can't be loaded, the resulting GtkImage
  will display a "broken image" icon. This function never returns NULL, it always returns a valid GtkImage widget.
  If the file contains an animation, the image will contain an animation.
  If you need to detect failures to load the file, use gdk_pixbuf_new_from_file() to load the file yourself, then create
  the GtkImage from the pixbuf. (Or for animations, use gdk_pixbuf_animation_new_from_file()).
  The storage type (gtk_image_get_storage_type()) of the returned image is not defined, it will be whatever is appropriate
  for displaying the file.
  
  filename : a filename
  Returns :  a new GtkImage
  

==== NewFromAnimation ====
''NewFromAnimation(animation : [[..:..:Gtk:Gdk:PixbufAnimation#T|Gtk.Gdk.PixbufAnimation.T]]) : [[# T| T]]''

  Creates a GtkImage displaying the given animation. The GtkImage does not assume a reference to the animation; you still
  need to unref it if you own references. GtkImage will add its own reference rather than adopting yours.
  Note that the animation frames are shown using a timeout with G_PRIORITY_DEFAULT. When using animations to indicate
  busyness, keep in mind that the animation will only be shown if the main loop is not busy with something that has a
  higher priority.
  
  animation : an animation
  Returns :   a new GtkImage widget
  

