====== TreeModelSort ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  The GtkTreeModelSort is a model which implements the GtkTreeSortable interface. It does not hold any data itself, but rather is created with a child model and proxies its data. It has identical column types to this child model, and the changes in the child are propagated. The primary purpose of this model is to provide a way to sort a different model without modifying it. Note that the sort function used by GtkTreeModelSort is not guaranteed to be stable.
  The use of this is best demonstrated through an example. In the following sample code we create two GtkTreeView widgets each with a view of the same data. As the model is wrapped here by a GtkTreeModelSort, the two GtkTreeViews can each sort their view of the data without affecting the other. By contrast, if we simply put the same model in each widget, then sorting the first would sort the second.
  Example 18.&#160;Using a GtkTreeModelSort
  {
    GtkTreeView *tree_view1;
    GtkTreeView *tree_view2;
    GtkTreeModel *sort_model1;
    GtkTreeModel *sort_model2;
    GtkTreeModel *child_model;
  
    /* get the child model */
    child_model = get_my_model ();
  
    /* Create the first tree */
    sort_model1 = gtk_tree_model_sort_new_with_model (child_model);
    tree_view1 = gtk_tree_view_new_with_model (sort_model1);
  
    /* Create the second tree */
    sort_model2 = gtk_tree_model_sort_new_with_model (child_model);
    tree_view2 = gtk_tree_view_new_with_model (sort_model2);
  
    /* Now we can sort the two models independently */
    gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),
                                          COLUMN_1, GTK_SORT_ASCENDING);
    gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),
                                          COLUMN_1, GTK_SORT_DESCENDING);
  }
  
  To demonstrate how to access the underlying child model from the sort model, the next example will be a callback for the GtkTreeSelection "changed" signal. In this callback, we get a string from COLUMN_1 of the model. We then modify the string, find the same selected row on the child model, and change the row there.
  Example 19.&#160;Accessing the child model of in a selection changed callback
  void
  selection_changed (GtkTreeSelection *selection, gpointer data)
  {
    GtkTreeModel *sort_model = NULL;
    GtkTreeModel *child_model;
    GtkTreeIter sort_iter;
    GtkTreeIter child_iter;
    char *some_data = NULL;
    char *modified_data;
  
    /* Get the current selected row and the model. */
    if (! gtk_tree_selection_get_selected (selection,
                                           &sort_model,
                                           &sort_iter))
      return;
  
  
    /* Look up the current value on the selected row and get a new value
     * to change it to.
     */
    gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &sort_iter,
                        COLUMN_1, &some_data,
                        -1);
  
    modified_data = change_the_data (some_data);
    g_free (some_data);
  
    /* Get an iterator on the child model, instead of the sort model. */
    gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),
                                                    &child_iter,
                                                    &sort_iter);
  
    /* Get the child model and change the value of the row.  In this
     * example, the child model is a GtkListStore.  It could be any other
     * type of model, though.
     */
    child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));
    gtk_list_store_set (GTK_LIST_STORE (child_model), &child_iter,
                        COLUMN_1, &modified_data,
                        -1);
    g_free (modified_data);
  }
  
  

==== :ResetDefaultSortFunc ====
'':ResetDefaultSortFunc(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This resets the default sort function to be in the 'unsorted' state. That is, it is in the same order as the child model. It will re-sort the model to be in the same order as the child model only if the GtkTreeModelSort is in 'unsorted' state.
  
  tree_model_sort : A GtkTreeModelSort
  

==== :IterIsValid ====
'':IterIsValid(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  === Warning ===
  This function is slow. Only use it for debugging and/or testing purposes.

==== :Root ====
'':Root(self @ [[#T|T]]) : [[..:..:Std:Address#T|Std.Address.T]]''


==== :Stamp ====
'':Stamp(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ChildFlags ====
'':ChildFlags(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ChildModel ====
'':ChildModel(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TreeModel#T|Gtk.Gtk.TreeModel.T]]''


==== :ZeroRefCount ====
'':ZeroRefCount(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :SortList ====
'':SortList(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :SortColumnId ====
'':SortColumnId(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Order ====
'':Order(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:SortType#T|Gtk.Gtk.SortType.T]]''


==== :DefaultSortFunc ====
'':DefaultSortFunc(self @ [[#T|T]]) : [[..:..:Std:Function#T|Std.Function.T]]''

  This resets the default sort function to be in the 'unsorted' state. That is, it is in the same order as the child model. It will re-sort the model to be in the same order as the child model only if the GtkTreeModelSort is in 'unsorted' state.
  
  tree_model_sort : A GtkTreeModelSort
  

==== :DefaultSortData ====
'':DefaultSortData(self @ [[#T|T]]) : [[..:..:Std:Address#T|Std.Address.T]]''


==== :DefaultSortDestroy ====
'':DefaultSortDestroy(self @ [[#T|T]]) : [[..:..:Std:Function#T|Std.Function.T]]''


==== :ChangedId ====
'':ChangedId(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :InsertedId ====
'':InsertedId(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HasChildToggledId ====
'':HasChildToggledId(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :DeletedId ====
'':DeletedId(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ReorderedId ====
'':ReorderedId(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ClearCache ====
'':ClearCache(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  This function should almost never be called. It clears the tree_model_sort of any cached iterators that haven't been reffed with gtk_tree_model_ref_node(). This might be useful if the child model being sorted is static (and doesn't change often) and there has been a lot of unreffed access to nodes. As a side effect of this function, all unreffed iters will be invalid.
  
  tree_model_sort : A GtkTreeModelSort
  

==== :ConvertChildIterToIter ====
'':ConvertChildIterToIter(self @ [[#T|T]], sort_iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], child_iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets sort_iter to point to the row in tree_model_sort that corresponds to the row pointed at by child_iter.
  
  tree_model_sort : A GtkTreeModelSort
  sort_iter :       An uninitialized GtkTreeIter.
  child_iter :      A valid GtkTreeIter pointing to a row on the child model
  

==== :ConvertChildPathToPath ====
'':ConvertChildPathToPath(self @ [[#T|T]], child_path @ [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]]) : [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]]''

  Converts child_path to a path relative to tree_model_sort. That is, child_path points to a path in the child model. The returned path will point to the same row in the sorted model. If child_path isn't a valid path on the child model, then NULL is returned.
  
  tree_model_sort : A GtkTreeModelSort
  child_path :      A GtkTreePath to convert
  Returns :         A newly allocated GtkTreePath, or NULL
  

==== :ConvertIterToChildIter ====
'':ConvertIterToChildIter(self @ [[#T|T]], child_iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]], sorted_iter @ [[..:..:Gtk:Gtk:TreeIter#T|Gtk.Gtk.TreeIter.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets child_iter to point to the row pointed to by sorted_iter.
  
  tree_model_sort : A GtkTreeModelSort
  child_iter :      An uninitialized GtkTreeIter
  sorted_iter :     A valid GtkTreeIter pointing to a row on tree_model_sort.
  

==== :ConvertPathToChildPath ====
'':ConvertPathToChildPath(self @ [[#T|T]], sorted_path @ [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]]) : [[..:..:Gtk:Gtk:TreePath#T|Gtk.Gtk.TreePath.T]]''

  Converts sorted_path to a path on the child model of tree_model_sort. That is, sorted_path points to a location in tree_model_sort. The returned path will point to the same location in the model not being sorted. If sorted_path does not point to a location in the child model, NULL is returned.
  
  tree_model_sort : A GtkTreeModelSort
  sorted_path :     A GtkTreePath to convert
  Returns :         A newly allocated GtkTreePath, or NULL
  

==== :GetModel ====
'':GetModel(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TreeModel#T|Gtk.Gtk.TreeModel.T]]''

  Returns the model the GtkTreeModelSort is sorting.
  
  tree_model : a GtkTreeModelSort
  Returns :    the "child model" being sorted
  

==== NewWithModel ====
''NewWithModel(child_model : [[..:..:Gtk:Gtk:TreeModel#T|Gtk.Gtk.TreeModel.T]]) : [[# T| T]]''

  Creates a new GtkTreeModel, with child_model as the child model.
  
  child_model : A GtkTreeModel
  Returns :     A new GtkTreeModel.
  

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


