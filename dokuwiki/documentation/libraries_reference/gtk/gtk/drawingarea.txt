====== DrawingArea ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

The GtkDrawingArea widget is used for creating custom user interface elements.
It's essentially a blank widget; you can draw on widget->window. After creating
a drawing area, the application may want to connect to:
    * Mouse and button press signals to respond to input from the user. (Use
      gtk_widget_add_events() to enable events you wish to receive.)
    * The "realize" signal to take any necessary actions when the widget is
      instantiated on a particular display. (Create GDK resources in response
      to this signal.)
    * The "configure_event" signal to take any necessary actions when the
      widget changes size.
    * The "expose_event" signal to handle redrawing the contents of the widget.
The following code portion demonstrates using a drawing area to display a
circle in the normal widget foreground color. Note that GDK automatically
clears the exposed area to the background color before sending the expose
event, and that drawing is implicitly clipped to the exposed area.
Example 44.&#160;Simple GtkDrawingArea usage.
gboolean
expose_event_callback (GtkWidget *widget, GdkEventExpose *event, gpointer data)
{
  gdk_draw_arc (widget->window,
                widget->style->fg_gc[GTK_WIDGET_STATE (widget)],
                TRUE,
                0, 0, widget->allocation.width, widget->allocation.height,
                0, 64 * 360);
  return TRUE;
}
[...]
  GtkWidget *drawing_area = gtk_drawing_area_new ();
  gtk_widget_set_size_request (drawing_area, 100, 100);
  g_signal_connect (G_OBJECT (drawing_area), "expose_event",
                    G_CALLBACK (expose_event_callback), NULL);
Expose events are normally delivered when a drawing area first comes onscreen,
or when it's covered by another window and then uncovered (exposed). You can
also force an expose event by adding to the "damage region" of the drawing
area's window; gtk_widget_queue_draw_area() and gdk_window_invalidate_rect()
are equally good ways to do this. You'll then get an expose event for the
invalid region.
The available routines for drawing are documented on the GDK_Drawing_Primitives
page. See also gdk_draw_pixbuf() for drawing a GdkPixbuf.
To receive mouse events on a drawing area, you will need to enable them with
gtk_widget_add_events(). To receive keyboard events, you will need to set the
GTK_CAN_FOCUS flag on the drawing area, and should probably draw some user-
visible indication that the drawing area is focused. Use the GTK_HAS_FOCUS()
macro in your expose event handler to decide whether to draw the focus
indicator. See gtk_paint_focus() for one way to draw focus.

==== :Size ====
'':Size(self @ [[#T|T]], width @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], height @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

**** Warning ****
gtk_drawing_area_size is deprecated and should not be used in newly-written
code.
(Use gtk_widget_set_size_request() instead.) Sets the size that the drawing
area will request in response to a "size_request" signal. The drawing area may
actually be allocated a size larger than this depending on how it is packed
within the enclosing containers.
darea :  a GtkDrawingArea.
width :  the width to request.
height : the height to request.
***** See Also *****
Sometimes GtkImage is a useful alternative to a drawing area. You can put a
GdkPixmap in the GtkImage and draw to the GdkPixmap, calling
gtk_widget_queue_draw() on the GtkImage when you want to refresh to the screen.

==== :DrawData ====
'':DrawData(self @ [[#T|T]]) : [[..:..:Std:Address#T|Std.Address.T]]''


==== New ====
''New() : [[# T| T]]''

Creates a new drawing area.
Returns : a new GtkDrawingArea

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


