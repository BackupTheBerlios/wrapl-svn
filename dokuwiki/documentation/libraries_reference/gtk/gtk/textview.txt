====== TextView ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Container#T|Gtk.Gtk.Container.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  You may wish to begin by reading the text widget conceptual overview which gives an overview of all
  the objects and data types related to the text widget and how they work together.
  

==== :WindowToBufferCoords ====
'':WindowToBufferCoords(self @ [[#T|T]], win @ [[..:..:Gtk:Gtk:TextWindowType#T|Gtk.Gtk.TextWindowType.T]], window_x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], window_y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], buffer_x @ [[..:..:Std:Object#T|Std.Object.T]], buffer_y @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Converts coordinates on the window identified by win to buffer coordinates, storing the result in (buffer_x,buffer_y).
  Note that you can't convert coordinates for a nonexisting window (see gtk_text_view_set_border_window_size()).
  
  text_view : a GtkTextView
  win :       a GtkTextWindowType except GTK_TEXT_WINDOW_PRIVATE
  window_x :  window x coordinate
  window_y :  window y coordinate
  buffer_x :  buffer x coordinate return location
  buffer_y :  buffer y coordinate return location
  

==== :StartsDisplayLine ====
'':StartsDisplayLine(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Determines whether iter is at the start of a display line. See gtk_text_view_forward_display_line() for an explanation
  of display lines vs. paragraphs.
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  Returns :   TRUE if iter begins a wrapped line
  

==== :SetWrapMode ====
'':SetWrapMode(self @ [[#T|T]], wrap_mode @ [[..:..:Gtk:Gtk:WrapMode#T|Gtk.Gtk.WrapMode.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the line wrapping for the view.
  
  text_view : a GtkTextView
  wrap_mode : a GtkWrapMode
  

==== :Layout ====
'':Layout(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :Buffer ====
'':Buffer(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextBuffer#T|Gtk.Gtk.TextBuffer.T]]''

  Creates a new GtkTextView widget displaying the buffer buffer. One buffer can be shared among many widgets. buffer may
  be NULL to create a default buffer, in which case this function is equivalent to gtk_text_view_new(). The text view adds
  its own reference count to the buffer; it does not take over an existing reference.
  
  buffer :  a GtkTextBuffer
  Returns : a new GtkTextView.
  
  Sets buffer as the buffer being displayed by text_view. The previous buffer displayed by the text view is unreferenced,
  and a reference is added to buffer. If you owned a reference to buffer before passing it to this function, you must
  remove that reference yourself; GtkTextView will not "adopt" it.
  
  text_view : a GtkTextView
  buffer :    a GtkTextBuffer
  
  Returns the GtkTextBuffer being displayed by this text view. The reference count on the buffer is not incremented; the
  caller of this function won't own a new reference.
  
  text_view : a GtkTextView
  Returns :   a GtkTextBuffer
  

==== :SelectionDragHandler ====
'':SelectionDragHandler(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ScrollTimeout ====
'':ScrollTimeout(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :PixelsAboveLines ====
'':PixelsAboveLines(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the default number of blank pixels above paragraphs in text_view. Tags in the buffer for text_view may override the
  defaults.
  
  text_view :          a GtkTextView
  pixels_above_lines : pixels above paragraphs
  
  Gets the default number of pixels to put above paragraphs.
  
  text_view : a GtkTextView
  Returns :   default number of pixels above paragraphs
  

==== :PixelsBelowLines ====
'':PixelsBelowLines(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the default number of pixels of blank space to put below paragraphs in text_view. May be overridden by tags applied
  to text_view's buffer.
  
  text_view :          a GtkTextView
  pixels_below_lines : pixels below paragraphs
  
  Gets the value set by gtk_text_view_set_pixels_below_lines().
  
  text_view : a GtkTextView
  Returns :   default number of blank pixels below paragraphs
  

==== :PixelsInsideWrap ====
'':PixelsInsideWrap(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the default number of pixels of blank space to leave between display/wrapped lines within a paragraph. May be
  overridden by tags in text_view's buffer.
  
  text_view :          a GtkTextView
  pixels_inside_wrap : default number of pixels between wrapped lines
  
  Gets the value set by gtk_text_view_set_pixels_inside_wrap().
  
  text_view : a GtkTextView
  Returns :   default number of pixels of blank space between wrapped lines
  

==== :WrapMode ====
'':WrapMode(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:WrapMode#T|Gtk.Gtk.WrapMode.T]]''

  Sets the line wrapping for the view.
  
  text_view : a GtkTextView
  wrap_mode : a GtkWrapMode
  
  Gets the line wrapping for the view.
  
  text_view : a GtkTextView
  Returns :   the line wrap setting
  

==== :Justify ====
'':Justify(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Justification#T|Gtk.Gtk.Justification.T]]''


==== :LeftMargin ====
'':LeftMargin(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the default left margin for text in text_view. Tags in the buffer may override the default.
  
  text_view :   a GtkTextView
  left_margin : left margin in pixels
  
  Gets the default left margin size of paragraphs in the text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  Returns :   left margin in pixels
  

==== :RightMargin ====
'':RightMargin(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the default right margin for text in the text view. Tags in the buffer may override the default.
  
  text_view :    a GtkTextView
  right_margin : right margin in pixels
  
  Gets the default right margin for text in text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  Returns :   right margin in pixels
  

==== :Indent ====
'':Indent(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the default indentation for paragraphs in text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  indent :    indentation in pixels
  
  Gets the default indentation of paragraphs in text_view. Tags in the view's buffer may override the default. The
  indentation may be negative.
  
  text_view : a GtkTextView
  Returns :   number of pixels of indentation
  

==== :Tabs ====
'':Tabs(self @ [[#T|T]]) : [[..:..:Gtk:Pango:TabArray#T|Gtk.Pango.TabArray.T]]''

  Sets the default tab stops for paragraphs in text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  tabs :      tabs as a PangoTabArray
  
  Gets the default tabs for text_view. Tags in the buffer may override the defaults. The returned array will be NULL if
  "standard" (8-space) tabs are used. Free the return value with pango_tab_array_free().
  
  text_view : a GtkTextView
  Returns :   copy of default tab array, or NULL if "standard" tabs are used; must be freed with pango_tab_array_free().
  

==== :Editable ====
'':Editable(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the default editability of the GtkTextView. You can override this default setting with tags in the buffer, using
  the "editable" attribute of tags.
  
  text_view : a GtkTextView
  setting :   whether it's editable
  
  Returns the default editability of the GtkTextView. Tags in the buffer may override this setting for some ranges of
  text.
  
  text_view : a GtkTextView
  Returns :   whether text is editable by default
  

==== :OverwriteMode ====
'':OverwriteMode(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :CursorVisible ====
'':CursorVisible(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Toggles whether the insertion point is displayed. A buffer with no editable text probably shouldn't have a visible
  cursor, so you may want to turn the cursor off.
  
  text_view : a GtkTextView
  setting :   whether to show the insertion cursor
  
  Find out whether the cursor is being displayed.
  
  text_view : a GtkTextView
  Returns :   whether the insertion mark is visible
  

==== :NeedImReset ====
'':NeedImReset(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :AcceptsTab ====
'':AcceptsTab(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the behavior of the text widget when the Tab key is pressed. If accepts_tab is TRUE, a tab character is inserted.
  If accepts_tab is FALSE the keyboard focus is moved to the next widget in the focus chain.
  
  text_view :   A GtkTextView
  accepts_tab : TRUE if pressing the Tab key should insert a tab character, FALSE, if pressing the Tab key should move the
                keyboard focus.
  
  Returns whether pressing the Tab key inserts a tab characters. gtk_text_view_set_accepts_tab().
  
  text_view : A GtkTextView
  Returns :   TRUE if pressing the Tab key inserts a tab character, FALSE if pressing the Tab key moves the keyboard
              focus.
  

==== :WidthChanged ====
'':WidthChanged(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :OnscreenValidated ====
'':OnscreenValidated(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :MouseCursorObscured ====
'':MouseCursorObscured(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :TextWindow ====
'':TextWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextWindow#T|Gtk.Gtk.TextWindow.T]]''


==== :LeftWindow ====
'':LeftWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextWindow#T|Gtk.Gtk.TextWindow.T]]''


==== :RightWindow ====
'':RightWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextWindow#T|Gtk.Gtk.TextWindow.T]]''


==== :TopWindow ====
'':TopWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextWindow#T|Gtk.Gtk.TextWindow.T]]''


==== :BottomWindow ====
'':BottomWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextWindow#T|Gtk.Gtk.TextWindow.T]]''


==== :Hadjustment ====
'':Hadjustment(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Adjustment#T|Gtk.Gtk.Adjustment.T]]''


==== :Vadjustment ====
'':Vadjustment(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Adjustment#T|Gtk.Gtk.Adjustment.T]]''


==== :Xoffset ====
'':Xoffset(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Yoffset ====
'':Yoffset(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Width ====
'':Width(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Height ====
'':Height(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :VirtualCursorX ====
'':VirtualCursorX(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :VirtualCursorY ====
'':VirtualCursorY(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :FirstParaMark ====
'':FirstParaMark(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextMark#T|Gtk.Gtk.TextMark.T]]''


==== :FirstParaPixels ====
'':FirstParaPixels(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :DndMark ====
'':DndMark(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextMark#T|Gtk.Gtk.TextMark.T]]''


==== :BlinkTimeout ====
'':BlinkTimeout(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :FirstValidateIdle ====
'':FirstValidateIdle(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :IncrementalValidateIdle ====
'':IncrementalValidateIdle(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ImContext ====
'':ImContext(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:IMContext#T|Gtk.Gtk.IMContext.T]]''


==== :PopupMenu ====
'':PopupMenu(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :DragStartX ====
'':DragStartX(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :DragStartY ====
'':DragStartY(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Children ====
'':Children(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :PendingScroll ====
'':PendingScroll(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextPendingScroll#T|Gtk.Gtk.TextPendingScroll.T]]''


==== :PendingPlaceCursorButton ====
'':PendingPlaceCursorButton(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :AddChildAtAnchor ====
'':AddChildAtAnchor(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], anchor @ [[..:..:Gtk:Gtk:TextChildAnchor#T|Gtk.Gtk.TextChildAnchor.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds a child widget in the text buffer, at the given anchor.
  
  text_view : a GtkTextView
  child :     a GtkWidget
  anchor :    a GtkTextChildAnchor in the GtkTextBuffer for text_view
  

==== :AddChildInWindow ====
'':AddChildInWindow(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], which_window @ [[..:..:Gtk:Gtk:TextWindowType#T|Gtk.Gtk.TextWindowType.T]], xpos @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], ypos @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds a child at fixed coordinates in one of the text widget's windows. The window must have nonzero size (see
  gtk_text_view_set_border_window_size()). Note that the child coordinates are given relative to the GdkWindow in
  question, and that these coordinates have no sane relationship to scrolling. When placing a child in
  GTK_TEXT_WINDOW_WIDGET, scrolling is irrelevant, the child floats above all scrollable areas. But when placing a child
  in one of the scrollable windows (border windows or text window), you'll need to compute the child's correct position in
  buffer coordinates any time scrolling occurs or buffer changes occur, and then call gtk_text_view_move_child() to update
  the child's position. Unfortunately there's no good way to detect that scrolling has occurred, using the current API; a
  possible hack would be to update all child positions when the scroll adjustments change or the text buffer changes. See
  bug 64518 on bugzilla.gnome.org for status of fixing this issue.
  
  text_view :    a GtkTextView
  child :        a GtkWidget
  which_window : which window the child should appear in
  xpos :         X position of child in window coordinates
  ypos :         Y position of child in window coordinates
  

==== :BackwardDisplayLine ====
'':BackwardDisplayLine(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Moves the given iter backward by one display (wrapped) line. A display line is different from a paragraph. Paragraphs
  are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a
  paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided
  differently for each view, since they depend on the view's width; paragraphs are the same in all views, since they
  depend on the contents of the GtkTextBuffer.
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  Returns :   TRUE if iter was moved and is not on the end iterator
  

==== :BackwardDisplayLineStart ====
'':BackwardDisplayLineStart(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Moves the given iter backward to the next display line start. A display line is different from a paragraph. Paragraphs
  are separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a
  paragraph. If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided
  differently for each view, since they depend on the view's width; paragraphs are the same in all views, since they
  depend on the contents of the GtkTextBuffer.
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  Returns :   TRUE if iter was moved and is not on the end iterator
  

==== :BufferToWindowCoords ====
'':BufferToWindowCoords(self @ [[#T|T]], win @ [[..:..:Gtk:Gtk:TextWindowType#T|Gtk.Gtk.TextWindowType.T]], buffer_x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], buffer_y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], window_x @ [[..:..:Std:Object#T|Std.Object.T]], window_y @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Converts coordinate (buffer_x, buffer_y) to coordinates for the window win, and stores the result in (window_x,
  window_y).
  Note that you can't convert coordinates for a nonexisting window (see gtk_text_view_set_border_window_size()).
  
  text_view : a GtkTextView
  win :       a GtkTextWindowType except GTK_TEXT_WINDOW_PRIVATE
  buffer_x :  buffer x coordinate
  buffer_y :  buffer y coordinate
  window_x :  window x coordinate return location
  window_y :  window y coordinate return location
  

==== :ForwardDisplayLine ====
'':ForwardDisplayLine(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Moves the given iter forward by one display (wrapped) line. A display line is different from a paragraph. Paragraphs are
  separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph.
  If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each
  view, since they depend on the view's width; paragraphs are the same in all views, since they depend on the contents of
  the GtkTextBuffer.
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  Returns :   TRUE if iter was moved and is not on the end iterator
  

==== :ForwardDisplayLineEnd ====
'':ForwardDisplayLineEnd(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Moves the given iter forward to the next display line end. A display line is different from a paragraph. Paragraphs are
  separated by newlines or other paragraph separator characters. Display lines are created by line-wrapping a paragraph.
  If wrapping is turned off, display lines and paragraphs will be the same. Display lines are divided differently for each
  view, since they depend on the view's width; paragraphs are the same in all views, since they depend on the contents of
  the GtkTextBuffer.
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  Returns :   TRUE if iter was moved and is not on the end iterator
  

==== :GetAcceptsTab ====
'':GetAcceptsTab(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether pressing the Tab key inserts a tab characters. gtk_text_view_set_accepts_tab().
  
  text_view : A GtkTextView
  Returns :   TRUE if pressing the Tab key inserts a tab character, FALSE if pressing the Tab key moves the keyboard
              focus.
  

==== :GetBorderWindowSize ====
'':GetBorderWindowSize(self @ [[#T|T]], type @ [[..:..:Gtk:Gtk:TextWindowType#T|Gtk.Gtk.TextWindowType.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the width of the specified border window. See gtk_text_view_set_border_window_size().
  
  text_view : a GtkTextView
  type :      window to return size from
  Returns :   width of window
  

==== :GetBuffer ====
'':GetBuffer(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextBuffer#T|Gtk.Gtk.TextBuffer.T]]''

  Returns the GtkTextBuffer being displayed by this text view. The reference count on the buffer is not incremented; the
  caller of this function won't own a new reference.
  
  text_view : a GtkTextView
  Returns :   a GtkTextBuffer
  

==== :GetCursorVisible ====
'':GetCursorVisible(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Find out whether the cursor is being displayed.
  
  text_view : a GtkTextView
  Returns :   whether the insertion mark is visible
  

==== :GetDefaultAttributes ====
'':GetDefaultAttributes(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:TextAttributes#T|Gtk.Gtk.TextAttributes.T]]''

  Obtains a copy of the default text attributes. These are the attributes used for text unless a tag overrides them. You'd
  typically pass the default attributes in to gtk_text_iter_get_attributes() in order to get the attributes in effect at a
  given text position.
  The return value is a copy owned by the caller of this function, and should be freed.
  
  text_view : a GtkTextView
  Returns :   a new GtkTextAttributes
  

==== :GetEditable ====
'':GetEditable(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns the default editability of the GtkTextView. Tags in the buffer may override this setting for some ranges of
  text.
  
  text_view : a GtkTextView
  Returns :   whether text is editable by default
  

==== :GetIndent ====
'':GetIndent(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the default indentation of paragraphs in text_view. Tags in the view's buffer may override the default. The
  indentation may be negative.
  
  text_view : a GtkTextView
  Returns :   number of pixels of indentation
  

==== :GetIterAtLocation ====
'':GetIterAtLocation(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]], x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Retrieves the iterator at buffer coordinates x and y. Buffer coordinates are coordinates for the entire buffer, not just
  the currently-displayed portion. If you have coordinates from an event, you have to convert those to buffer coordinates
  with gtk_text_view_window_to_buffer_coords().
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  x :         x position, in buffer coordinates
  y :         y position, in buffer coordinates
  

==== :GetIterAtPosition ====
'':GetIterAtPosition(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]], trailing @ [[..:..:Std:Object#T|Std.Object.T]], x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Retrieves the iterator pointing to the character at buffer coordinates x and y. Buffer coordinates are coordinates for
  the entire buffer, not just the currently-displayed portion. If you have coordinates from an event, you have to convert
  those to buffer coordinates with gtk_text_view_window_to_buffer_coords().
  Note that this is different from gtk_text_view_get_iter_at_location(), which returns cursor locations, i.e. positions
  between characters.
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  trailing :  location to store an integer indicating where in the grapheme the user clicked. It will either be zero, or
              the number of characters in the grapheme. 0 represents the trailing edge of the grapheme.
  x :         x position, in buffer coordinates
  y :         y position, in buffer coordinates
  

==== :GetIterLocation ====
'':GetIterLocation(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]], location @ [[..:..:Gtk:Gdk:Rectangle#T|Gtk.Gdk.Rectangle.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets a rectangle which roughly contains the character at iter. The rectangle position is in buffer coordinates; use
  gtk_text_view_buffer_to_window_coords() to convert these coordinates to coordinates for one of the windows in the text
  view.
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  location :  bounds of the character at iter
  

==== :GetJustification ====
'':GetJustification(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Justification#T|Gtk.Gtk.Justification.T]]''

  Gets the default justification of paragraphs in text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  Returns :   default justification
  

==== :GetLeftMargin ====
'':GetLeftMargin(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the default left margin size of paragraphs in the text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  Returns :   left margin in pixels
  

==== :GetLineAtY ====
'':GetLineAtY(self @ [[#T|T]], target_iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]], y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], line_top @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the GtkTextIter at the start of the line containing the coordinate y. y is in buffer coordinates, convert from
  window coordinates with gtk_text_view_window_to_buffer_coords(). If non-NULL, line_top will be filled with the
  coordinate of the top edge of the line.
  
  text_view :   a GtkTextView
  target_iter : a GtkTextIter
  y :           a y coordinate
  line_top :    return location for top coordinate of the line
  

==== :GetLineYrange ====
'':GetLineYrange(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]], y @ [[..:..:Std:Object#T|Std.Object.T]], height @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the y coordinate of the top of the line containing iter, and the height of the line. The coordinate is a buffer
  coordinate; convert to window coordinates with gtk_text_view_buffer_to_window_coords().
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  y :         return location for a y coordinate
  height :    return location for a height
  

==== :GetOverwrite ====
'':GetOverwrite(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the GtkTextView is in overwrite mode or not.
  
  text_view : a GtkTextView
  Returns :   whether text_view is in overwrite mode or not.
  

==== :GetPixelsAboveLines ====
'':GetPixelsAboveLines(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the default number of pixels to put above paragraphs.
  
  text_view : a GtkTextView
  Returns :   default number of pixels above paragraphs
  

==== :GetPixelsBelowLines ====
'':GetPixelsBelowLines(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the value set by gtk_text_view_set_pixels_below_lines().
  
  text_view : a GtkTextView
  Returns :   default number of blank pixels below paragraphs
  

==== :GetPixelsInsideWrap ====
'':GetPixelsInsideWrap(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the value set by gtk_text_view_set_pixels_inside_wrap().
  
  text_view : a GtkTextView
  Returns :   default number of pixels of blank space between wrapped lines
  

==== :GetRightMargin ====
'':GetRightMargin(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the default right margin for text in text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  Returns :   right margin in pixels
  

==== :GetTabs ====
'':GetTabs(self @ [[#T|T]]) : [[..:..:Gtk:Pango:TabArray#T|Gtk.Pango.TabArray.T]]''

  Gets the default tabs for text_view. Tags in the buffer may override the defaults. The returned array will be NULL if
  "standard" (8-space) tabs are used. Free the return value with pango_tab_array_free().
  
  text_view : a GtkTextView
  Returns :   copy of default tab array, or NULL if "standard" tabs are used; must be freed with pango_tab_array_free().
  

==== :GetVisibleRect ====
'':GetVisibleRect(self @ [[#T|T]], visible_rect @ [[..:..:Gtk:Gdk:Rectangle#T|Gtk.Gdk.Rectangle.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Fills visible_rect with the currently-visible region of the buffer, in buffer coordinates. Convert to window coordinates
  with gtk_text_view_buffer_to_window_coords().
  
  text_view :    a GtkTextView
  visible_rect : rectangle to fill
  

==== :GetWindow ====
'':GetWindow(self @ [[#T|T]], win @ [[..:..:Gtk:Gtk:TextWindowType#T|Gtk.Gtk.TextWindowType.T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''

  Retrieves the GdkWindow corresponding to an area of the text view; possible windows include the overall widget window,
  child windows on the left, right, top, bottom, and the window that displays the text buffer. Windows are NULL and
  nonexistent if their width or height is 0, and are nonexistent before the widget has been realized.
  
  text_view : a GtkTextView
  win :       window to get
  Returns :   a GdkWindow, or NULL
  

==== :GetWindowType ====
'':GetWindowType(self @ [[#T|T]], window @ [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]) : [[..:..:Gtk:Gtk:TextWindowType#T|Gtk.Gtk.TextWindowType.T]]''

  Usually used to find out which window an event corresponds to. If you connect to an event signal on text_view, this
  function should be called on event->window to see which window it was.
  
  text_view : a GtkTextView
  window :    a window type
  Returns :   the window type.
  

==== :GetWrapMode ====
'':GetWrapMode(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:WrapMode#T|Gtk.Gtk.WrapMode.T]]''

  Gets the line wrapping for the view.
  
  text_view : a GtkTextView
  Returns :   the line wrap setting
  

==== :MoveChild ====
'':MoveChild(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], xpos @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], ypos @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Updates the position of a child, as for gtk_text_view_add_child_in_window().
  
  text_view : a GtkTextView
  child :     child widget already added to the text view
  xpos :      new X position in window coordinates
  ypos :      new Y position in window coordinates
  

==== :MoveMarkOnscreen ====
'':MoveMarkOnscreen(self @ [[#T|T]], mark @ [[..:..:Gtk:Gtk:TextMark#T|Gtk.Gtk.TextMark.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Moves a mark within the buffer so that it's located within the currently-visible text area.
  
  text_view : a GtkTextView
  mark :      a GtkTextMark
  Returns :   TRUE if the mark moved (wasn't already onscreen)
  

==== :MoveVisually ====
'':MoveVisually(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]], count @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Move the iterator a given number of characters visually, treating it as the strong cursor position. If count is
  positive, then the new strong cursor position will be count positions to the right of the old cursor position. If count
  is negative then the new strong cursor position will be count positions to the left of the old cursor position.
  In the presence of bi-directional text, the correspondence between logical and visual order will depend on the direction
  of the current run, and there may be jumps when the cursor is moved off of the end of a run.
  
  text_view : a GtkTextView
  iter :      a GtkTextIter
  count :     number of characters to move (negative moves left, positive moves right)
  Returns :   TRUE if iter moved and is not on the end iterator
  

==== :PlaceCursorOnscreen ====
'':PlaceCursorOnscreen(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Moves the cursor to the currently visible region of the buffer, it it isn't there already.
  
  text_view : a GtkTextView
  Returns :   TRUE if the cursor had to be moved.
  

==== :ScrollMarkOnscreen ====
'':ScrollMarkOnscreen(self @ [[#T|T]], mark @ [[..:..:Gtk:Gtk:TextMark#T|Gtk.Gtk.TextMark.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Scrolls text_view the minimum distance such that mark is contained within the visible area of the widget.
  
  text_view : a GtkTextView
  mark :      a mark in the buffer for text_view
  

==== :ScrollToIter ====
'':ScrollToIter(self @ [[#T|T]], iter @ [[..:..:Gtk:Gtk:TextIter#T|Gtk.Gtk.TextIter.T]], within_margin @ [[..:..:Std:Real#T|Std.Real.T]], use_align @ [[..:..:Std:Symbol#T|Std.Symbol.T]], xalign @ [[..:..:Std:Real#T|Std.Real.T]], yalign @ [[..:..:Std:Real#T|Std.Real.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Scrolls text_view so that iter is on the screen in the position indicated by xalign and yalign. An alignment of 0.0
  indicates left or top, 1.0 indicates right or bottom, 0.5 means center. If use_align is FALSE, the text scrolls the
  minimal distance to get the mark onscreen, possibly not scrolling at all. The effective screen for purposes of this
  function is reduced by a margin of size within_margin.
  Note that this function uses the currently-computed height of the lines in the text buffer. Line heights are computed in
  an idle handler; so this function may not have the desired effect if it's called before the height computations. To
  avoid oddness, consider using gtk_text_view_scroll_to_mark() which saves a point to be scrolled to after line
  validation.
  
  text_view :     a GtkTextView
  iter :          a GtkTextIter
  within_margin : margin as a [0.0,0.5) fraction of screen size
  use_align :     whether to use alignment arguments (if FALSE, just get the mark onscreen)
  xalign :        horizontal alignment of mark within visible area
  yalign :        vertical alignment of mark within visible area
  Returns :       TRUE if scrolling occurred
  

==== :ScrollToMark ====
'':ScrollToMark(self @ [[#T|T]], mark @ [[..:..:Gtk:Gtk:TextMark#T|Gtk.Gtk.TextMark.T]], within_margin @ [[..:..:Std:Real#T|Std.Real.T]], use_align @ [[..:..:Std:Symbol#T|Std.Symbol.T]], xalign @ [[..:..:Std:Real#T|Std.Real.T]], yalign @ [[..:..:Std:Real#T|Std.Real.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Scrolls text_view so that mark is on the screen in the position indicated by xalign and yalign. An alignment of 0.0
  indicates left or top, 1.0 indicates right or bottom, 0.5 means center. If use_align is FALSE, the text scrolls the
  minimal distance to get the mark onscreen, possibly not scrolling at all. The effective screen for purposes of this
  function is reduced by a margin of size within_margin.
  
  text_view :     a GtkTextView
  mark :          a GtkTextMark
  within_margin : margin as a [0.0,0.5) fraction of screen size
  use_align :     whether to use alignment arguments (if FALSE, just get the mark onscreen)
  xalign :        horizontal alignment of mark within visible area
  yalign :        vertical alignment of mark within visible area
  

==== :SetAcceptsTab ====
'':SetAcceptsTab(self @ [[#T|T]], accepts_tab @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the behavior of the text widget when the Tab key is pressed. If accepts_tab is TRUE, a tab character is inserted.
  If accepts_tab is FALSE the keyboard focus is moved to the next widget in the focus chain.
  
  text_view :   A GtkTextView
  accepts_tab : TRUE if pressing the Tab key should insert a tab character, FALSE, if pressing the Tab key should move the
                keyboard focus.
  

==== :SetBorderWindowSize ====
'':SetBorderWindowSize(self @ [[#T|T]], type @ [[..:..:Gtk:Gtk:TextWindowType#T|Gtk.Gtk.TextWindowType.T]], size @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the width of GTK_TEXT_WINDOW_LEFT or GTK_TEXT_WINDOW_RIGHT, or the height of GTK_TEXT_WINDOW_TOP or
  GTK_TEXT_WINDOW_BOTTOM. Automatically destroys the corresponding window if the size is set to 0, and creates the window
  if the size is set to non-zero. This function can only be used for the "border windows," it doesn't work with
  GTK_TEXT_WINDOW_WIDGET, GTK_TEXT_WINDOW_TEXT, or GTK_TEXT_WINDOW_PRIVATE.
  
  text_view : a GtkTextView
  type :      window to affect
  size :      width or height of the window
  

==== :SetBuffer ====
'':SetBuffer(self @ [[#T|T]], buffer @ [[..:..:Gtk:Gtk:TextBuffer#T|Gtk.Gtk.TextBuffer.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets buffer as the buffer being displayed by text_view. The previous buffer displayed by the text view is unreferenced,
  and a reference is added to buffer. If you owned a reference to buffer before passing it to this function, you must
  remove that reference yourself; GtkTextView will not "adopt" it.
  
  text_view : a GtkTextView
  buffer :    a GtkTextBuffer
  

==== :SetCursorVisible ====
'':SetCursorVisible(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Toggles whether the insertion point is displayed. A buffer with no editable text probably shouldn't have a visible
  cursor, so you may want to turn the cursor off.
  
  text_view : a GtkTextView
  setting :   whether to show the insertion cursor
  

==== :SetEditable ====
'':SetEditable(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default editability of the GtkTextView. You can override this default setting with tags in the buffer, using
  the "editable" attribute of tags.
  
  text_view : a GtkTextView
  setting :   whether it's editable
  

==== :SetIndent ====
'':SetIndent(self @ [[#T|T]], indent @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default indentation for paragraphs in text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  indent :    indentation in pixels
  

==== :SetJustification ====
'':SetJustification(self @ [[#T|T]], justification @ [[..:..:Gtk:Gtk:Justification#T|Gtk.Gtk.Justification.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default justification of text in text_view. Tags in the view's buffer may override the default.
  
  text_view :     a GtkTextView
  justification : justification
  

==== :SetLeftMargin ====
'':SetLeftMargin(self @ [[#T|T]], left_margin @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default left margin for text in text_view. Tags in the buffer may override the default.
  
  text_view :   a GtkTextView
  left_margin : left margin in pixels
  

==== :SetOverwrite ====
'':SetOverwrite(self @ [[#T|T]], overwrite @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Changes the GtkTextView overwrite mode.
  
  text_view : a GtkTextView
  overwrite : TRUE to turn on overwrite mode, FALSE to turn it off
  

==== :SetPixelsAboveLines ====
'':SetPixelsAboveLines(self @ [[#T|T]], pixels_above_lines @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default number of blank pixels above paragraphs in text_view. Tags in the buffer for text_view may override the
  defaults.
  
  text_view :          a GtkTextView
  pixels_above_lines : pixels above paragraphs
  

==== :SetPixelsBelowLines ====
'':SetPixelsBelowLines(self @ [[#T|T]], pixels_below_lines @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default number of pixels of blank space to put below paragraphs in text_view. May be overridden by tags applied
  to text_view's buffer.
  
  text_view :          a GtkTextView
  pixels_below_lines : pixels below paragraphs
  

==== :SetPixelsInsideWrap ====
'':SetPixelsInsideWrap(self @ [[#T|T]], pixels_inside_wrap @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default number of pixels of blank space to leave between display/wrapped lines within a paragraph. May be
  overridden by tags in text_view's buffer.
  
  text_view :          a GtkTextView
  pixels_inside_wrap : default number of pixels between wrapped lines
  

==== :SetRightMargin ====
'':SetRightMargin(self @ [[#T|T]], right_margin @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default right margin for text in the text view. Tags in the buffer may override the default.
  
  text_view :    a GtkTextView
  right_margin : right margin in pixels
  

==== :SetTabs ====
'':SetTabs(self @ [[#T|T]], tabs @ [[..:..:Gtk:Pango:TabArray#T|Gtk.Pango.TabArray.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the default tab stops for paragraphs in text_view. Tags in the buffer may override the default.
  
  text_view : a GtkTextView
  tabs :      tabs as a PangoTabArray
  

==== New ====
''New() : [[# T| T]]''

  Creates a new GtkTextView. If you don't call gtk_text_view_set_buffer() before using the text view, an empty default
  buffer will be created for you. Get the buffer with gtk_text_view_get_buffer(). If you want to specify your own buffer,
  consider gtk_text_view_new_with_buffer().
  
  Returns : a new GtkTextView
  

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== NewWithBuffer ====
''NewWithBuffer(buffer : [[..:..:Gtk:Gtk:TextBuffer#T|Gtk.Gtk.TextBuffer.T]]) : [[# T| T]]''

  Creates a new GtkTextView widget displaying the buffer buffer. One buffer can be shared among many widgets. buffer may
  be NULL to create a default buffer, in which case this function is equivalent to gtk_text_view_new(). The text view adds
  its own reference count to the buffer; it does not take over an existing reference.
  
  buffer :  a GtkTextBuffer
  Returns : a new GtkTextView.
  

