====== Socket ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Container#T|Gtk.Gtk.Container.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  Together with GtkPlug, GtkSocket provides the ability to embed widgets from one process into another process in a fashion that is transparent to the user. One process creates a GtkSocket widget and, passes the that widget's window ID to the other process, which then creates a GtkPlug with that window ID. Any widgets contained in the GtkPlug then will appear inside the first applications window.
  The socket's window ID is obtained by using gtk_socket_get_id(). Before using this function, the socket must have been realized, and for hence, have been added to its parent.
  Example 49.&#160;Obtaining the window ID of a socket.
  GtkWidget *socket = gtk_socket_new ();
  gtk_widget_show (socket);
  gtk_container_add (GTK_CONTAINER (parent), socket);
  
  /* The following call is only necessary if one of
   * the ancestors of the socket is not yet visible.
   */
  gtk_widget_realize (socket);
  g_print ("The ID of the sockets window is %x\n",
           gtk_socket_get_id (socket));
  
  Note that if you pass the window ID of the socket to another process that will create a plug in the socket, you must make sure that the socket widget is not destroyed until that plug is created. Violating this rule will cause unpredictable consequences, the most likely consequence being that the plug will appear as a separate toplevel window. You can check if the plug has been created by examining the plug_window field of the GtkSocket structure. If this field is non-NULL, then the plug has been successfully created inside of the socket.
  When GTK+ is notified that the embedded window has been destroyed, then it will destroy the socket as well. You should always, therefore, be prepared for your sockets to be destroyed at any time when the main event loop is running. To prevent this from happening, you can connect to the "plug-removed" signal.
  The communication between a GtkSocket and a GtkPlug follows the XEmbed protocol. This protocol has also been implemented in other toolkits, e.g. Qt, allowing the same level of integration when embedding a Qt widget in GTK or vice versa.
  A socket can also be used to swallow arbitrary pre-existing top-level windows using gtk_socket_steal(), though the integration when this is done will not be as close as between a GtkPlug and a GtkSocket.
  === Note ===
  The GtkPlug and GtkSocket widgets are currently not available on all platforms supported by GTK+.
  

==== :Steal ====
'':Steal(self @ [[#T|T]], wid @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_socket_steal is deprecated and should not be used in newly-written code.

==== :GetId ====
'':GetId(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the window ID of a GtkSocket widget, which can then be used to create a client embedded inside the socket, for instance with gtk_plug_new().
  The GtkSocket must have already be added into a toplevel window before you can make this call.
  
  socket_ : a GtkSocket.
  Returns : the window ID for the socket
  

==== :RequestWidth ====
'':RequestWidth(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :RequestHeight ====
'':RequestHeight(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :CurrentWidth ====
'':CurrentWidth(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :CurrentHeight ====
'':CurrentHeight(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :PlugWindow ====
'':PlugWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''


==== :PlugWidget ====
'':PlugWidget(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :XembedVersion ====
'':XembedVersion(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :SameApp ====
'':SameApp(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :FocusIn ====
'':FocusIn(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HaveSize ====
'':HaveSize(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :NeedMap ====
'':NeedMap(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :IsMapped ====
'':IsMapped(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Active ====
'':Active(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :AccelGroup ====
'':AccelGroup(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:AccelGroup#T|Gtk.Gtk.AccelGroup.T]]''


==== :Toplevel ====
'':Toplevel(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :AddId ====
'':AddId(self @ [[#T|T]], window_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds an XEMBED client, such as a GtkPlug, to the GtkSocket. The client may be in the same process or in a different process.
  To embed a GtkPlug in a GtkSocket, you can either create the GtkPlug with gtk_plug_new (0), call gtk_plug_get_id() to get the window ID of the plug, and then pass that to the gtk_socket_add_id(), or you can call gtk_socket_get_id() to get the window ID for the socket, and call gtk_plug_new() passing in that ID.
  The GtkSocket must have already be added into a toplevel window before you can make this call.
  
  socket_ :   a GtkSocket
  window_id : the window ID of a client participating in the XEMBED protocol.
  

==== New ====
''New() : [[# T| T]]''

  Create a new empty GtkSocket.
  
  Returns : the new GtkSocket.
  

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


