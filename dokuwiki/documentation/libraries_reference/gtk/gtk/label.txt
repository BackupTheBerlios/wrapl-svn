====== Label ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Misc#T|Gtk.Gtk.Misc.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  The GtkLabel widget displays a small amount of text. As the name implies, most labels are used to
  label another widget such as a GtkButton, a GtkMenuItem, or a GtkOptionMenu.
  === Mnemonics ===
  Labels may contain mnemonics. Mnemonics are underlined characters in the label, used for keyboard
  navigation. Mnemonics are created by providing a string with an underscore before the mnemonic
  character, such as "_File", to the functions gtk_label_new_with_mnemonic() or
  gtk_label_set_text_with_mnemonic().
  Mnemonics automatically activate any activatable widget the label is inside, such as a GtkButton; if
  the label is not inside the mnemonic's target widget, you have to tell the label about the target
  using gtk_label_set_mnemonic_widget(). Here's a simple example where the label is inside a button:
    /* Pressing Alt+H will activate this button */
    button = gtk_button_new ();
    label = gtk_label_new_with_mnemonic ("_Hello");
    gtk_container_add (GTK_CONTAINER (button), label);
  There's a convenience function to create buttons with a mnemonic label already inside:
    /* Pressing Alt+H will activate this button */
    button = gtk_button_new_with_mnemonic ("_Hello");
  To create a mnemonic for a widget alongside the label, such as a GtkEntry, you have to point the
  label at the entry with gtk_label_set_mnemonic_widget():
    /* Pressing Alt+H will focus the entry */
    entry = gtk_entry_new ();
    label = gtk_label_new_with_mnemonic ("_Hello");
    gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);
  
  ----------------------------------------------------------------------------------------------------
  
  === Markup (styled text) ===
  To make it easy to format text in a label (changing colors, fonts, etc.), label text can be provided
  in a simple markup format. Here's how to create a label with a small font:
    label = gtk_label_new (NULL);
    gtk_label_set_markup (GTK_LABEL (label), "<small>Small text</small>");
  (See complete documentation of available tags in the Pango manual.)
  The markup passed to gtk_label_set_markup() must be valid; for example, literal </>/& characters
  must be escaped as &lt;, &gt;, and &amp;. If you pass text obtained from the user, file, or a
  network to gtk_label_set_markup(), you'll want to escape it with g_markup_escape_text() or
  g_markup_printf_escaped().
  Markup strings are just a convenient way to set the PangoAttrList on a label;
  gtk_label_set_attributes() may be a simpler way to set attributes in some cases. Be careful though;
  PangoAttrList tends to cause internationalization problems, unless you're applying attributes to the
  entire string (i.e. unless you set the range of each attribute to [0, G_MAXINT)). The reason is that
  specifying the start_index and end_index for a PangoAttribute requires knowledge of the exact string
  being displayed, so translations will cause problems.
  
  ----------------------------------------------------------------------------------------------------
  
  === Selectable labels ===
  Labels can be made selectable with gtk_label_set_selectable(). Selectable labels allow the user to
  copy the label contents to the clipboard. Only labels that contain useful-to-copy information
  &#8212; such as error messages &#8212; should be made selectable.
  
  ----------------------------------------------------------------------------------------------------
  
  === Text layout ===
  A label can contain any number of paragraphs, but will have performance problems if it contains more
  than a small number. Paragraphs are separated by newlines or other paragraph separators understood
  by Pango.
  Labels can automatically wrap text if you call gtk_label_set_line_wrap().
  gtk_label_set_justify() sets how the lines in a label align with one another. If you want to set how
  the label as a whole aligns in its available space, see gtk_misc_set_alignment().
  

==== :SetWidthChars ====
'':SetWidthChars(self @ [[#T|T]], n_chars @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the desired width in characters of label to n_chars.
  
  label :   a GtkLabel
  n_chars : the new desired width, in characters.
  

==== :SetUseUnderline ====
'':SetUseUnderline(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  If true, an underline in the text indicates the next character should be used for the mnemonic accelerator key.
  
  label :   a GtkLabel
  setting : TRUE if underlines in the text indicate mnemonics
  

==== :SetUseMarkup ====
'':SetUseMarkup(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the text of the label contains markup in Pango's text markup language. See gtk_label_set_markup().
  
  label :   a GtkLabel
  setting : TRUE if the label's text should be parsed for markup.
  

==== :Label ====
'':Label(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''


==== :Jtype ====
'':Jtype(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Wrap ====
'':Wrap(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :UseUnderline ====
'':UseUnderline(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :UseMarkup ====
'':UseMarkup(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Ellipsize ====
'':Ellipsize(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :SingleLineMode ====
'':SingleLineMode(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :HaveTransform ====
'':HaveTransform(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :InClick ====
'':InClick(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :WrapMode ====
'':WrapMode(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :PatternSet ====
'':PatternSet(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :MnemonicKeyval ====
'':MnemonicKeyval(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Text ====
'':Text(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''


==== :Attrs ====
'':Attrs(self @ [[#T|T]]) : [[..:..:Gtk:Pango:AttrList#T|Gtk.Pango.AttrList.T]]''


==== :EffectiveAttrs ====
'':EffectiveAttrs(self @ [[#T|T]]) : [[..:..:Gtk:Pango:AttrList#T|Gtk.Pango.AttrList.T]]''


==== :Layout ====
'':Layout(self @ [[#T|T]]) : [[..:..:Gtk:Pango:Layout#T|Gtk.Pango.Layout.T]]''


==== :MnemonicWidget ====
'':MnemonicWidget(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :MnemonicWindow ====
'':MnemonicWindow(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Window#T|Gtk.Gtk.Window.T]]''


==== :SelectInfo ====
'':SelectInfo(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:LabelSelectionInfo#T|Gtk.Gtk.LabelSelectionInfo.T]]''


==== :Get ====
'':Get(self @ [[#T|T]], str @ [[..:..:Std:List#T|Std.List.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  === Warning ===
  gtk_label_get is deprecated and should not be used in newly-written code.

==== :GetAngle ====
'':GetAngle(self @ [[#T|T]]) : [[..:..:Std:Real#T|Std.Real.T]]''

  Gets the angle of rotation for the label. See gtk_label_set_angle().
  
  label :   a GtkLabel
  Returns : the angle of rotation for the label
  

==== :GetAttributes ====
'':GetAttributes(self @ [[#T|T]]) : [[..:..:Gtk:Pango:AttrList#T|Gtk.Pango.AttrList.T]]''

  Gets the attribute list that was set on the label using gtk_label_set_attributes(), if any. This function does not
  reflect attributes that come from the labels markup (see gtk_label_set_markup()). If you want to get the effective
  attributes for the label, use pango_layout_get_attribute (gtk_label_get_layout (label)).
  
  label :   a GtkLabel
  Returns : the attribute list, or NULL if none was set.
  

==== :GetEllipsize ====
'':GetEllipsize(self @ [[#T|T]]) : [[..:..:Gtk:Pango:EllipsizeMode#T|Gtk.Pango.EllipsizeMode.T]]''

  Returns the ellipsizing position of the label. See gtk_label_set_ellipsize().
  
  label :   a GtkLabel
  Returns : PangoEllipsizeMode
  

==== :GetJustify ====
'':GetJustify(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Justification#T|Gtk.Gtk.Justification.T]]''

  Returns the justification of the label. See gtk_label_set_justify().
  
  label :   a GtkLabel
  Returns : GtkJustification
  

==== :GetLabel ====
'':GetLabel(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Fetches the text from a label widget including any embedded underlines indicating mnemonics and Pango markup. (See
  gtk_label_get_text()).
  
  label :   a GtkLabel
  Returns : the text of the label widget. This string is owned by the widget and must not be modified or freed.
  

==== :GetLayout ====
'':GetLayout(self @ [[#T|T]]) : [[..:..:Gtk:Pango:Layout#T|Gtk.Pango.Layout.T]]''

  Gets the PangoLayout used to display the label. The layout is useful to e.g. convert text positions to pixel positions,
  in combination with gtk_label_get_layout_offsets(). The returned layout is owned by the label so need not be freed by
  the caller.
  
  label :   a GtkLabel
  Returns : the PangoLayout for this label
  

==== :GetLayoutOffsets ====
'':GetLayoutOffsets(self @ [[#T|T]], x @ [[..:..:Std:Object#T|Std.Object.T]], y @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Obtains the coordinates where the label will draw the PangoLayout representing the text in the label; useful to convert
  mouse events into coordinates inside the PangoLayout, e.g. to take some action if some part of the label is clicked. Of
  course you will need to create a GtkEventBox to receive the events, and pack the label inside it, since labels are a
  GTK_NO_WINDOW widget. Remember when using the PangoLayout functions you need to convert to and from pixels using
  PANGO_PIXELS() or PANGO_SCALE.
  
  label : a GtkLabel
  x :     location to store X offset of layout, or NULL
  y :     location to store Y offset of layout, or NULL
  

==== :GetLineWrap ====
'':GetLineWrap(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether lines in the label are automatically wrapped. See gtk_label_set_line_wrap().
  
  label :   a GtkLabel
  Returns : TRUE if the lines of the label are automatically wrapped.
  

==== :GetLineWrapMode ====
'':GetLineWrapMode(self @ [[#T|T]]) : [[..:..:Gtk:Pango:WrapMode#T|Gtk.Pango.WrapMode.T]]''

  Returns line wrap mode used by the label. See gtk_label_set_line_wrap_mode().
  
  label :   a GtkLabel
  Returns : TRUE if the lines of the label are automatically wrapped.
  

==== :GetMaxWidthChars ====
'':GetMaxWidthChars(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Retrieves the desired maximum width of label, in characters. See gtk_label_set_width_chars().
  
  label :   a GtkLabel
  Returns : the maximum width of the label in characters.
  

==== :GetMnemonicKeyval ====
'':GetMnemonicKeyval(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  If the label has been set so that it has an mnemonic key this function returns the keyval used for the mnemonic
  accelerator. If there is no mnemonic set up it returns GDK_VoidSymbol.
  
  label :   a GtkLabel
  Returns : GDK keyval usable for accelerators, or GDK_VoidSymbol
  

==== :GetMnemonicWidget ====
'':GetMnemonicWidget(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Retrieves the target of the mnemonic (keyboard shortcut) of this label. See gtk_label_set_mnemonic_widget().
  
  label :   a GtkLabel
  Returns : the target of the label's mnemonic, or NULL if none has been set and the default algorithm will be used.
  

==== :GetSelectable ====
'':GetSelectable(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets the value set by gtk_label_set_selectable().
  
  label :   a GtkLabel
  Returns : TRUE if the user can copy text from the label
  

==== :GetSelectionBounds ====
'':GetSelectionBounds(self @ [[#T|T]], start @ [[..:..:Std:Object#T|Std.Object.T]], end @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets the selected range of characters in the label, returning TRUE if there's a selection.
  
  label :   a GtkLabel
  start :   return location for start of selection, as a character offset
  end :     return location for end of selection, as a character offset
  Returns : TRUE if selection is non-empty
  

==== :GetSingleLineMode ====
'':GetSingleLineMode(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the label is in single line mode.
  
  label :   a GtkLabel
  Returns : TRUE when the label is in single line mode.
  

==== :GetText ====
'':GetText(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Fetches the text from a label widget, as displayed on the screen. This does not include any embedded underlines
  indicating mnemonics or Pango markup. (See gtk_label_get_label())
  
  label :   a GtkLabel
  Returns : the text in the label widget. This is the internal string used by the label, and must not be modified.
  

==== :GetUseMarkup ====
'':GetUseMarkup(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the label's text is interpreted as marked up with the Pango text markup language. See
  gtk_label_set_use_markup().
  
  label :   a GtkLabel
  Returns : TRUE if the label's text will be parsed for markup.
  

==== :GetUseUnderline ====
'':GetUseUnderline(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether an embedded underline in the label indicates a mnemonic. See gtk_label_set_use_underline().
  
  label :   a GtkLabel
  Returns : TRUE whether an embedded underline in the label indicates the mnemonic accelerator keys.
  

==== :GetWidthChars ====
'':GetWidthChars(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Retrieves the desired width of label, in characters. See gtk_label_set_width_chars().
  
  label :   a GtkLabel
  Returns : the width of the label in characters.
  

==== :ParseUline ====
'':ParseUline(self @ [[#T|T]], string @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  === Warning ===
  gtk_label_parse_uline is deprecated and should not be used in newly-written code.

==== :SelectRegion ====
'':SelectRegion(self @ [[#T|T]], start_offset @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], end_offset @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Selects a range of characters in the label, if the label is selectable. See gtk_label_set_selectable(). If the label is
  not selectable, this function has no effect. If start_offset or end_offset are -1, then the end of the label will be
  substituted.
  
  label :        a GtkLabel
  start_offset : start offset (in characters not bytes)
  end_offset :   end offset (in characters not bytes)
  

==== :SetAngle ====
'':SetAngle(self @ [[#T|T]], angle @ [[..:..:Std:Real#T|Std.Real.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the angle of rotation for the label. An angle of 90 reads from from bottom to top, an angle of 270, from top to
  bottom. The angle setting for the label is ignored if the label is selectable, wrapped, or ellipsized.
  
  label : a GtkLabel
  angle : the angle that the baseline of the label makes with the horizontal, in degrees, measured counterclockwise
  

==== :SetAttributes ====
'':SetAttributes(self @ [[#T|T]], attrs @ [[..:..:Gtk:Pango:AttrList#T|Gtk.Pango.AttrList.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets a PangoAttrList; the attributes in the list are applied to the label text. The attributes set with this function
  will be ignored if the "use-underline"" or "use-markup" properties are set to TRUE.
  
  label : a GtkLabel
  attrs : a PangoAttrList
  

==== :SetEllipsize ====
'':SetEllipsize(self @ [[#T|T]], mode @ [[..:..:Gtk:Pango:EllipsizeMode#T|Gtk.Pango.EllipsizeMode.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the mode used to ellipsize (add an ellipsis: "...") to the text if there is not enough space to render the entire
  string.
  
  label : a GtkLabel
  mode :  a PangoEllipsizeMode
  

==== :SetJustify ====
'':SetJustify(self @ [[#T|T]], jtype @ [[..:..:Gtk:Gtk:Justification#T|Gtk.Gtk.Justification.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the alignment of the lines in the text of the label relative to each other. GTK_JUSTIFY_LEFT is the default value
  when the widget is first created with gtk_label_new(). If you instead want to set the alignment of the label as a whole,
  use gtk_misc_set_alignment() instead. gtk_label_set_justify() has no effect on labels containing only a single line.
  
  label : a GtkLabel
  jtype : a GtkJustification
  

==== :SetLabel ====
'':SetLabel(self @ [[#T|T]], str @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the text of the label. The label is interpreted as including embedded underlines and/or Pango markup depending on
  the values of the "use-underline"" and "use-markup" properties.
  
  label : a GtkLabel
  str :   the new text to set for the label
  

==== :SetLineWrap ====
'':SetLineWrap(self @ [[#T|T]], wrap @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Toggles line wrapping within the GtkLabel widget. TRUE makes it break lines if text exceeds the widget's size. FALSE
  lets the text get cut off by the edge of the widget if it exceeds the widget size.
  Note that setting line wrapping to TRUE does not make the label wrap at its parent container's width, because GTK+
  widgets conceptually can't make their requisition depend on the parent container's size. For a label that wraps at a
  specific position, set the label's width using gtk_widget_set_size_request().
  
  label : a GtkLabel
  wrap :  the setting
  

==== :SetLineWrapMode ====
'':SetLineWrapMode(self @ [[#T|T]], wrap_mode @ [[..:..:Gtk:Pango:WrapMode#T|Gtk.Pango.WrapMode.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  If line wrapping is on (see gtk_label_set_line_wrap()) this controls how the line wrapping is done. The default is
  PANGO_WRAP_WORD which means wrap on word boundaries.
  
  label :     a GtkLabel
  wrap_mode : the line wrapping mode
  

==== :SetMarkup ====
'':SetMarkup(self @ [[#T|T]], str @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Parses str which is marked up with the Pango text markup language, setting the label's text and attribute list based on
  the parse results. If the str is external data, you may need to escape it with g_markup_escape_text() or
  g_markup_printf_escaped():
  char *markup;
  
  markup = g_markup_printf_escaped ("<span style=\"italic\">%s</span>", str);
  gtk_label_set_markup (GTK_LABEL (label), markup);
  g_free (markup);
  
  label : a GtkLabel
  str :   a markup string (see Pango markup format)
  

==== :SetMarkupWithMnemonic ====
'':SetMarkupWithMnemonic(self @ [[#T|T]], str @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Parses str which is marked up with the Pango text markup language, setting the label's text and attribute list based on
  the parse results. If characters in str are preceded by an underscore, they are underlined indicating that they
  represent a keyboard accelerator called a mnemonic.
  The mnemonic key can be used to activate another widget, chosen automatically, or explicitly using
  gtk_label_set_mnemonic_widget().
  
  label : a GtkLabel
  str :   a markup string (see Pango markup format)
  

==== :SetMaxWidthChars ====
'':SetMaxWidthChars(self @ [[#T|T]], n_chars @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the desired maximum width in characters of label to n_chars.
  
  label :   a GtkLabel
  n_chars : the new desired maximum width, in characters.
  

==== :SetMnemonicWidget ====
'':SetMnemonicWidget(self @ [[#T|T]], widget @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  If the label has been set so that it has an mnemonic key (using i.e. gtk_label_set_markup_with_mnemonic(),
  gtk_label_set_text_with_mnemonic(), gtk_label_new_with_mnemonic() or the "use_underline" property) the label can be
  associated with a widget that is the target of the mnemonic. When the label is inside a widget (like a GtkButton or a
  GtkNotebook tab) it is automatically associated with the correct widget, but sometimes (i.e. when the target is a
  GtkEntry next to the label) you need to set it explicitly using this function.
  The target widget will be accelerated by emitting the GtkWidget::mnemonic-activate signal on it. The default handler for
  this signal will activate the widget if there are no mnemonic collisions and toggle focus between the colliding widgets
  otherwise.
  
  label :  a GtkLabel
  widget : the target GtkWidget
  

==== :SetPattern ====
'':SetPattern(self @ [[#T|T]], pattern @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  The pattern of underlines you want under the existing text within the GtkLabel widget. For example if the current text
  of the label says "FooBarBaz" passing a pattern of "___ ___" will underline "Foo" and "Baz" but not "Bar".
  
  label :   The GtkLabel you want to set the pattern to.
  pattern : The pattern as described above.
  

==== :SetSelectable ====
'':SetSelectable(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Selectable labels allow the user to select text from the label, for copy-and-paste.
  
  label :   a GtkLabel
  setting : TRUE to allow selecting text in the label
  

==== :SetSingleLineMode ====
'':SetSingleLineMode(self @ [[#T|T]], single_line_mode @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the label is in single line mode.
  
  label :            a GtkLabel
  single_line_mode : TRUE if the label should be in single line mode
  

==== :SetText ====
'':SetText(self @ [[#T|T]], str @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the text within the GtkLabel widget. It overwrites any text that was there before.
  This will also clear any previously set mnemonic accelerators.
  
  label : a GtkLabel
  str :   The text you want to set
  

==== :SetTextWithMnemonic ====
'':SetTextWithMnemonic(self @ [[#T|T]], str @ [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the label's text from the string str. If characters in str are preceded by an underscore, they are underlined
  indicating that they represent a keyboard accelerator called a mnemonic. The mnemonic key can be used to activate
  another widget, chosen automatically, or explicitly using gtk_label_set_mnemonic_widget().
  
  label : a GtkLabel
  str :   a string
  

==== New ====
''New(str : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

  Creates a new label with the given text inside it. You can pass NULL to get an empty label widget.
  
  str :     The text of the label
  Returns : the new GtkLabel
  

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== NewWithMnemonic ====
''NewWithMnemonic(str : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

  Creates a new GtkLabel, containing the text in str.
  If characters in str are preceded by an underscore, they are underlined. If you need a literal underscore character in a
  label, use '__' (two underscores). The first underlined character represents a keyboard accelerator called a mnemonic.
  The mnemonic key can be used to activate another widget, chosen automatically, or explicitly using
  gtk_label_set_mnemonic_widget().
  If gtk_label_set_mnemonic_widget() is not called, then the first activatable ancestor of the GtkLabel will be chosen as
  the mnemonic widget. For instance, if the label is inside a button or menu item, the button or menu item will
  automatically become the mnemonic widget and be activated by the mnemonic.
  
  str :     The text of the label, with an underscore in front of the mnemonic character
  Returns : the new GtkLabel
  

