====== ToggleButton ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Button#T|Gtk.Gtk.Button.T]]
  * [[..:..:Gtk:Gtk:Bin#T|Gtk.Gtk.Bin.T]]
  * [[..:..:Gtk:Gtk:Container#T|Gtk.Gtk.Container.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  A GtkToggleButton is a GtkButton which will remain 'pressed-in' when clicked.
  Clicking again will cause the toggle button to return to its normal state.
  A toggle button is created by calling either gtk_toggle_button_new() or
  gtk_toggle_button_new_with_label(). If using the former, it is advisable to
  pack a widget, (such as a GtkLabel and/or a GtkPixmap), into the toggle
  button's container. (See GtkButton for more information).
  The state of a GtkToggleButton can be set specifically using
  gtk_toggle_button_set_active(), and retrieved using
  gtk_toggle_button_get_active().
  To simply switch the state of a toggle button, use gtk_toggle_button_toggled.
  Example 11.&#160;Creating two GtkToggleButton widgets.
  
  void make_toggles (void) {
     GtkWidget *dialog, *toggle1, *toggle2;
  
     dialog = gtk_dialog_new ();
     toggle1 = gtk_toggle_button_new_with_label ("Hi, i'm a toggle button.");
  
     /* Makes this toggle button invisible */
     gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle1), TRUE);
  
     g_signal_connect (toggle1, "toggled",
                       G_CALLBACK (output_state), NULL);
     gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->action_area),
                         toggle1, FALSE, FALSE, 2);
  
     toggle2 = gtk_toggle_button_new_with_label ("Hi, i'm another toggle
  button.");
     gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle2), FALSE);
     g_signal_connect (toggle2, "toggled",
                       G_CALLBACK (output_state), NULL);
     gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->action_area),
                         toggle2, FALSE, FALSE, 2);
  
     gtk_widget_show_all (dialog);
  }
  
  

==== :Toggled ====
'':Toggled(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits the toggled signal on the GtkToggleButton. There is no good reason for an
  application ever to call this function.
  toggle_button : a GtkToggleButton.

==== :SetMode ====
'':SetMode(self @ [[#T|T]], draw_indicator @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the button is displayed as a separate indicator and label. You can
  call this function on a checkbutton or a radiobutton with draw_indicator =
  FALSE to make the button look like a normal button
  This function only affects instances of classes like GtkCheckButton and
  GtkRadioButton that derive from GtkToggleButton, not instances of
  GtkToggleButton itself.
  toggle_button :  a GtkToggleButton
  draw_indicator : if TRUE, draw the button as a separate indicator and label; if
                   FALSE, draw the button like a normal button

==== :SetInconsistent ====
'':SetInconsistent(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  If the user has selected a range of elements (such as some text or spreadsheet
  cells) that are affected by a toggle button, and the current values in that
  range are inconsistent, you may want to display the toggle in an "in between"
  state. This function turns on "in between" display. Normally you would turn off
  the inconsistent state again if the user toggles the toggle button. This has to
  be done manually, gtk_toggle_button_set_inconsistent() only affects visual
  appearance, it doesn't affect the semantics of the button.
  toggle_button : a GtkToggleButton
  setting :       TRUE if state is inconsistent
  ***** Property Details *****
  The "active" property
    "active"                   gboolean              : Read / Write
  If the toggle button should be pressed in or not.
  Default value: FALSE

==== :SetActive ====
'':SetActive(self @ [[#T|T]], is_active @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the status of the toggle button. Set to TRUE if you want the
  GtkToggleButton to be 'pressed in', and FALSE to raise it. This action causes
  the toggled signal to be emitted.
  toggle_button : a GtkToggleButton.
  is_active :     TRUE or FALSE.

==== :Active ====
'':Active(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Queries a GtkToggleButton and returns its current state. Returns TRUE if the
  toggle button is pressed in and FALSE if it is raised.
  toggle_button : a GtkToggleButton.
  Returns :       a gboolean value.
  Sets the status of the toggle button. Set to TRUE if you want the
  GtkToggleButton to be 'pressed in', and FALSE to raise it. This action causes
  the toggled signal to be emitted.
  toggle_button : a GtkToggleButton.
  is_active :     TRUE or FALSE.

==== :DrawIndicator ====
'':DrawIndicator(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :Inconsistent ====
'':Inconsistent(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the value set by gtk_toggle_button_set_inconsistent().
  toggle_button : a GtkToggleButton
  Returns :       TRUE if the button is displayed as inconsistent, FALSE
                  otherwise
  If the user has selected a range of elements (such as some text or spreadsheet
  cells) that are affected by a toggle button, and the current values in that
  range are inconsistent, you may want to display the toggle in an "in between"
  state. This function turns on "in between" display. Normally you would turn off
  the inconsistent state again if the user toggles the toggle button. This has to
  be done manually, gtk_toggle_button_set_inconsistent() only affects visual
  appearance, it doesn't affect the semantics of the button.
  toggle_button : a GtkToggleButton
  setting :       TRUE if state is inconsistent
  ***** Property Details *****
  The "active" property
    "active"                   gboolean              : Read / Write
  If the toggle button should be pressed in or not.
  Default value: FALSE

==== :GetActive ====
'':GetActive(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Queries a GtkToggleButton and returns its current state. Returns TRUE if the
  toggle button is pressed in and FALSE if it is raised.
  toggle_button : a GtkToggleButton.
  Returns :       a gboolean value.

==== :GetInconsistent ====
'':GetInconsistent(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Gets the value set by gtk_toggle_button_set_inconsistent().
  toggle_button : a GtkToggleButton
  Returns :       TRUE if the button is displayed as inconsistent, FALSE
                  otherwise

==== :GetMode ====
'':GetMode(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Retrieves whether the button is displayed as a separate indicator and label.
  See gtk_toggle_button_set_mode().
  toggle_button : a GtkToggleButton
  Returns :       TRUE if the togglebutton is drawn as a separate indicator and
                  label.

==== New ====
''New() : [[# T| T]]''

  Creates a new toggle button. A widget should be packed into the button, as in
  gtk_button_new().
  Returns : a new toggle button.

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== NewWithMnemonic ====
''NewWithMnemonic(label : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

  Creates a new GtkToggleButton containing a label. The label will be created
  using gtk_label_new_with_mnemonic(), so underscores in label indicate the
  mnemonic for the button.
  label :   the text of the button, with an underscore in front of the mnemonic
            character
  Returns : a new GtkToggleButton

==== NewWithLabel ====
''NewWithLabel(label : [[..:..:Std:String#T|Std.String.T]]) : [[# T| T]]''

  Creates a new toggle button with a text label.
  label :   a string containing the message to be placed in the toggle button.
  Returns : a new toggle button.

