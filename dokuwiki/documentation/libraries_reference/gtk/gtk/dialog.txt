====== Dialog ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:Gtk:Window#T|Gtk.Gtk.Window.T]]
  * [[..:..:Gtk:Gtk:Bin#T|Gtk.Gtk.Bin.T]]
  * [[..:..:Gtk:Gtk:Container#T|Gtk.Gtk.Container.T]]
  * [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]
  * [[..:..:Gtk:Gtk:Object#T|Gtk.Gtk.Object.T]]
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  Dialog boxes are a convenient way to prompt the user for a small amount of input, e.g. to display a
  message, ask a question, or anything else that does not require extensive effort on the user's part.
  GTK+ treats a dialog as a window split vertically. The top section is a GtkVBox, and is where
  widgets such as a GtkLabel or a GtkEntry should be packed. The bottom area is known as the
  action_area. This is generally used for packing buttons into the dialog which may perform functions
  such as cancel, ok, or apply. The two areas are separated by a GtkHSeparator.
  GtkDialog boxes are created with a call to gtk_dialog_new() or gtk_dialog_new_with_buttons().
  gtk_dialog_new_with_buttons() is recommended; it allows you to set the dialog title, some convenient
  flags, and add simple buttons.
  If 'dialog' is a newly created dialog, the two primary areas of the window can be accessed as
  GTK_DIALOG(dialog)->vbox and GTK_DIALOG(dialog)->action_area, as can be seen from the example,
  below.
  A 'modal' dialog (that is, one which freezes the rest of the application from user input), can be
  created by calling gtk_window_set_modal() on the dialog. Use the GTK_WINDOW() macro to cast the
  widget returned from gtk_dialog_new() into a GtkWindow. When using gtk_dialog_new_with_buttons() you
  can also pass the GTK_DIALOG_MODAL flag to make a dialog modal.
  If you add buttons to GtkDialog using gtk_dialog_new_with_buttons(), gtk_dialog_add_button(),
  gtk_dialog_add_buttons(), or gtk_dialog_add_action_widget(), clicking the button will emit a signal
  called "response" with a response ID that you specified. GTK+ will never assign a meaning to
  positive response IDs; these are entirely user-defined. But for convenience, you can use the
  response IDs in the GtkResponseType enumeration (these all have values less than zero). If a dialog
  receives a delete event, the "response" signal will be emitted with a response ID of
  GTK_RESPONSE_DELETE_EVENT.
  If you want to block waiting for a dialog to return before returning control flow to your code, you
  can call gtk_dialog_run(). This function enters a recursive main loop and waits for the user to
  respond to the dialog, returning the response ID corresponding to the button the user clicked.
  For the simple dialog in the following example, in reality you'd probably use GtkMessageDialog to
  save yourself some effort. But you'd need to create the dialog contents manually if you had more
  than a simple message in the dialog.
  Example 4.&#160;Simple GtkDialog usage.
  
  /* Function to open a dialog box displaying the message provided. */
  
  void quick_message (gchar *message) {
  
     GtkWidget *dialog, *label;
  
     /* Create the widgets */
  
     dialog = gtk_dialog_new_with_buttons ("Message",
                                           main_application_window,
                                           GTK_DIALOG_DESTROY_WITH_PARENT,
                                           GTK_STOCK_OK,
                                           GTK_RESPONSE_NONE,
                                           NULL);
     label = gtk_label_new (message);
  
     /* Ensure that the dialog box is destroyed when the user responds. */
  
     g_signal_connect_swapped (dialog,
                               "response",
                               G_CALLBACK (gtk_widget_destroy),
                               dialog);
  
     /* Add the label, and show everything we've added to the dialog. */
  
     gtk_container_add (GTK_CONTAINER (GTK_DIALOG(dialog)->vbox),
                        label);
     gtk_widget_show_all (dialog);
  }
  
  === GtkDialog as GtkBuildable ===
  The GtkDialog implementation of the GtkBuildable interface exposes the vbox and action_area as
  internal children with the names "vbox" and "action_area".
  GtkDialog supports a custom <action-widgets> element, which can contain multiple <action-widget>
  elements. The "response" attribute specifies a numeric response, and the content of the element is
  the id of widget (which should be a child of the dialogs action_area).
  Example 5.&#160;A GtkDialog UI definition fragment.
  <object class="GtkDialog" id="dialog1">
    <child internal-child="vbox">"
      <object class="GtkVBox">
        <child internal-child="action_area">
          <object class="GtkHButtonBox">
            <child>
              <object class="GtkButton" id="button_cancel"/>
            </child>
            <child>
              <object class="GtkButton" id="button_ok"/>
            </child>
          </object>
        </child>
      </object>
    </child>
    <action-widgets>
      <action-widget response="3">button_ok</action-widget>
      <action-widget response="-5">button_cancel</action-widget>
    </action-widgets>
  </object>
  
  

==== :SetResponseSensitive ====
'':SetResponseSensitive(self @ [[#T|T]], response_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Calls gtk_widget_set_sensitive (widget, setting) for each widget in the dialog's action area with the given response_id.
  A convenient way to sensitize/desensitize dialog buttons.
  
  dialog :      a GtkDialog
  response_id : a response ID
  setting :     TRUE for sensitive
  

==== :SetHasSeparator ====
'':SetHasSeparator(self @ [[#T|T]], setting @ [[..:..:Std:Symbol#T|Std.Symbol.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets whether the dialog has a separator above the buttons. TRUE by default.
  
  dialog :  a GtkDialog
  setting : TRUE to have a separator
  

==== :SetDefaultResponse ====
'':SetDefaultResponse(self @ [[#T|T]], response_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the last widget in the dialog's action area with the given response_id as the default widget for the dialog.
  Pressing "Enter" normally activates the default widget.
  
  dialog :      a GtkDialog
  response_id : a response ID
  

==== :Vbox ====
'':Vbox(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :ActionArea ====
'':ActionArea(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :Separator ====
'':Separator(self @ [[#T|T]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''


==== :AddActionWidget ====
'':AddActionWidget(self @ [[#T|T]], child @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]], response_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds an activatable widget to the action area of a GtkDialog, connecting a signal handler that will emit the "response"
  signal on the dialog when the widget is activated. The widget is appended to the end of the dialog's action area. If you
  want to add a non-activatable widget, simply pack it into the action_area field of the GtkDialog struct.
  
  dialog :      a GtkDialog
  child :       an activatable widget
  response_id : response ID for child
  

==== :AddButton ====
'':AddButton(self @ [[#T|T]], button_text @ [[..:..:Std:String#T|Std.String.T]], response_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]''

  Adds a button with the given text (or a stock button, if button_text is a stock ID) and sets things up so that clicking
  the button will emit the "response" signal with the given response_id. The button is appended to the end of the dialog's
  action area. The button widget is returned, but usually you don't need it.
  
  dialog :      a GtkDialog
  button_text : text of button, or stock ID
  response_id : response ID for the button
  Returns :     the button widget that was added
  

==== :AddButtons ====
'':AddButtons(self @ [[#T|T]], first_button_text @ [[..:..:Std:String#T|Std.String.T]], __etc__ @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds more buttons, same as calling gtk_dialog_add_button() repeatedly. The variable argument list should be NULL-
  terminated as with gtk_dialog_new_with_buttons(). Each button must have both text and response ID.
  
  dialog :            a GtkDialog
  first_button_text : button text or stock ID
  ... :               response ID for first button, then more text-response_id pairs
  

==== :GetHasSeparator ====
'':GetHasSeparator(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Accessor for whether the dialog has a separator.
  
  dialog :  a GtkDialog
  Returns : TRUE if the dialog has a separator
  

==== :GetResponseForWidget ====
'':GetResponseForWidget(self @ [[#T|T]], widget @ [[..:..:Gtk:Gtk:Widget#T|Gtk.Gtk.Widget.T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the response id of a widget in the action area of a dialog.
  
  dialog :  a GtkDialog
  widget :  a widget in the action area of dialog
  Returns : the response id of widget, or GTK_RESPONSE_NONE if widget doesn't have a response id set.
  

==== :Response ====
'':Response(self @ [[#T|T]], response_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits the "response" signal with the given response ID. Used to indicate that the user has responded to the dialog in
  some way; typically either you or gtk_dialog_run() will be monitoring the ::response signal and take appropriate action.
  
  dialog :      a GtkDialog
  response_id : response ID
  

==== :Run ====
'':Run(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Blocks in a recursive main loop until the dialog either emits the "response" signal, or is destroyed. If the dialog is
  destroyed during the call to gtk_dialog_run(), gtk_dialog_run() returns GTK_RESPONSE_NONE. Otherwise, it returns the
  response ID from the ::response signal emission.
  Before entering the recursive main loop, gtk_dialog_run() calls gtk_widget_show() on the dialog for you. Note that you
  still need to show any children of the dialog yourself.
  During gtk_dialog_run(), the default behavior of "delete-event" is disabled; if the dialog receives ::delete_event, it
  will not be destroyed as windows usually are, and gtk_dialog_run() will return GTK_RESPONSE_DELETE_EVENT. Also, during
  gtk_dialog_run() the dialog will be modal. You can force gtk_dialog_run() to return at any time by calling
  gtk_dialog_response() to emit the ::response signal. Destroying the dialog during gtk_dialog_run() is a very bad idea,
  because your post-run code won't know whether the dialog was destroyed or not.
  After gtk_dialog_run() returns, you are responsible for hiding or destroying the dialog if you wish to do so.
  Typical usage of this function might be:
    gint result = gtk_dialog_run (GTK_DIALOG (dialog));
    switch (result)
      {
        case GTK_RESPONSE_ACCEPT:
           do_application_specific_something ();
           break;
        default:
           do_nothing_since_dialog_was_cancelled ();
           break;
      }
    gtk_widget_destroy (dialog);

==== :SetAlternativeButtonOrder ====
'':SetAlternativeButtonOrder(self @ [[#T|T]], first_response_id @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], __etc__ @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets an alternative button order. If the "gtk-alternative-button-order" setting is set to TRUE, the dialog buttons are
  reordered according to the order of the response ids passed to this function.
  By default, GTK+ dialogs use the button order advocated by the Gnome Human Interface Guidelines with the affirmative
  button at the far right, and the cancel button left of it. But the builtin GTK+ dialogs and GtkMessageDialogs do provide
  an alternative button order, which is more suitable on some platforms, e.g. Windows.
  Use this function after adding all the buttons to your dialog, as the following example shows:
  cancel_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                         GTK_STOCK_CANCEL,
                                         GTK_RESPONSE_CANCEL);
  
  ok_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                     GTK_STOCK_OK,
                                     GTK_RESPONSE_OK);
  
  gtk_widget_grab_default (ok_button);
  
  help_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                       GTK_STOCK_HELP,
                                       GTK_RESPONSE_HELP);
  
  gtk_dialog_set_alternative_button_order (GTK_DIALOG (dialog),
                                           GTK_RESPONSE_OK,
                                           GTK_RESPONSE_CANCEL,
                                           GTK_RESPONSE_HELP,
                                           -1);

==== :SetAlternativeButtonOrderFromArray ====
'':SetAlternativeButtonOrderFromArray(self @ [[#T|T]], n_params @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], new_order @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets an alternative button order. If the "gtk-alternative-button-order" setting is set to TRUE, the dialog buttons are
  reordered according to the order of the response ids in new_order.
  See gtk_dialog_set_alternative_button_order() for more information.
  This function is for use by language bindings.
  
  dialog :    a GtkDialog
  n_params :  the number of response ids in new_order
  new_order : an array of response ids of dialog's buttons
  

==== New ====
''New() : [[# T| T]]''

  Creates a new dialog box. Widgets should not be packed into this GtkWindow directly, but into the vbox and action_area,
  as described above.
  
  Returns : a new GtkDialog.
  

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


==== NewWithButtons ====
''NewWithButtons(title : [[..:..:Std:String#T|Std.String.T]], parent : [[..:..:Gtk:Gtk:Window#T|Gtk.Gtk.Window.T]], flags : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], first_button_text : [[..:..:Std:String#T|Std.String.T]], __etc__ : [[..:..:Std:Object#T|Std.Object.T]]) : [[# T| T]]''

  Creates a new GtkDialog with title title (or NULL for the default title; see gtk_window_set_title()) and transient
  parent parent (or NULL for none; see gtk_window_set_transient_for()). The flags argument can be used to make the dialog
  modal (GTK_DIALOG_MODAL) and/or to have it destroyed along with its transient parent (GTK_DIALOG_DESTROY_WITH_PARENT).
  After flags, button text/response ID pairs should be listed, with a NULL pointer ending the list. Button text can be
  either a stock ID such as GTK_STOCK_OK, or some arbitrary text. A response ID can be any positive number, or one of the
  values in the GtkResponseType enumeration. If the user clicks one of these dialog buttons, GtkDialog will emit the
  "response" signal with the corresponding response ID. If a GtkDialog receives the "delete-event" signal, it will emit ::
  response with a response ID of GTK_RESPONSE_DELETE_EVENT. However, destroying a dialog does not emit the ::response
  signal; so be careful relying on ::response when using the GTK_DIALOG_DESTROY_WITH_PARENT flag. Buttons are from left to
  right, so the first button in the list will be the leftmost button in the dialog.
  Here's a simple example:
   GtkWidget *dialog = gtk_dialog_new_with_buttons ("My dialog",
                                                    main_app_window,
                                                    GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
                                                    GTK_STOCK_OK,
                                                    GTK_RESPONSE_ACCEPT,
                                                    GTK_STOCK_CANCEL,
                                                    GTK_RESPONSE_REJECT,
                                                    NULL);

