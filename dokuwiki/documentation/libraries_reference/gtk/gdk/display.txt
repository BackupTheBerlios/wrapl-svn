====== Display ======
==== T ====
=== inherits from ===
  * [[..:..:Gtk:GObject:Object#T|Gtk.GObject.Object.T]]

  GdkDisplay objects purpose are two fold:
      * To grab/ungrab keyboard focus and mouse pointer
      * To manage and provide information about the GdkScreen(s) available for
        this GdkDisplay
  GdkDisplay objects are the GDK representation of the X Display which can be
  described as a workstation consisting of a keyboard a pointing device (such as
  a mouse) and one or more screens. It is used to open and keep track of various
  GdkScreen objects currently instanciated by the application. It is also used to
  grab and release the keyboard and the mouse pointer.
  

==== :WarpPointer ====
'':WarpPointer(self @ [[#T|T]], screen @ [[..:..:Gtk:Gdk:Screen#T|Gtk.Gdk.Screen.T]], x @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], y @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Warps the pointer of display to the point x,y on the screen screen, unless the
  pointer is confined to a window by a grab, in which case it will be moved as
  far as allowed by the grab. Warping the pointer creates events as if the user
  had moved the mouse instantaneously to the destination.
  Note that the pointer should normally be under the control of the user. This
  function was added to cover some rare use cases like keyboard navigation
  support for the color picker in the GtkColorSelectionDialog.
  display : a GdkDisplay
  screen :  the screen of display to warp the pointer to
  x :       the x coordinate of the destination
  y :       the y coordinate of the destination
  Since 2.8

==== :Sync ====
'':Sync(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Flushes any requests queued for the windowing system and waits until all
  requests have been handled. This is often used for making sure that the display
  is synchronized with the current state of the program. Calling gdk_display_sync
  () before gdk_error_trap_pop() makes sure that any errors generated from
  earlier requests are handled before the error trap is removed.
  This is most useful for X11. On windowing systems where requests are handled
  synchronously, this function will do nothing.
  display : a GdkDisplay
  Since 2.2

==== :SupportsShapes ====
'':SupportsShapes(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns TRUE if gdk_window_shape_combine_mask() can be used to create shaped
  windows on display.
  display : a GdkDisplay
  Returns : TRUE if shaped windows are supported
  Since 2.10

==== :SupportsSelectionNotification ====
'':SupportsSelectionNotification(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether GdkEventOwnerChange events will be sent when the owner of a
  selection changes.
  display : a GdkDisplay
  Returns : whether GdkEventOwnerChange events will be sent.
  Since 2.6

==== :QueuedEvents ====
'':QueuedEvents(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :QueuedTail ====
'':QueuedTail(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''


==== :DoubleClickTime ====
'':DoubleClickTime(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the double click time (two clicks within this time interval count as a
  double click and result in a GDK_2BUTTON_PRESS event). Applications should not
  set this, it is a global user-configured setting.
  display : a GdkDisplay
  msec :    double click time in milliseconds (thousandths of a second)
  Since 2.2

==== :CorePointer ====
'':CorePointer(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Device#T|Gtk.Gdk.Device.T]]''


==== :PointerHooks ====
'':PointerHooks(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:DisplayPointerHooks#T|Gtk.Gdk.DisplayPointerHooks.T]]''

  This function allows for hooking into the operation of getting the current
  location of the pointer on a particular display. This is only useful for such
  low-level tools as an event recorder. Applications should never have any reason
  to use this facility.
  display :   a GdkDisplay
  new_hooks : a table of pointers to functions for getting quantities related to
              the current pointer position, or NULL to restore the default table.
  Returns :   the previous pointer hook table
  Since 2.2

==== :Closed ====
'':Closed(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :DoubleClickDistance ====
'':DoubleClickDistance(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Sets the double click distance (two clicks within this distance count as a
  double click and result in a GDK_2BUTTON_PRESS event). See also
  gdk_display_set_double_click_time(). Applications should not set this, it is a
  global user-configured setting.
  display :  a GdkDisplay
  distance : distance in pixels
  Since 2.4

==== :ButtonClickTime ====
'':ButtonClickTime(self @ [[#T|T]], @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ButtonWindow ====
'':ButtonWindow(self @ [[#T|T]], @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''


==== :ButtonNumber ====
'':ButtonNumber(self @ [[#T|T]], @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ButtonX ====
'':ButtonX(self @ [[#T|T]], @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :ButtonY ====
'':ButtonY(self @ [[#T|T]], @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''


==== :AddClientMessageFilter ====
'':AddClientMessageFilter(self @ [[#T|T]], message_type @ [[..:..:Std:Object#T|Std.Object.T]], func @ [[..:..:Std:Function#T|Std.Function.T]], data @ [[..:..:Std:Address#T|Std.Address.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Adds a filter to be called when X ClientMessage events are received. See
  gdk_window_add_filter() if you are interested in filtering other types of
  events.
  display :      a GdkDisplay for which this message filter applies
                 the type of ClientMessage events to receive. This will be
  message_type : checked against the message_type field of the XClientMessage
                 event struct.
  func :         the function to call to process the event.
  data :         user data to pass to func.
  Since 2.2

==== :Beep ====
'':Beep(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Emits a short beep on display
  display : a GdkDisplay
  Since 2.2

==== :Close ====
'':Close(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Closes the connection to the windowing system for the given display, and cleans
  up associated resources.
  display : a GdkDisplay
  Since 2.2

==== :Flush ====
'':Flush(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Flushes any requests queued for the windowing system; this happens
  automatically when the main loop blocks waiting for new events, but if your
  application is drawing without returning control to the main loop, you may need
  to call this function explicitely. A common case where this function needs to
  be called is when an application is executing drawing commands from a thread
  other than the thread where the main loop is running.
  This is most useful for X11. On windowing systems where requests are handled
  synchronously, this function will do nothing.
  display : a GdkDisplay
  Since 2.4

==== :GetCorePointer ====
'':GetCorePointer(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Device#T|Gtk.Gdk.Device.T]]''


==== :GetDefaultCursorSize ====
'':GetDefaultCursorSize(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Returns the default size to use for cursors on display.
  display : a GdkDisplay
  Returns : the default cursor size.
  Since 2.4

==== :GetDefaultGroup ====
'':GetDefaultGroup(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''

  Returns the default group leader window for all toplevel windows on display.
  This window is implicitly created by GDK. See gdk_window_set_group().
  display : a GdkDisplay
  Returns : The default group leader window for display
  Since 2.4

==== :GetDefaultScreen ====
'':GetDefaultScreen(self @ [[#T|T]]) : [[..:..:Gtk:Gdk:Screen#T|Gtk.Gdk.Screen.T]]''

  Get the default GdkScreen for display.
  display : a GdkDisplay
  Returns : the default GdkScreen object for display
  Since 2.2

==== :GetEvent ====
'':GetEvent(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the next GdkEvent to be processed for display, fetching events from the
  windowing system if necessary.
  display : a GdkDisplay
  Returns : the next GdkEvent to be processed, or NULL if no events are pending.
            The returned GdkEvent should be freed with gdk_event_free().
  Since 2.2

==== :GetMaximalCursorSize ====
'':GetMaximalCursorSize(self @ [[#T|T]], width @ [[..:..:Std:Object#T|Std.Object.T]], height @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the maximal size to use for cursors on display.
  display : a GdkDisplay
  width :   the return location for the maximal cursor width
  height :  the return location for the maximal cursor height
  Since 2.4

==== :GetNScreens ====
'':GetNScreens(self @ [[#T|T]]) : [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]''

  Gets the number of screen managed by the display.
  display : a GdkDisplay
  Returns : number of screens.
  Since 2.2

==== :GetName ====
'':GetName(self @ [[#T|T]]) : [[..:..:Std:String#T|Std.String.T]]''

  Gets the name of the display.
  display : a GdkDisplay
  Returns : a string representing the display name. This string is owned by GDK
            and should not be modified or freed.
  Since 2.2

==== :GetPointer ====
'':GetPointer(self @ [[#T|T]], screen @ [[..:..:Std:Object#T|Std.Object.T]], x @ [[..:..:Std:Object#T|Std.Object.T]], y @ [[..:..:Std:Object#T|Std.Object.T]], mask @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets the current location of the pointer and the current modifier mask for a
  given display.
  display : a GdkDisplay
  screen :  location to store the screen that the cursor is on, or NULL.
  x :       location to store root window X coordinate of pointer, or NULL.
  y :       location to store root window Y coordinate of pointer, or NULL.
  mask :    location to store current modifier mask, or NULL
  Since 2.2

==== :GetScreen ====
'':GetScreen(self @ [[#T|T]], screen_num @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Gtk:Gdk:Screen#T|Gtk.Gdk.Screen.T]]''

  Returns a screen object for one of the screens of the display.
  display :    a GdkDisplay
  screen_num : the screen number
  Returns :    the GdkScreen object
  Since 2.2

==== :GetWindowAtPointer ====
'':GetWindowAtPointer(self @ [[#T|T]], win_x @ [[..:..:Std:Object#T|Std.Object.T]], win_y @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]]''

  Obtains the window underneath the mouse pointer, returning the location of that
  window in win_x, win_y for screen. Returns NULL if the window under the mouse
  pointer is not known to GDK (for example, belongs to another application).
  display : a GdkDisplay
  win_x :   return location for origin of the window under the pointer
  win_y :   return location for origin of the window under the pointer
  Returns : the window under the mouse pointer, or NULL
  Since 2.2

==== :KeyboardUngrab ====
'':KeyboardUngrab(self @ [[#T|T]], time_ @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Release any keyboard grab
  display : a GdkDisplay.
  time_ :   a timestap (e.g GDK_CURRENT_TIME).
  Since 2.2

==== :ListDevices ====
'':ListDevices(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Returns the list of available input devices attached to display. The list is
  statically allocated and should not be freed.
  display : a GdkDisplay
  Returns : a list of GdkDevice
  Since 2.2

==== :PeekEvent ====
'':PeekEvent(self @ [[#T|T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Gets a copy of the first GdkEvent in the display's event queue, without
  removing the event from the queue. (Note that this function will not get more
  events from the windowing system. It only checks the events that have already
  been moved to the GDK event queue.)
  display : a GdkDisplay
            a copy of the first GdkEvent on the event queue, or NULL if no events
  Returns : are in the queue. The returned GdkEvent should be freed with
            gdk_event_free().
  Since 2.2

==== :PointerIsGrabbed ====
'':PointerIsGrabbed(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Test if the pointer is grabbed.
  display : a GdkDisplay
  Returns : TRUE if an active X pointer grab is in effect
  Since 2.2

==== :PointerUngrab ====
'':PointerUngrab(self @ [[#T|T]], time_ @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Release any pointer grab.
  display : a GdkDisplay.
  time_ :   a timestap (e.g. GDK_CURRENT_TIME).
  Since 2.2

==== :PutEvent ====
'':PutEvent(self @ [[#T|T]], event @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Appends a copy of the given event onto the front of the event queue for
  display.
  display : a GdkDisplay
  event :   a GdkEvent.
  Since 2.2

==== :RequestSelectionNotification ====
'':RequestSelectionNotification(self @ [[#T|T]], selection @ [[..:..:Std:Object#T|Std.Object.T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Request GdkEventOwnerChange events for ownership changes of the selection named
  by the given atom.
  display :   a GdkDisplay
  selection : the GdkAtom naming the selection for which ownership change
              notification is requested
  Returns :   whether GdkEventOwnerChange events will be sent.
  Since 2.6

==== :SetDoubleClickDistance ====
'':SetDoubleClickDistance(self @ [[#T|T]], distance @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the double click distance (two clicks within this distance count as a
  double click and result in a GDK_2BUTTON_PRESS event). See also
  gdk_display_set_double_click_time(). Applications should not set this, it is a
  global user-configured setting.
  display :  a GdkDisplay
  distance : distance in pixels
  Since 2.4

==== :SetDoubleClickTime ====
'':SetDoubleClickTime(self @ [[#T|T]], msec @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Sets the double click time (two clicks within this time interval count as a
  double click and result in a GDK_2BUTTON_PRESS event). Applications should not
  set this, it is a global user-configured setting.
  display : a GdkDisplay
  msec :    double click time in milliseconds (thousandths of a second)
  Since 2.2

==== :SetPointerHooks ====
'':SetPointerHooks(self @ [[#T|T]], new_hooks @ [[..:..:Gtk:Gdk:DisplayPointerHooks#T|Gtk.Gdk.DisplayPointerHooks.T]]) : [[..:..:Gtk:Gdk:DisplayPointerHooks#T|Gtk.Gdk.DisplayPointerHooks.T]]''

  This function allows for hooking into the operation of getting the current
  location of the pointer on a particular display. This is only useful for such
  low-level tools as an event recorder. Applications should never have any reason
  to use this facility.
  display :   a GdkDisplay
  new_hooks : a table of pointers to functions for getting quantities related to
              the current pointer position, or NULL to restore the default table.
  Returns :   the previous pointer hook table
  Since 2.2

==== :StoreClipboard ====
'':StoreClipboard(self @ [[#T|T]], clipboard_window @ [[..:..:Gtk:Gdk:Window#T|Gtk.Gdk.Window.T]], time_ @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]], targets @ [[..:..:Gtk:Gdk:Atom#T|Gtk.Gdk.Atom.T]], n_targets @ [[..:..:Std:Integer#SmallT|Std.Integer.SmallT]]) : [[..:..:Std:Object#T|Std.Object.T]]''

  Issues a request to the clipboard manager to store the clipboard data. On X11,
  this is a special program that works according to the freedesktop clipboard
  specification, available at http://www.freedesktop.org/Standards/clipboard-
  manager-spec.
  display :          a GdkDisplay
  clipboard_window : a GdkWindow belonging to the clipboard owner
  time_ :            a timestamp
  targets :           an array of targets that should be saved, or NULL if all
                     available targets should be saved.
  n_targets :        length of the targets array
  Since 2.6

==== :SupportsClipboardPersistence ====
'':SupportsClipboardPersistence(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns whether the speicifed display supports clipboard persistance; i.e. if
  it's possible to store the clipboard data after an application has quit. On X11
  this checks if a clipboard daemon is running.
  display : a GdkDisplay
  Returns : TRUE if the display supports clipboard persistance.
  Since 2.6

==== :SupportsComposite ====
'':SupportsComposite(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns TRUE if gdk_window_set_composited() can be used to redirect drawing on
  the window using compositing.
  Currently this only works on X11 with XComposite and XDamage extensions
  available.
  display : a GdkDisplay
  Returns : TRUE if windows may be composited.
  Since 2.12
  ***** Signal Details *****
  The "closed" signal
  void                user_function                      (GdkDisplay *display,
                                                          gboolean    is_error,
                                                          gpointer    user_data)
  : Run Last
  The ::closed signal is emitted when the connection to the windowing system for
  display is closed.
  display :   the object on which the signal is emitted
  is_error :  TRUE if the display was closed due to an error
  user_data : user data set when the signal handler was connected.
  Since 2.2

==== :SupportsCursorAlpha ====
'':SupportsCursorAlpha(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns TRUE if cursors can use an 8bit alpha channel on display. Otherwise,
  cursors are restricted to bilevel alpha (i.e. a mask).
  display : a GdkDisplay
  Returns : whether cursors can have alpha channels.
  Since 2.4

==== :SupportsCursorColor ====
'':SupportsCursorColor(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns TRUE if multicolored cursors are supported on display. Otherwise,
  cursors have only a forground and a background color.
  display : a GdkDisplay
  Returns : whether cursors can have multiple colors.
  Since 2.4

==== :SupportsInputShapes ====
'':SupportsInputShapes(self @ [[#T|T]]) : [[..:..:Std:Symbol#T|Std.Symbol.T]]''

  Returns TRUE if gdk_window_input_shape_combine_mask() can be used to modify the
  input shape of windows on display.
  display : a GdkDisplay
  Returns : TRUE if windows with modified input shape are supported
  Since 2.10

==== GetDefault ====
''GetDefault() : [[..:..:Gtk:Gdk:Display#T|Gtk.Gdk.Display.T]]''

  Gets the default GdkDisplay. This is a convenience function for:
    gdk_display_manager_get_default_display (gdk_display_manager_get ())
  Returns : a GdkDisplay, or NULL if there is no default display.
  Since 2.2

==== OpenDefaultLibgtkOnly ====
''OpenDefaultLibgtkOnly() : [[..:..:Gtk:Gdk:Display#T|Gtk.Gdk.Display.T]]''


==== Open ====
''Open(display_name : [[..:..:Std:String#T|Std.String.T]]) : [[..:..:Gtk:Gdk:Display#T|Gtk.Gdk.Display.T]]''

  Opens a display.
  display_name : the name of the display to open
  Returns :      a GdkDisplay, or NULL if the display could not be opened.
  Since 2.2

==== GetType ====
''GetType() : [[..:..:Gtk:GObject:Type#T|Gtk.GObject.Type.T]]''


