===== Goal Directed Evaluation =====
Unlike in most other languages, ([[:Links#Icon]] being the main exception), expressions in Wrapl do not simply evaluate to a single result. Instead, they may //succeed// in producing one or more results, or //fail// to produce any result. For example, the expression ''10'' can only produce a single value, ''10'', whereas the expression ''10 | 20'' can produce the value ''10'', followed by the value ''20''. The special expression ''back'' fails to produce any value.

In general, an expression will only produce one value. However, if a later part in the same expression fails, then the earlier expression may be //resumed// and produce another value. If this happens, then evaluation continues after the resumed expression. If no earlier expression can be resumed, the entire expression fails. For example: ''Out:write(10 | 20);'' will only write a single value, ''10''. However, ''Out:write(10 | 20) & back;'' will write ''1020''.

There are no boolean values in Wrapl. For example, the comparison operators do not return ''true'' or ''false'', instead they succeed and produce the right operand if they are true and fail if they are false. For example: ''Out:write(1 < 2)'' will write ''2'' whereas ''Out:write(1 > 2)'' will fail. Finally, ''Out:write(1 > (2 | 0))'' will write ''0''.

This success/failure of expressions can be used in conditional expressions to control program flow similar to if-statements in other languages. A conditional expression looks like "//cond//'' =''''> ''//expr1//'' /''''/ ''//expr2//", and returns the values produced by //expr1// if //cond// succeeds and the values produced by ''//expr2//'' if //cond// fails. Either "'' =''''> ''//expr1//" or "''/''''/ ''//expr2//" may be omitted, in which case ''back'' is used instead of the omitted expression. Note that //cond// is never resumed, even if //expr1// or //expr2// fails.

Expressions that produce more than one value can be constructed using the syntax "//A//'' | ''//B//" which produces all the values that //A// produces, followed by all the values that //B// produces. In addition, any function call can produced more than one value, if the function returned using "''SUSP ''//value//" instead of ''RET''. In this case, if the function call is resumed, execution continues in the called function just after the "''SUSP ''//value//" expression. For example: "''<> (SUSP 1; SUSP 2; RET 3)''" will generate the values ''1'', ''2'' and ''3''. A function can fail to produce any value if it returns using ''FAIL''.