#!/usr/bin/riva
MOD Main;

IMP Std, IO;

IMP Util USE Archive, Persist;
IMP Sys USE FileSys;

IMP IO.Terminal USE Out;
IMP Gtk.Gdk;
IMP Gtk.Gtk;
IMP Gtk.Glade;
IMP Gtk.GObject;

DEF ToolbarStyles <- {
	0 IS Gtk.ToolbarStyle.Icons,
	1 IS Gtk.ToolbarStyle.Text,
	2 IS Gtk.ToolbarStyle.Both
};

DEF conf <- (Persist.Load("config"); RECV msg DO {
	"toolbar-style" IS 0,
	"zoom-level" IS :"fit-both"
	
});

DEF ui <- Glade.Loader.Load("mangax.glade", Main);
VAR thumbnailStore <- Gtk.ListStore.Newv(3, [GObject.Type.STRING, Gdk.Pixbuf.GetType(), GObject.Type.STRING]);
ui.thumbnailView:SetModel(thumbnailStore);
ui.thumbnailView:SetTextColumn(0);
ui.thumbnailView:SetPixbufColumn(1);

VAR mainImageWidth <- -1, mainImageHeight <- -1;

DEF OnMainWindowConfigure!(window, event) (
	VAR rect <- ui.mainImage:Allocation;
	WHEN conf["zoom-level"]
	IS :"fit-both" DO (
		mainImageWidth <- rect:Width;
		mainImageHeight <- rect:Height;
	)
	IS :"fit-height" DO (
		mainImageHeight <- rect:Height;
	)
	IS :"fit-width" DO (
		mainImageWidth <- rect:Width;
	);
	RET :false;
);

DEF OnQuit!() (
	Gtk.Main.Quit();
	Persist.Store("config", conf);
	RECV msg DO Out:writes(msg, "\n");
	RET :false;
);

DEF OnAbout!() (
	ui.aboutDialog:Run;
	ui.aboutDialog:Hide;
);

DEF FlattenDir(base, subdir) (
	VAR file, path;
	VAR files <- ALL FileSys.ListDir(subdir);
	files:remove(".");
	files:remove("..");
	EVERY path <- subdir + "/" + (file <- files:values) DO (
		FileSys.FileType(path):and(FileSys.DIRFILE) ~= 0 => (
			FlattenDir(base, path);
			FileSys.RemoveDir(path);
		) // (
			FileSys.Rename(path, base + "/" + file);
		);
	);
);

DEF FlattenArchive(file) (
	VAR dir <- FileSys.TempFile();
	FileSys.MakeDir(dir, 511);
	Archive.Extract(file, dir);
	FlattenDir(dir, dir);
	RET dir;
);

DEF OnFileOpen!() (
	thumbnailStore:Clear;
	ui.fileChooserDialog:Run = Gtk.ResponseType.Ok => (
		VAR file <- ui.fileChooserDialog:GetFilename;
		VAR dir;
		Archive.Type(file) => (
			dir <- FlattenArchive(file);
		) // (
			dir <- ui.fileChooserDialog:GetCurrentFolder;
		);
		VAR iter <- Gtk.TreeIter.New();
		VAR value <- GObject.Value.New();
		VAR index <- 0;
		VAR file, path;
		EVERY path <- dir + "/" + (file <- Sys.FileSys.ListDir(dir)) DO (
			value:Set(Gdk.Pixbuf.NewFromFileAtSize(path, 64, 128, NIL));
			thumbnailStore:Append(iter);
			thumbnailStore:SetValue(iter, 1, value);
			value:Unset;
			value:Set(path);
			thumbnailStore:SetValue(iter, 2, value);
			value:Unset;
			index <- index + 1;
			value:Set(index @ Std.String.T);
			thumbnailStore:SetValue(iter, 0, value);
			value:Unset;
			RECV msg DO ();
		);
	);
	ui.fileChooserDialog:Hide;
);

DEF OnThumbnailActivated!(iconview, path) (
	VAR iter <- Gtk.TreeIter.New();
	VAR value <- GObject.Value.New();
	thumbnailStore:GetIter(iter, path);
	thumbnailStore:GetValue(iter, 2, value);
	VAR rect <- ui.mainImage:Allocation;
	VAR pixbuf <- Gdk.Pixbuf.NewFromFileAtSize(value:Get, mainImageWidth, mainImageHeight, NIL);
	value:Unset;
	ui.mainImage:SetFromPixbuf(pixbuf);
	pixbuf:Unref;
);

DEF OnPrefsDialogRealize!() (
	ui.toolbarStyleComboBox:SetActive(conf["toolbar-style"]);
);

DEF preferenceChanges <- {};

DEF ApplyPreferences!() (
	EVERY (preferenceChanges:values)();
	preferenceChanges:empty;
);

DEF OnEditPreferences!() (
	preferenceChanges:empty;
	ui.prefsDialog:Run = Gtk.ResponseType.Ok => ApplyPreferences();
	ui.prefsDialog:Hide;
);

DEF OnToolbarStyleChanged!(combobox) (
	ui.mainToolbar:SetStyle(ToolbarStyles[conf["toolbar-style"] <- combobox:GetActive]);
);

DEF OnViewFitNone!() (
	mainImageWidth <- -1;
	mainImageHeight <- -1;
	conf["zoom-level"] <- :"fit-none";
);

VAR imageDragged;
VAR imageDragX;
VAR imageDragY;
VAR imageDragHandler <- DragHandlerIgnore;

DEF OnImageButtonPress!(widget, event) (
	event <- event:Button;
	WHEN event:Button
	IS 1 DO (
		imageDragged <- :false;
		imageDragX <- event:XRoot;
		imageDragY <- event:YRoot;
		imageDragHandler <- DragHandlerMoveImage;
	)
	IS 3 DO ui.popupMenu:Popup(Gtk.Widget.Nil, Gtk.Widget.Nil, Std.Function.Nil, Std.Address.Nil, 3, event:Time);
	RET :true;
);

DEF OnImageButtonRelease!(widget, event) (
	event <- event:Button;
	imageDragHandler <- DragHandlerIgnore;
	RET :true;
);

DEF DragHandlerIgnore() (
	Out:writes("Ignoring drag\n");
	:true;
);

DEF DragHandlerMoveImage(event) (
	event <- event:Motion;
	imageDragged <- :true;
	DEF hadjust <- ui.mainScrolledWindow:GetHadjustment;
	DEF vadjust <- ui.mainScrolledWindow:GetVadjustment;
	VAR x <- event:XRoot;
	VAR y <- event:YRoot;
	hadjust:ClampPage(hadjust:GetValue - x + imageDragX, hadjust:Upper);
	vadjust:ClampPage(vadjust:GetValue - y + imageDragY, vadjust:Upper);
	imageDragX <- x;
	imageDragY <- y;
	RECV msg DO Out:writes("msg = ", msg, "\n");
	RET :true;
);

DEF OnImageMotionNotify!(widget, event) (
	imageDragHandler(event);
);

--ui.mainToolbar:SetStyle(ToolbarStyles[conf["toolbar-style"]]);
ui.mainWindow:ShowAll;
Gtk.Main.Run();

END Main.
