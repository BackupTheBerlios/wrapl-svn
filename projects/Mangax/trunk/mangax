#!/usr/local/bin/riva
MOD Main;

IMP Sys, Std, IO, Util;

IMP IO.Terminal USE Out;
IMP Gtk.Gdk;
IMP Gtk.Gtk;
IMP Gtk.Glade;
IMP Gtk.GObject;

DEF conf <- (Util.Persist.Load("config"); RECV msg DO {
	"toolbar-style" IS Gtk.ToolbarStyle.Both,
	"zoom-level" IS :"fit-both"
	
});

DEF ui <- Glade.Loader.Load("mangax.glade", Main);
VAR thumbnailStore <- Gtk.ListStore.Newv(3, [GObject.Type.STRING, Gdk.Pixbuf.GetType(), GObject.Type.STRING]);
ui.thumbnailView:SetModel(thumbnailStore);
ui.thumbnailView:SetTextColumn(0);
ui.thumbnailView:SetPixbufColumn(1);

VAR mainImageWidth, mainImageHeight;

DEF OnMainWindowConfigure!(window, event) (
	VAR rect <- ui.mainImage:Allocation;
	mainImageWidth <- rect:Width;
	mainImageHeight <- rect:Height;
	RET :false;
);

DEF OnQuit!() (
	Gtk.Main.Quit();
	Util.Persist.Store("config", conf);
	RECV msg DO Out:writes(msg, "\n");
	RET :false;
);

DEF OnAbout!() (
	ui.aboutDialog:Run;
	ui.aboutDialog:Hide;
);

DEF OnFileOpen!() (
	thumbnailStore:Clear;
	ui.fileChooserDialog:Run = Gtk.ResponseType.Ok => (
		VAR value <- GObject.Value.New();
		VAR iter <- Gtk.TreeIter.New();
		VAR dir <- ui.fileChooserDialog:GetCurrentFolder;
		VAR index <- 0;
		VAR file, path; EVERY path <- dir + "/" + (file <- Sys.FileSys.ListDir(dir)) DO (
			value:Set(Gdk.Pixbuf.NewFromFileAtSize(path, 64, 128, NIL));
			thumbnailStore:Append(iter);
			thumbnailStore:SetValue(iter, 1, value);
			value:Unset;
			value:Set(path);
			thumbnailStore:SetValue(iter, 2, value);
			value:Unset;
			index <- index + 1;
			value:Set(index @ Std.String.T);
			thumbnailStore:SetValue(iter, 0, value);
			value:Unset;
			RECV msg DO ();
		);
	);
	ui.fileChooserDialog:Hide;
);

DEF OnThumbnailActivated!(iconview, path) (
	VAR iter <- Gtk.TreeIter.New();
	VAR value <- GObject.Value.New();
	thumbnailStore:GetIter(iter, path);
	thumbnailStore:GetValue(iter, 2, value);
	VAR rect <- ui.mainImage:Allocation;
	VAR pixbuf <- Gdk.Pixbuf.NewFromFileAtSize(value:Get, mainImageWidth, mainImageHeight, NIL);
	value:Unset;
	ui.mainImage:SetFromPixbuf(pixbuf);
);

VAR preferenceChanges;

DEF OnEditPreferences!() (
	preferenceChanges <- {};
	ui.prefsDialog:Run;
	ui.prefsDialog:Hide;
);

DEF OnToolbarStyleChanged!(combobox) (
	WHEN combobox:GetActive
	IS 0 DO preferenceChanges:insert("toolbar-style", <> ui.mainToolbar:SetStyle(conf["toolbar-style"] <- Gtk.ToolbarStyle.Icons))
	IS 1 DO preferenceChanges:insert("toolbar-style", <> ui.mainToolbar:SetStyle(conf["toolbar-style"] <- Gtk.ToolbarStyle.Text))
	IS 2 DO preferenceChanges:insert("toolbar-style", <> ui.mainToolbar:SetStyle(conf["toolbar-style"] <- Gtk.ToolbarStyle.Both))
	;
);

DEF OnImageButtonPressed!(eventbox, event) (
	event <- event:Button;
	event:Button = 3 => ui.popupMenu:Popup(Gtk.Widget.Nil, Gtk.Widget.Nil, Std.Function.Nil, Std.Address.Nil, 3, event:Time);
	RET :true;
);

ui.mainWindow:ShowAll;
Gtk.Main.Run();

END Main.
