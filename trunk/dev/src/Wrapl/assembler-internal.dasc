#include "system.h"

|.arch x86
|.section code, data
|.type STATE, state_t
|.type BSTATE, bstate_t
|.type CLOSURE, closure_t
|.type VALUE, Std$Object_t
|.type TYPE, Std$Type_t
|.type LIST, Std$List_t
|.type LISTNODE, Std$List_node
|.type SMALL, Std$Integer_smallt

|.actionlist ActionList
|.globals Globals_

void encode_entry(assembler_t *Assembler) {
	|.code
	//| int3
	if (Assembler->NoOfUpScopes) {
		| lea esi, CLOSURE:ecx->Scopes
	};
	| push dword Assembler->Size
	| call &Riva$Memory$alloc
	| mov [esp], eax
	if (Assembler->NoOfParams) {
		| push edi
		| push esi
	};
	if (Assembler->NoOfUpScopes) {
		| lea edi, [eax + Assembler->UpScopes]
		| mov ecx, Assembler->NoOfUpScopes
		| rep; movsd
	};
	| lea edi, [eax + Assembler->Locals]
	| mov [eax + Assembler->Scopes], edi
	if (Assembler->NoOfParams) {
		| pop ebx
		if (CmovSupport) {
			| mov edx, Assembler->NoOfParams
			| cmp edx, ebx
			| cmova edx, ebx
		} else {
			| sub ebx, Assembler->NoOfParams
			| sbb edx, edx
			| and edx, ebx
			| add edx, Assembler->NoOfParams
		};
		| lea ecx, [edx * 2]
		| pop esi
		| rep; movsd
		| neg edx
		| lea ecx, [edx * 2 + 2 * Assembler->NoOfLocals]
		| mov eax, Std$Object$Nil
		| rep; stosd
	} else if (Assembler->NoOfLocals) {
		| mov ecx, 2 * Assembler->NoOfLocals
		| mov eax, Std$Object$Nil
		| rep; stosd
	};
	| pop eax
	| mov STATE:eax->Run, dword &run_state
	| mov BSTATE:eax->Handler, dword &resend_message
	| push ebp
	| mov ebp, eax
	| xor edx, edx
};

void label_t::encode(assembler_t *Assembler) {
	if (Referenced) {
		| =>this:
	};
};

void link_inst_t::encode(assembler_t *Assembler) {
	| jmp =>Link
};

void init_trap_inst_t::encode(assembler_t *Assembler) {
	| lea eax, [ebp + Assembler->Temps + 8 * Trap + 4]
	| mov [eax - 4], eax
	| mov [eax], =>Failure
};

void push_trap_inst_t::encode(assembler_t *Assembler) {
	| lea ebx, [ebp + Assembler->Temps + 8 * Temp]
	| mov eax, [ebp + Assembler->Temps + 8 * Trap]
	| mov [ebp + Assembler->Temps + 8 * Trap], ebx
	| mov STATE:ebx->Run, =>Failure
	| mov STATE:ebx->Chain, eax
};

void resume_inst_t::encode(assembler_t *Assembler) {
	| add esp, 12
};

void scope_inst_t::encode(assembler_t *Assembler) {
	| push dword Size * 8
	| call &Riva$Memory$alloc
	| pop ecx
	| mov [ebp + Assembler->Scopes + 4 * Index], eax
	| mov edi, eax
	| mov eax, Std$Object$Nil
	| mov ecx, Size * 2
	| rep; stosd
};

static inline void load_closure(assembler_t *Assembler, operand_t *Operand) {
	int NoOfUpScopes = 0;
	for (upscope_t *UpScope = Operand->UpScopes; UpScope; UpScope = UpScope->Next) ++NoOfUpScopes;
	| push sizeof(closure_t) + 4 * NoOfUpScopes
	| call &Riva$Memory$alloc
	| pop ecx
	| mov dword VALUE:eax->Type, WraplT
	| mov dword CLOSURE:eax->Entry, Operand->Entry
	for (upscope_t *UpScope = Operand->UpScopes; UpScope; UpScope = UpScope->Next) {
		if (UpScope->Index < 0) {
			| mov ecx, [ebp + Assembler->UpScopes - 4 * UpScope->Index + 8]
		} else {
			| mov ecx, [ebp + Assembler->Scopes + 4 * UpScope->Index]
		};
		| mov [eax + 8 + 4 * --NoOfUpScopes], ecx
	};
	| mov ecx, eax
};

void load_inst_t::encode(assembler_t *Assembler) {
	switch (Operand->Type) {
	case operand_t::CNST: {
		switch (Type) {
		case LOAD_VAL: {
			| mov ecx, Operand->Value
			break;
		};
		case LOAD_REF: {
			| xor edx, edx
			break;
		};
		case LOAD_ARG:
		case LOAD_BOTH: {
			| mov ecx, Operand->Value
			| xor edx, edx
			break;
		};
		};
		break;
	};
	case operand_t::GVAR: {
		switch (Type) {
		case LOAD_VAL: {
			| mov ecx, [Operand->Address]
			break;
		};
		case LOAD_REF:
		case LOAD_ARG: {
			| mov edx, Operand->Address
			break;
		};
		case LOAD_BOTH: {
			| mov edx, Operand->Address
			| mov ecx, [edx]
			break;
		};
		};
		break;
	};
	case operand_t::LVAR: {
		switch (Type) {
		case LOAD_VAL: {
			switch (Operand->Loop) {
			case -1: {
				| mov ecx, [ebp + Assembler->Temps + 8 * Operand->Index]
				break;
			};
			case 0: {
				| mov ecx, [ebp + Assembler->Locals + 8 * Operand->Index]
				break;
			};
			default: {
				if (Operand->Loop < 0) {
					| mov ecx, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
				} else {
					| mov ecx, [ebp + Assembler->Scopes + 4 * Operand->Loop]
				};
				| mov ecx, [ecx + 8 * Operand->Index]
				break;
			};
			};
			break;
		};
		case LOAD_REF:
		case LOAD_ARG: {
			switch (Operand->Loop) {
			case -1: {
				| lea edx, [ebp + Assembler->Temps + 8 * Operand->Index]
				break;
			};
			case 0: {
				| lea edx, [ebp + Assembler->Locals + 8 * Operand->Index]
				break;
			};
			default: {
				if (Operand->Loop < 0) {
					| mov edx, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
				} else {
					| mov edx, [ebp + Assembler->Scopes + 4 * Operand->Loop]
				};
				if (Operand->Index) {
					| add edx, 8 * Operand->Index
				};
				break;
			};
			};
			break;
		};
		case LOAD_BOTH: {
			switch (Operand->Loop) {
			case -1: {
				| lea edx, [ebp + Assembler->Temps + 8 * Operand->Index]
				| mov ecx, [edx]
				break;
			};
			case 0: {
				| lea edx, [ebp + Assembler->Locals + 8 * Operand->Index]
				| mov ecx, [edx]
				break;
			};
			default: {
				if (Operand->Loop < 0) {
					| mov edx, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
				} else {
					| mov edx, [ebp + Assembler->Scopes + 4 * Operand->Loop]
				};
				if (Operand->Index) {
					| add edx, 8 * Operand->Index
				};
				| mov ecx, [edx]
				break;
			};
			};
			break;
		};
		};
		break;
	};
	case operand_t::LREF: {
		switch (Type) {
		case LOAD_VAL: {
			switch (Operand->Loop) {
			case -1: {
				| mov ecx, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
				| mov ecx, [ecx]
				break;
			};
			case 0: {
				| mov ecx, [ebp + Assembler->Locals + 8 * Operand->Index + 4]
				| mov ecx, [ecx]
				break;
			};
			default: {
				if (Operand->Loop < 0) {
					| mov ecx, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
				} else {
					| mov ecx, [ebp + Assembler->Scopes + 4 * Operand->Loop]
				};
				| mov ecx, [ecx + 8 * Operand->Index + 4]
				| mov ecx, [ecx]
				break;
			};
			};
			break;
		};
		case LOAD_REF:
		case LOAD_ARG: {
			switch (Operand->Loop) {
			case -1: {
				| mov edx, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
				break;
			};
			case 0: {
				| mov edx, [ebp + Assembler->Locals + 8 * Operand->Index + 4]
				break;
			};
			default: {
				if (Operand->Loop < 0) {
					| mov edx, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
				} else {
					| mov edx, [ebp + Assembler->Scopes + 4 * Operand->Loop]
				};
				| mov edx, [edx + 8 * Operand->Index + 4]
				break;
			};
			};
			break;
		};
		case LOAD_BOTH: {
			switch (Operand->Loop) {
			case -1: {
				| mov edx, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
				| mov ecx, [edx]
				break;
			};
			case 0: {
				| mov edx, [ebp + Assembler->Locals + 8 * Operand->Index + 4]
				| mov ecx, [edx]
				break;
			};
			default: {
				if (Operand->Loop < 0) {
					| mov edx, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
				} else {
					| mov edx, [ebp + Assembler->Scopes + 4 * Operand->Loop]
				};
				| mov edx, [edx + 8 * Operand->Index + 4]
				| mov ecx, [edx]
				break;
			};
			};
			break;
		};
		};
		break;
	};
	case operand_t::TEMP: {
		switch (Type) {
		case LOAD_VAL: {
			| mov ecx, [ebp + Assembler->Temps + 8 * Operand->Index]
			break;
		};
		case LOAD_REF: {
			| mov edx, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
			break;
		};
		case LOAD_ARG:
		case LOAD_BOTH: {
			| mov ecx, [ebp + Assembler->Temps + 8 * Operand->Index]
			| mov edx, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
			break;
		};
		};
		break;
	};
	case operand_t::CLSR: {
		switch (Type) {
		case LOAD_VAL: {
			load_closure(Assembler, Operand);
			break;
		};
		case LOAD_REF: {
			| xor edx, edx
			break;
		};
		case LOAD_ARG:
		case LOAD_BOTH: {
			load_closure(Assembler, Operand);
			| xor edx, edx
			break;
		};
		};
		break;
	};
	};
};

static inline void store_reg(assembler_t *Assembler, operand_t *Operand) {
	switch (Operand->Type) {
	case operand_t::GVAR: {
		| mov [Operand->Address], ecx
		break;
	};
	case operand_t::LVAR: {
		switch (Operand->Loop) {
		case -1: {
			| mov [ebp + Assembler->Temps + 8 * Operand->Index], ecx
			break;
		};
		case 0: {
			| mov [ebp + Assembler->Locals + 8 * Operand->Index], ecx
			break;
		};
		default: {
			if (Operand->Loop < 0) {
				| mov eax, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
			} else {
				| mov eax, [ebp + Assembler->Scopes + 4 * Operand->Loop]
			};
			| mov [eax + 8 * Operand->Index], ecx
			break;
		};
		};
		break;
	};
	case operand_t::LREF: {
		switch (Operand->Loop) {
		case -1: {
			| mov eax, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
                        | test eax, eax
                        | jz &incorrect_assign
			| mov [eax], ecx
			break;
		};
		case 0: {
			| mov eax, [ebp + Assembler->Locals + 8 * Operand->Index + 4]
                        | test eax, eax
                        | jz &incorrect_assign
			| mov [eax], ecx
			break;
		};
		default: {
			if (Operand->Loop < 0) {
				| mov eax, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
			} else {
				| mov eax, [ebp + Assembler->Scopes + 4 * Operand->Loop]
			};
			| mov eax, [eax + 8 * Operand->Index + 4]
                        | test eax, eax
                        | jz &incorrect_assign
			| mov [eax], ecx
			break;
		};
		};
		break;
	};
	case operand_t::TEMP: {
		| mov eax, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
                | test eax, eax
                | jz &incorrect_assign
		| mov [eax], ecx
		break;
	};
	};
};

void store_con_inst_t::encode(assembler_t *Assembler) {
	switch (Type) {
	case LOAD_REF:
		| xor edx, edx;
	case LOAD_NONE:
		switch (Operand->Type) {
		case operand_t::GVAR: {
			| mov dword [Operand->Address], Value
			break;
		};
		case operand_t::LVAR: {
			switch (Operand->Loop) {
			case -1: {
				| mov dword [ebp + Assembler->Temps + 8 * Operand->Index], Value
				break;
			};
			case 0: {
				| mov dword [ebp + Assembler->Locals + 8 * Operand->Index], Value
				break;
			};
			default: {
				if (Operand->Loop < 0) {
					| mov eax, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
				} else {
					| mov eax, [ebp + Assembler->Scopes + 4 * Operand->Loop]
				};
				| mov dword [eax + 8 * Operand->Index], Value
				break;
			};
			};
			break;
		};
		case operand_t::LREF: {
			switch (Operand->Loop) {
			case -1: {
				| mov eax, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
                                | test eax, eax
                                | jz &incorrect_assign
				| mov dword [eax], Value
				break;
			};
			case 0: {
				| mov eax, [ebp + Assembler->Locals + 8 * Operand->Index + 4]
                                | test eax, eax
                                | jz &incorrect_assign
				| mov dword [eax], Value
				break;
			};
			default: {
				if (Operand->Loop < 0) {
					| mov eax, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
				} else {
					| mov eax, [ebp + Assembler->Scopes + 4 * Operand->Loop]
				};
				| mov eax, [eax + 8 * Operand->Index + 4]
                                | test eax, eax
                                | jz &incorrect_assign
				| mov dword [eax], Value
				break;
			};
			};
			break;
		};
		case operand_t::TEMP: {
			| mov eax, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
                        | test eax, eax
                        | jz &incorrect_assign
			| mov dword [eax], Value
			break;
		};
		case operand_t::REGR: {
                        | test edx, edx
                        | jz &incorrect_assign
			| mov dword [edx], Value
			break;
		};
		};
		break;
	case LOAD_ARG: case LOAD_BOTH:
		| xor edx, edx
	case LOAD_VAL:
		| mov ecx, Value
		store_reg(Assembler, Operand);
		break;
	};
};

void store_val_inst_t::encode(assembler_t *Assembler) {
	store_reg(Assembler, Operand);
};

void store_ref_inst_t::encode(assembler_t *Assembler) {
	switch (Operand->Loop) {
	case -1: {
		| mov [ebp + Assembler->Temps + 8 * Operand->Index + 4], edx
		break;
	};
	case 0: {
		| mov [ebp + Assembler->Locals + 8 * Operand->Index + 4], edx
		break;
	};
	default: {
		if (Operand->Loop < 0) {
			| mov eax, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
		} else {
			| mov eax, [ebp + Assembler->Scopes + 4 * Operand->Loop]
		};
		| mov [eax + 8 * Operand->Index + 4], edx
		break;
	};
	};
};

void store_arg_inst_t::encode(assembler_t *Assembler) {
	switch (Operand->Type) {
	case operand_t::CNST: {
		| mov dword [ebp + Assembler->Temps + 8 * Index], Operand->Value
		| mov dword [ebp + Assembler->Temps + 8 * Index + 4], 0
		break;
	};
	case operand_t::GVAR: {
		| mov dword [ebp + Assembler->Temps + 8 * Index + 4], Operand->Value
		break;
	};
	case operand_t::LVAR: {
		switch (Operand->Loop) {
		case -1: {
			| lea edx, [ebp + Assembler->Temps + 8 * Operand->Index]
			| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
			break;
		};
		case 0: {
			| lea edx, [ebp + Assembler->Locals + 8 * Operand->Index]
			| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
			break;
		};
		default: {
			if (Operand->Loop < 0) {
				| mov edx, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
			} else {
				| mov edx, [ebp + Assembler->Scopes + 4 * Operand->Loop]
			};
			if (Operand->Index) {
				| add edx, 8 * Operand->Index
			};
			| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
			break;
		};
		};
		break;
	};
	case operand_t::LREF: {
		switch (Operand->Loop) {
		case -1: {
			| mov edx, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
			| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
			break;
		};
		case 0: {
			| mov edx, [ebp + Assembler->Locals + 8 * Operand->Index + 4]
			| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
			break;
		};
		default: {
			if (Operand->Loop < 0) {
				| mov edx, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
			} else {
				| mov edx, [ebp + Assembler->Scopes + 4 * Operand->Loop]
			};
			| mov edx, [edx + 8 * Operand->Index + 4]
			| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
			break;
		};
		};
		break;
	};
	case operand_t::TEMP: {
		| mov ecx, [ebp + Assembler->Temps + 8 * Operand->Index]
		| mov edx, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
		| mov [ebp + Assembler->Temps + 8 * Index], ecx
		| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
		break;
	};
	case operand_t::CLSR: {
		load_closure(Assembler, Operand);
		| mov [ebp + Assembler->Temps + 8 * Index], ecx
		| mov dword [ebp + Assembler->Temps + 8 * Index + 4], 0
		break;
	};
	case operand_t::REGR: {
		| mov [ebp + Assembler->Temps + 8 * Index], ecx
		| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
		break;
	};
	};
};

void fixup_arg_inst_t::encode(assembler_t *Assembler) {
	switch (Operand->Type) {
	case operand_t::CNST: {
		break;
	};
	case operand_t::GVAR: {
		| mov eax, [Operand->Address]
		| mov [ebp + Assembler->Temps + 8 * Index], eax
		break;
	};
	case operand_t::LVAR: {
		switch (Operand->Loop) {
		case -1: {
			| mov eax, [ebp + Assembler->Temps + 8 * Operand->Index]
			| mov [ebp + Assembler->Temps + 8 * Index], eax
			break;
		};
		case 0: {
			| mov eax, [ebp + Assembler->Locals + 8 * Operand->Index]
			| mov [ebp + Assembler->Temps + 8 * Index], eax
			break;
		};
		default: {
			| mov eax, [ebp + Assembler->Temps + 8 * Index + 4]
			| mov eax, [eax]
			| mov [ebp + Assembler->Temps + 8 * Index], eax
			break;
		};
		};
		break;
	};
	case operand_t::LREF: {
		| mov eax, [ebp + Assembler->Temps + 8 * Index + 4]
		| mov eax, [eax]
		| mov [ebp + Assembler->Temps + 8 * Index], eax
		break;
	};
	case operand_t::TEMP: {
		| mov eax, [ebp + Assembler->Temps + 8 * Index + 4]
		| test eax, eax
		| jz >1
		| mov eax, [eax]
		| mov [ebp + Assembler->Temps + 8 * Index], eax
		| 1:
		break;
	};
	case operand_t::CLSR: {
		break;
	};
	case operand_t::REGR: {
		| mov eax, [ebp + Assembler->Temps + 8 * Index + 4]
		| test eax, eax
		| jz >1
		| mov eax, [eax]
		| mov [ebp + Assembler->Temps + 8 * Index], eax
		| 1:
		break;
	};
	};
};

void store_tmp_inst_t::encode(assembler_t *Assembler) {
	| mov [ebp + Assembler->Temps + 8 * Index], ecx
	| mov [ebp + Assembler->Temps + 8 * Index + 4], edx
};

void flush_inst_t::encode(assembler_t *Assembler) {
};

void invoke_inst_t::encode(assembler_t *Assembler) {
	if (Count) {
		| mov esi, Count
		| lea edi, [ebp + Assembler->Temps + 8 * Args]
	} else {
		| xor esi, esi
	};
	| push Assembler->Temps + 8 * Trap
	| call &invoke_function
};

void back_inst_t::encode(assembler_t *Assembler) {
	| mov edi, Assembler->Temps + 8 * Trap
	| jmp &backtrack
};

void ret_inst_t::encode(assembler_t *Assembler) {
	| xor eax, eax
	| pop ebp
	| ret
};

void susp_inst_t::encode(assembler_t *Assembler) {
	| mov BSTATE:ebx, ebp
	| mov BSTATE:ebx->Val, ecx
	| mov BSTATE:ebx->Ref, edx
	| mov BSTATE:ebx->Code, dword >1
	| or eax, -1
	| pop ebp
	| ret
	| 1:
};

void fail_inst_t::encode(assembler_t *Assembler) {
	| xor eax, eax
	| pop ebp
	| inc eax
	| ret
};

void recv_inst_t::encode(assembler_t *Assembler) {
	if (Handler) {
		| mov BSTATE:ebp->Handler, =>Handler
	} else {
		| mov BSTATE:ebp->Handler, &resend_message
	};
};

void send_inst_t::encode(assembler_t *Assembler) {
	| mov eax, 2
	| jmp dword BSTATE:ebp->Handler
};

void comp_inst_t::encode(assembler_t *Assembler) {
	switch (Operand->Type) {
	case operand_t::CNST: {
		| cmp ecx, Operand->Value
		break;
	};
	case operand_t::GVAR: {
		| cmp ecx, [Operand->Address]
		break;
	};
	case operand_t::LVAR: {
		switch (Operand->Loop) {
		case -1: {
			| cmp ecx, [ebp + Assembler->Temps + 8 * Operand->Index]
			break;
		};
		case 0: {
			| cmp ecx, [ebp + Assembler->Locals + 8 * Operand->Index]
			break;
		};
		default: {
			if (Operand->Loop < 0) {
				| mov eax, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
			} else {
				| mov eax, [ebp + Assembler->Scopes + 4 * Operand->Loop]
			};
			| cmp ecx, [eax + 8 * Operand->Index]
			break;
		};
		};
		break;
	};
	case operand_t::LREF: {
		switch (Operand->Loop) {
		case -1: {
			| mov eax, [ebp + Assembler->Temps + 8 * Operand->Index + 4]
			| cmp ecx, [eax]
			break;
		};
		case 0: {
			| mov eax, [ebp + Assembler->Locals + 8 * Operand->Index + 4]
			| cmp ecx, [eax]
			break;
		};
		default: {
			if (Operand->Loop < 0) {
				| mov eax, [ebp + Assembler->UpScopes - 4 * Operand->Loop - 8]
			} else {
				| mov eax, [ebp + Assembler->Scopes + 4 * Operand->Loop]
			};
			| mov eax, [eax + 8 * Operand->Index + 4]
			| cmp ecx, [eax]
			break;
		};
		};
		break;
	};
	case operand_t::TEMP: {
		| cmp ecx, [ebp + Assembler->Temps + 8 * Operand->Index]
		break;
	};
	case operand_t::CLSR: {
		| cmp ecx, 0
		break;
	};
	};
	if (Equal) {
		| jne =>Failure
	} else {
		| je =>Failure
	};
};

typedef struct select_integer_entry_t {
	uint32_t Key;
	label_t *Label;
} select_integer_entry_t;

static void select_integer_entries_sort(select_integer_entry_t *A, select_integer_entry_t *B) {
	if (A >= B) return;
	select_integer_entry_t *C = A, *D = B;
	select_integer_entry_t T = *A, S = *B;
	while (C < D) {
		if (S.Key < T.Key) {
			*C = S;
			++C;
			S = *C;
		} else {
			*D = S;
			--D;
			S = *D;
		};
	};
	*C = T;
	select_integer_entries_sort(A, C - 1);
	select_integer_entries_sort(C + 1, B);
};

void select_integer_inst_t::encode(assembler_t *Assembler) {
	case_t *Case;

	| cmp dword VALUE:ecx->Type, Std$Integer$SmallT
	| jne &incorrect_type

	Case = Cases;
	int Min = Case->Min, Max = Case->Max;
	int Count = Max - Min + 1;
	while (Case = Case->Next) {
		if (Case->Min < Min) Min = Case->Min;
		if (Case->Max > Max) Max = Case->Max;
		Count += (Case->Max - Case->Min + 1);
	};
	int Range = Max - Min + 1;
	int DispFix = 1;
	if (Range > 2 * Count) {
		select_integer_entry_t Entries[2 * Count];
		uint32_t M = Count;
	next:
		memset(Entries, 0, M * sizeof(select_integer_entry_t));
		for (Case = Cases; Case; Case = Case->Next) {
			int32_t K = Case->Max;
			uint32_t T = K - Case->Min + 1;
			uint32_t I = ((K % M) + M) % M;
			do {
				if (Entries[I].Label) {
					if (Entries[I].Key == K) {
						printf("Stupid user has duplicate keys: %d\n", K);
					} else if (++M >= Count * 2) {
						M = 1; while (M < Count) M <<= 1;
						uint32_t A = (M - Count) / 2;
						uint32_t B = (M - Count) - A;
						select_integer_entry_t *Top = Entries;
						for (Case = Cases; Case; Case = Case->Next) {
							for (I = Case->Min; I <= Case->Max; ++I) {
								Top->Key = I;
								Top->Label = Case->Body;
								++Top;
							};
						};
						--Top;
						select_integer_entries_sort(Entries, Top);
						| mov eax, [ecx + 4]
						| mov edx, M / 2
						| mov ebx, M / 2 - 1
						| 1:
						| cmp eax, [ebx * 8 + >2]
						| ja >3
						| jb >4
						| jmp dword [ebx * 8 + >5]
						| 3:
						| shr edx, 1
						| jz =>Default
						| add ebx, edx
						| jmp <1
						| 4:
						| shr edx, 1
						| jz =>Default
						| sub ebx, edx
						| jmp <1
						| 2:
						for (int I = 0; I < A; ++I) {
							| .dword Entries[0].Key
							if (DispFix) {
								| 5:
								DispFix = 0;
							};
							| .aword =>Entries[0].Label
						};
						for (int I = 0; I < Count; ++I) {
							| .dword Entries[I].Key
							if (DispFix) {
								| 5:
								DispFix = 0;
							};
							| .aword =>Entries[I].Label
						};
						for (int I = 0; I < B; ++I) {
							| .dword Top->Key
							if (DispFix) {
								| 5:
								DispFix = 0;
							};
							| .aword =>Top->Label;
						};
						return;
					};
					goto next;
				};
				Entries[I].Key = K;
				Entries[I].Label = Case->Body;
				I = I ? I - 1 : M - 1;
				--K;
			} while (--T);
		};
		| mov ecx, [ecx + 4]
		| mov eax, ecx
		| xor edx, edx
		| mov ebx, M
		| div ebx
		| cmp [edx * 8 + >1], ecx
		| jne =>Default
		| jmp dword [edx * 8 + >2]
		| 1:
		for (int I = 0; I < M; ++I) {
			| .dword Entries[I].Key
			if (DispFix) {
				| 2:
				DispFix = 0;
			};
			if (Entries[I].Label) {
				| .aword =>Entries[I].Label
			} else {
				| .aword =>Default
			};
		};
		return;
	} else {
		label_t *Labels[Range];
		memset(Labels, 0, Range * sizeof(label_t *));
		for (Case = Cases; Case; Case = Case->Next) {
			for (int I = Case->Min; I <= Case->Max; ++I) Labels[I - Min] = Case->Body;
		};
		| mov eax, [ecx + 4]
		| sub eax, Min
		| js =>Default
		| cmp eax, Max - Min
		| ja =>Default
		| jmp dword [eax * 4 + >1]
		| .align 4
		| 1:
		for (int I = 0; I < Range; ++I) {
			if (Labels[I]) {
				| .aword =>Labels[I]
			} else {
				| .aword =>Default
			}
		};
	};
};

void select_string_inst_t::encode(assembler_t *Assembler) {
	| call &select_string
	| 1:
	if (Cases->Length) {
		| .dword 0
		| .aword 0
		| .aword =>Default
	};
	for (case_t *Case = Cases; Case; Case = Case->Next) {
		| .dword Case->Length
		| .aword Case->Key
		| .aword =>Case->Body
	};
	| .dword 0
	| .aword 0
	| .aword =>Default
};

void select_object_inst_t::encode(assembler_t *Assembler) {
	for (case_t *Case = Cases; Case; Case = Case->Next) {
		| cmp ecx, Case->Object
		| je =>Case->Body
	};
};

void store_link_inst_t::encode(assembler_t *Assembler) {
	| mov dword [ebp + Assembler->Temps + 8 * Temp], =>Target
};

void jump_link_inst_t::encode(assembler_t *Assembler) {
	| jmp dword [ebp + Assembler->Temps + 8 * Temp]
};

void test_limit_inst_t::encode(assembler_t *Assembler) {
	| dec dword [ebp + Assembler->Temps + 8 * Temp]
	| jz =>Target
};

void limit_inst_t::encode(assembler_t *Assembler) {
	| cmp dword VALUE:ecx->Type, Std$Integer$SmallT
	| jne &incorrect_type
	| mov ecx, SMALL:ecx->Value
	| mov edi, Assembler->Temps + 8 * Trap
	| test ecx, ecx
	| jz &backtrack
	| mov [ebp + Assembler->Temps + 8 * Temp], ecx
};

void skip_inst_t::encode(assembler_t *Assembler) {
	| cmp dword VALUE:ecx->Type, Std$Integer$SmallT
	| jne &incorrect_type
	| mov ecx, SMALL:ecx->Value
	| mov [ebp + Assembler->Temps + 8 * Temp], ecx
};

void test_skip_inst_t::encode(assembler_t *Assembler) {
	| dec dword [ebp + Assembler->Temps + 8 * Temp]
	| mov edi, Assembler->Temps + 8 * Trap
	| jns &backtrack
	| inc dword [ebp + Assembler->Temps + 8 * Temp]
};

void type_of_inst_t::encode(assembler_t *Assembler) {
	switch (Type) {
	case LOAD_VAL: {
		| mov ecx, VALUE:ecx->Type
		break;
	};
	case LOAD_REF: {
		| xor edx, edx
		break;
	};
	case LOAD_ARG:
	case LOAD_BOTH: {
		| mov ecx, VALUE:ecx->Type
		| xor edx, edx
		break;
	};
	};
};

void new_list_inst_t::encode(assembler_t *Assembler) {
	| push sizeof(Std$List_t);
	| call &Riva$Memory$alloc
	| pop edx
	| mov dword LIST:eax->Type, Std$List$T
	| mov dword LIST:eax->Access, 4
	| mov [ebp + Assembler->Temps + 8 * Index], eax
};

void store_list_inst_t::encode(assembler_t *Assembler) {
	| mov ebx, ecx
	| push sizeof(Std$List_node);
	| call &Riva$Memory$alloc
	| pop edx
	| mov LISTNODE:eax->Value, ebx
	| mov edx, [ebp + Assembler->Temps + 8 * Index]
	| inc dword LIST:edx->Length
	| mov ecx, LIST:edx->Tail
	| test ecx, ecx
	| jz >1
	| mov LISTNODE:eax->Prev, ecx
	| mov LISTNODE:ecx->Next, eax
	| jmp >2
	| 1:
	| mov LIST:edx->Head, eax
	| mov LIST:edx->Cache, eax
	| inc dword LIST:edx->Index
	| 2:
	| mov LIST:edx->Tail, eax
};

void encode_potential_breakpoint(assembler_t *Assembler, uint32_t LineNo) {
//	| mov eax, LineNo
//	| call &potential_breakpoint
};
