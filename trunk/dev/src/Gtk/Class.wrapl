MOD Class;

IMP Type, Target;
IMP Std.String;
IMP IO.File;

DEF T <- <[Type.T, Target.T]
	ns, name, cname, parent,
	methods, ctors, shared,
	ctype, rtype,
	ctor_prefix,
	headers, libraries
>;

DEF PrefixLength(cname) (
	VAR n <- cname:length;
	EVERY "A" <= cname:chars <= "Z" DO n <- n + 1;
	--Out:writes("PrefixLength(", cname, ") = ", n, "\n");
	RET n;
);

DEF New!(ns, name, cname, parent) (
	VAR t <- T();
	t:ns <- ns;
	t:name <- name;
	t:cname <- cname;
	t:parent <- parent;
	t:methods <- [];
	t:shared <- [];
	t:ctors <- [];
	t:rtype <- "Gtk$" + ns + "$" + name + "$T";
	t:ctype <- cname + " *";
	Type.Define(cname + "*", t);
	t:queue;
	t:ctor_prefix <- PrefixLength(cname);
	t:headers <- ["#include <Gtk/" + ns + "/" + name + ".h>"];
	t:libraries <- ["Gtk/" + ns + "/" + name + ".rlib"];
	RET t;
);

TO :addmethod(t@T, name, cname) (
	VAR method <- Type.Method(name, cname, []);
	method:addparam("self", t:cname + "*");
	t:methods:put(method);
	RET method;
);

TO :addshared(t@T, name, cname) (
	VAR method <- Type.Method(name, cname, []);
	t:shared:put(method);
	RET method;
);

TO :addctor(t@T, cname) (
	VAR name <- "";
	VAR i <- t:ctor_prefix, n <- cname:length;
	cname[i] = "_" => (i <- i + 1);
	name <- name + String.Chr(String.Ord(cname[i]) - 32);
	REP (
		i <- i + 1;
		UNTIL i > n;
		cname[i] = "_" => (
			i <- i + 1;
			name <- name + String.Chr(String.Ord(cname[i]) - 32);
		) // (
			name <- name + cname[i];
		);
	);
	--Out:writes("Adding constructor ", cname, " -> ", name, "\n");
	VAR method <- Type.Method(name, cname, []);
	t:ctors:put(method);
	RET method;
);

TO :process(t@T, srcdir, incdir, libdir) (
	VAR headers <- {"#include <Gtk/GObject/Object.h>"};
	VAR libraries <- {};
	VAR base <- t:ns + "/" + t:name;
	VAR cfile <- File.Open(srcdir + base + ".c", File.WRITE + File.TEXT);
	cfile:writes("#include <Gtk/", base, ".h>\n");
	cfile:writes("#include <Riva/Memory.h>\n");
	VAR method, param, i, returntype, types, names, n, params, ctor, type;
	t:cname = "GdkEvent_" => (
		VAR Convert(type, field) (
			EVERY headers:insert(Type.Lookup("Gdk" + type):headers:values);
			EVERY libraries:insert(Type.Lookup("Gdk" + type):libraries:values);
		);
		Convert("EventExpose", "expose");
		Convert("EventNoExpose", "no_expose");
		Convert("EventVisibility", "visibility");
		Convert("EventMotion", "motion");
		Convert("EventButton", "button");
		Convert("EventScroll", "scroll");
		Convert("EventKey", "key");
		Convert("EventCrossing", "crossing");
		Convert("EventFocus", "focus_change");
		Convert("EventConfigure", "configure");
		Convert("EventProperty", "property");
		Convert("EventSelection", "selection");
		Convert("EventOwnerChange", "owner_change");
		Convert("EventProximity", "proximity");
		Convert("EventClient", "client");
		Convert("EventDND", "dnd");
		Convert("EventWindowState", "window_state");
		Convert("EventSetting", "setting");
		Convert("EventGrabBroken", "grab_broken");
	);
	EVERY ctor <- t:ctors:values DO (
		EVERY headers:insert(Type.Lookup(ctor:params:values:type):headers:values);
		EVERY libraries:insert(Type.Lookup(ctor:params:values:type):libraries:values);
	);
	EVERY method <- t:shared:values DO (
		EVERY headers:insert(Type.Lookup(method:params:values:type):headers:values);
		EVERY headers:insert(Type.Lookup(method:type):headers:values);
		EVERY libraries:insert(Type.Lookup(method:params:values:type):libraries:values);
		EVERY libraries:insert(Type.Lookup(method:type):libraries:values);
	);
	EVERY method <- t:methods:values DO (
		EVERY headers:insert(Type.Lookup(method:params:values:type):headers:values);
		EVERY headers:insert(Type.Lookup(method:type):headers:values);
		EVERY libraries:insert(Type.Lookup(method:params:values:type):libraries:values);
		EVERY libraries:insert(Type.Lookup(method:type):libraries:values);
	);
	cfile:writes("/***********************************/\n");
	cfile:writes("// Number of included files = ", headers:size, "\n");
	EVERY cfile:writes(headers:keys, "\n");
	cfile:writes("/***********************************/\n");
	t:cname = "GdkEvent_" => (
		cfile:writes("TYPE(T);\n\n");
		VAR Convert(type, field) (
			cfile:writes("METHOD(\"", type[6, 0], "\", TYP, T) {\n");
                        cfile:writes("//@self\n");
                        cfile:writes("//:Gtk$Gdk$", type, "$T\n");
			cfile:writes("\tGtk$", t:ns, "$", t:name, "_t *self = Args[0].Val;\n");
			cfile:writes("\tGtk$Gdk$", type, "_t *result = new(Gtk$Gdk$", type, "_t);\n");
			cfile:writes("\tresult->Type = Gtk$Gdk$", type, "$T;\n");
			cfile:writes("\tresult->Value = &self->Value->", field, ";\n");
			cfile:writes("\tResult->Val = result;\n");
			cfile:write("\treturn SUCCESS;\n");
			cfile:write("};\n\n");
		);
                cfile:write(>>EOF
extern Std$Object_t Gtk$Gdk$EventType$Nothing[];
extern Std$Object_t Gtk$Gdk$EventType$Delete[];
extern Std$Object_t Gtk$Gdk$EventType$Destroy[];
extern Std$Object_t Gtk$Gdk$EventType$Expose[];
extern Std$Object_t Gtk$Gdk$EventType$MotionNotify[];
extern Std$Object_t Gtk$Gdk$EventType$ButtonPress[];
extern Std$Object_t Gtk$Gdk$EventType$TwoButtonPress[];
extern Std$Object_t Gtk$Gdk$EventType$ThreeButtonPress[];
extern Std$Object_t Gtk$Gdk$EventType$ButtonRelease[];
extern Std$Object_t Gtk$Gdk$EventType$KeyPress[];
extern Std$Object_t Gtk$Gdk$EventType$KeyRelease[];
extern Std$Object_t Gtk$Gdk$EventType$EnterNotify[];
extern Std$Object_t Gtk$Gdk$EventType$LeaveNotify[];
extern Std$Object_t Gtk$Gdk$EventType$FocusChange[];
extern Std$Object_t Gtk$Gdk$EventType$Configure[];
extern Std$Object_t Gtk$Gdk$EventType$Map[];
extern Std$Object_t Gtk$Gdk$EventType$Unmap[];
extern Std$Object_t Gtk$Gdk$EventType$PropertyNotify[];
extern Std$Object_t Gtk$Gdk$EventType$SelectionClear[];
extern Std$Object_t Gtk$Gdk$EventType$SelectionRequest[];
extern Std$Object_t Gtk$Gdk$EventType$SelectionNotify[];
extern Std$Object_t Gtk$Gdk$EventType$ProximityIn[];
extern Std$Object_t Gtk$Gdk$EventType$ProximityOut[];
extern Std$Object_t Gtk$Gdk$EventType$DragEnter[];
extern Std$Object_t Gtk$Gdk$EventType$DragLeave[];
extern Std$Object_t Gtk$Gdk$EventType$DragMotion[];
extern Std$Object_t Gtk$Gdk$EventType$DragStatus[];
extern Std$Object_t Gtk$Gdk$EventType$DropStart[];
extern Std$Object_t Gtk$Gdk$EventType$DropFinished[];
extern Std$Object_t Gtk$Gdk$EventType$ClientEvent[];
extern Std$Object_t Gtk$Gdk$EventType$VisibilityNotify[];
extern Std$Object_t Gtk$Gdk$EventType$NoExpose[];
extern Std$Object_t Gtk$Gdk$EventType$Scroll[];
extern Std$Object_t Gtk$Gdk$EventType$WindowState[];
extern Std$Object_t Gtk$Gdk$EventType$Setting[];
extern Std$Object_t Gtk$Gdk$EventType$OwnerChange[];
extern Std$Object_t Gtk$Gdk$EventType$GrabBroken[];

METHOD("Type", TYP, T) {
    Gtk$Gdk$Event_t *self = Args[0].Val;
    switch (self->Value->type) {
    case GDK_NOTHING:           Result->Val = Gtk$Gdk$EventType$Nothing; return SUCCESS;
    case GDK_DELETE:            Result->Val = Gtk$Gdk$EventType$Delete; return SUCCESS;
    case GDK_DESTROY:           Result->Val = Gtk$Gdk$EventType$Destroy; return SUCCESS;
    case GDK_EXPOSE:            Result->Val = Gtk$Gdk$EventType$Expose; return SUCCESS;
    case GDK_MOTION_NOTIFY:     Result->Val = Gtk$Gdk$EventType$MotionNotify; return SUCCESS;
    case GDK_BUTTON_PRESS:      Result->Val = Gtk$Gdk$EventType$ButtonPress; return SUCCESS;
    case GDK_2BUTTON_PRESS:     Result->Val = Gtk$Gdk$EventType$TwoButtonPress; return SUCCESS;
    case GDK_3BUTTON_PRESS:     Result->Val = Gtk$Gdk$EventType$ThreeButtonPress; return SUCCESS;
    case GDK_BUTTON_RELEASE:    Result->Val = Gtk$Gdk$EventType$ButtonRelease; return SUCCESS;
    case GDK_KEY_PRESS:         Result->Val = Gtk$Gdk$EventType$KeyPress; return SUCCESS;
    case GDK_KEY_RELEASE:       Result->Val = Gtk$Gdk$EventType$KeyRelease; return SUCCESS;
    case GDK_ENTER_NOTIFY:      Result->Val = Gtk$Gdk$EventType$EnterNotify; return SUCCESS;
    case GDK_LEAVE_NOTIFY:      Result->Val = Gtk$Gdk$EventType$LeaveNotify; return SUCCESS;
    case GDK_FOCUS_CHANGE:      Result->Val = Gtk$Gdk$EventType$FocusChange; return SUCCESS;
    case GDK_CONFIGURE:         Result->Val = Gtk$Gdk$EventType$Configure; return SUCCESS;
    case GDK_MAP:               Result->Val = Gtk$Gdk$EventType$Map; return SUCCESS;
    case GDK_UNMAP:             Result->Val = Gtk$Gdk$EventType$Unmap; return SUCCESS;
    case GDK_PROPERTY_NOTIFY:   Result->Val = Gtk$Gdk$EventType$PropertyNotify; return SUCCESS;
    case GDK_SELECTION_CLEAR:   Result->Val = Gtk$Gdk$EventType$SelectionClear; return SUCCESS;
    case GDK_SELECTION_REQUEST: Result->Val = Gtk$Gdk$EventType$SelectionRequest; return SUCCESS;
    case GDK_SELECTION_NOTIFY:  Result->Val = Gtk$Gdk$EventType$SelectionNotify; return SUCCESS;
    case GDK_PROXIMITY_IN:      Result->Val = Gtk$Gdk$EventType$ProximityIn; return SUCCESS;
    case GDK_PROXIMITY_OUT:     Result->Val = Gtk$Gdk$EventType$ProximityOut; return SUCCESS;
    case GDK_DRAG_ENTER:        Result->Val = Gtk$Gdk$EventType$DragEnter; return SUCCESS;
    case GDK_DRAG_LEAVE:        Result->Val = Gtk$Gdk$EventType$DragLeave; return SUCCESS;
    case GDK_DRAG_MOTION:       Result->Val = Gtk$Gdk$EventType$DragMotion; return SUCCESS;
    case GDK_DRAG_STATUS:       Result->Val = Gtk$Gdk$EventType$DragStatus; return SUCCESS;
    case GDK_DROP_START:        Result->Val = Gtk$Gdk$EventType$DropStart; return SUCCESS;
    case GDK_DROP_FINISHED:     Result->Val = Gtk$Gdk$EventType$DropFinished; return SUCCESS;
    case GDK_CLIENT_EVENT:      Result->Val = Gtk$Gdk$EventType$ClientEvent; return SUCCESS;
    case GDK_VISIBILITY_NOTIFY: Result->Val = Gtk$Gdk$EventType$VisibilityNotify; return SUCCESS;
    case GDK_NO_EXPOSE:         Result->Val = Gtk$Gdk$EventType$NoExpose; return SUCCESS;
    case GDK_SCROLL:            Result->Val = Gtk$Gdk$EventType$Scroll; return SUCCESS;
    case GDK_WINDOW_STATE:      Result->Val = Gtk$Gdk$EventType$WindowState; return SUCCESS;
    case GDK_SETTING:           Result->Val = Gtk$Gdk$EventType$Setting; return SUCCESS;
    case GDK_OWNER_CHANGE:      Result->Val = Gtk$Gdk$EventType$OwnerChange; return SUCCESS;
    case GDK_GRAB_BROKEN:       Result->Val = Gtk$Gdk$EventType$GrabBroken; return SUCCESS;
    };
    return FAILURE;
};
EOF);
		Convert("EventExpose", "expose");
		Convert("EventNoExpose", "no_expose");
		Convert("EventVisibility", "visibility");
		Convert("EventMotion", "motion");
		Convert("EventButton", "button");
		Convert("EventScroll", "scroll");
		Convert("EventKey", "key");
		Convert("EventCrossing", "crossing");
		Convert("EventFocus", "focus_change");
		Convert("EventConfigure", "configure");
		Convert("EventProperty", "property");
		Convert("EventSelection", "selection");
		Convert("EventOwnerChange", "owner_change");
		Convert("EventProximity", "proximity");
		Convert("EventClient", "client");
		Convert("EventDND", "dnd");
		Convert("EventWindowState", "window_state");
		Convert("EventSetting", "setting");
		Convert("EventGrabBroken", "grab_broken");
	);
	EVERY ctor <- t:ctors:values DO (
		params <- ctor:params;
		n <- params:size;
		types <- params:map(<p> Type.Lookup(p:type));
		names <- params:map(:name);
		cfile:writes("GLOBAL_FUNCTION(", ctor:name, ", ", n, ") {\n");
                EVERY i <- 1:to(n) DO (
                    cfile:writes("//@", names[i], " : ", types[i]:rtype, "\n");
                );
                cfile:writes("//: T\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:precall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		cfile:writes("\tGtk$GObject$Object_t *result = new(Gtk$GObject$Object_t);\n");
		cfile:writes("\tresult->Type = T;\n");
		cfile:writes("\tresult->Handle = ", ctor:cname, "(");
		cfile:write(names[1]) => EVERY i <- 2:to(n) DO cfile:writes(", ", names[i]);
		cfile:write(");\n");
		cfile:write("\tResult->Val= result;\n");
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:shared:values DO (
		params <- method:params;
		n <- params:size;
		types <- params:map(<p> Type.Lookup(p:type));
		names <- params:map(:name);
		cfile:writes("GLOBAL_FUNCTION(", method:name, ", ", n, ") {\n");
                EVERY i <- 1:to(n) DO (
                    cfile:writes("//@", names[i], " : ", types[i]:rtype, "\n");
                );
                returntype <- Type.Lookup(method:type);
                cfile:writes("//:", returntype:rtype, "\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:precall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		cfile:write("\t");
		returntype:ctype ~= "void" => cfile:writes(returntype:ctype, " result = ");
		cfile:writes(method:cname, "(");
		cfile:write(names[1]) => EVERY i <- 2:to(n) DO cfile:writes(", ", names[i]);
		cfile:write(");\n");
		returntype:ctype ~= "void" => (
			EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		);
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:methods:values DO (
		params <- method:params;
		n <- params:size;
		types <- params:map(<p> Type.Lookup(p:type));
		names <- params:map(:name);
		cfile:writes("METHOD(\"", method:name, "\", TYP, T");
		EVERY cfile:writes(", ", types[2:to(n)]:sigtype);
		cfile:write(") {\n");
                EVERY i <- 1:to(n) DO (
                    cfile:writes("//@", names[i], "\n");
                );
                returntype <- Type.Lookup(method:type);
                cfile:writes("//:", returntype:rtype, "\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:precall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		cfile:write("\t");
		returntype:ctype ~= "void" => cfile:writes(returntype:ctype, " result = ");
		cfile:writes(method:cname, "(self");
		EVERY i <- 2:to(n) DO cfile:writes(", ", names[i]);
		cfile:writes(");\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:postcall(names[i], "Args[" + i@String.T + "]"):values, "\n");
		);
		returntype:ctype ~= "void" => (
			EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		);
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	cfile:close;
	VAR deffile <- File.Open(srcdir + base + ".rdef", File.WRITE + File.TEXT);
	EVERY deffile:writes("library(\"", libraries:keys, "\")\n");
	deffile:write(>>EOF
library("Gtk/GObject/Object.rlib")

EOF);
	deffile:write(>>EOF
if WINDOWS then
	_export = export
	export = function(Name, Alias)
		if Alias == nil then
			Alias = Name
		end
		_export("_" .. Name, Alias)
	end
	
end
EOF);
	t:cname = "GdkEvent_" => deffile:writes("export(\"T\");\n");
	EVERY ctor <- t:ctors:values DO deffile:writes("export(\"", ctor:name, "\")\n");
	EVERY method <- t:shared:values DO deffile:writes("export(\"", method:name, "\")\n");
	deffile:close;
	VAR libfile <- File.Open(libdir + base + ".rlib", File.WRITE + File.TEXT);
	libfile:writes("module(\"Gtk\", \"", t:ns, "\", \"", t:name, "\")\n");
	libfile:write("if WINDOWS then\n");
	libfile:writes("\tprefix(\"_Gtk$", t:ns, "$", t:name, "$\")\n");
	libfile:write("else\n");
	libfile:writes("\tprefix(\"Gtk$", t:ns, "$", t:name, "$\")\n");
	libfile:write("end\n");
	libfile:write("export(\"T\")\n");
	libfile:close;	
	VAR hfile <- File.Open(incdir + base + ".h", File.WRITE + File.TEXT);
	hfile:writes("#ifndef ", t:ns, "_", t:name, "_H\n");
	hfile:writes("#define ", t:ns, "_", t:name, "_H\n\n");
	hfile:write("#include <Std.h>\n\n");
	hfile:writes("#define RIVA_MODULE Gtk$", t:ns, "$", t:name, "\n");
	hfile:writes("#include <Riva-Header.h>\n\n");
	t:cname = "GdkEvent_" => (
		hfile:writes("typedef struct Gtk$", t:ns, "$", t:name, "_t {\n");
		hfile:writes("\tStd$Type_t *Type;\n");
		hfile:writes("\tGdkEvent *Value;\n");
		hfile:writes("} Gtk$", t:ns, "$", t:name, "_t;\n\n");
	);
	hfile:writes("extern Std$Type_t ", t:rtype, "[];\n\n");
	hfile:write("#undef RIVA_MODULE\n\n");
	hfile:write("#endif\n");
	hfile:close;
);

END Class.
