MOD Main;

IMP Xml.Parser;
IMP IO.Terminal USE Out;
IMP IO.File;

IMP Target;
IMP Callback;
IMP Class;
IMP Enum;
IMP Flags;
IMP Interface;
IMP Native;
IMP Object;
IMP Opaque;
IMP Struct;

DEF Environment <- <[]
	namespace,
	object,
	method
>;

DEF StartHandlers <- {

"virtual_method" IS <env, attrs> (
	env:method <- env:object:addmethod(attrs["name"], attrs["cname"]);
),

"field" IS <env, attrs> (
),

"return-type" IS <env, attrs> (
	env:method:type <- attrs["type"];
),

"method" IS <env, attrs> (
	attrs["shared"] => (
		env:method <- env:object:addshared(attrs["name"], attrs["cname"]);
	) // (
		env:method <- env:object:addmethod(attrs["name"], attrs["cname"]);
	);
),

"api" IS <env, attrs> (
),

"alias" IS <env, attrs> (
),

"parameters" IS <env, attrs> (
),

"callback" IS <env, attrs> (
	env:method <- Callback.New(env:namespace, attrs["name"], attrs["cname"]);
),

"interface" IS <env, attrs> (
	env:object <- Interface.New(env:namespace, attrs["name"], attrs["cname"]);
),

"class" IS <env, attrs> (
	env:object <- Class.New(env:namespace, attrs["name"], attrs["cname"]);
),

"namespace" IS <env, attrs> (
	env:namespace <- attrs["name"];
),

"object" IS <env, attrs> (
	env:object <- Object.New(env:namespace, attrs["name"], attrs["cname"], attrs["parent"] | "GObject");
),

"struct" IS <env, attrs> (
	attrs["opaque"] => (
		env:object <- Opaque.New(env:namespace, attrs["name"], attrs["cname"]);
	) // (
		env:object <- Struct.New(env:namespace, attrs["name"], attrs["cname"]);
	);
),

"member" IS <env, attrs> (
	env:object:member(attrs["name"], attrs["cname"], attrs["value"] | "");
),

"constructor" IS <env, attrs> (
	env:method <- env:object:addctor(attrs["cname"]);
),

"enum" IS <env, attrs> (
	attrs["type"] = "enum" => (
		env:object <- Enum.New(env:namespace, attrs["name"], attrs["cname"]);
	) // attrs["type"] = "flags" => (
		env:object <- Flags.New(env:namespace, attrs["name"], attrs["cname"]);
	);
),

"parameter" IS <env, attrs> (
	attrs["ellipsis"] => (
		env:method:addparam("___", "ellipsis");
	) // (
		env:method:addparam(attrs["name"], attrs["type"]);
	);
),

"static-string" IS <env, attrs> (
)

};

VAR logfile <- File.Open("log.xml", File.WRITE + File.TEXT);
VAR indent <- "";

VAR source <- File.Open("api.xml", File.READ + File.TEXT);
VAR parser <- Parser.New();
parser:userdata <- Environment();
parser:onstartelement <- <env, name, attrs> (
	Out:writes(indent, "<", name, " ", attrs, ">\n");
	indent <- indent + "  ";
	StartHandlers[name](env, attrs);
);

parser:onendelement <- <env, name> (
	indent <- indent[2, 0];
	Out:writes(indent, "</", name, ">\n");
);

Out:write("Reading api file...");
REP WHILE parser:parse(source:read(1024));
Out:write("done.\n");

logfile:close;

Out:write("Generating files...");
Target.Process("./", "../../inc/Gtk/", "../../lib/Gtk/");
Out:write("done.\n");

END Main.
