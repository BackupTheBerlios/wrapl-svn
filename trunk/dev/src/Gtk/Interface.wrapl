MOD Interface;

IMP Type, Target;
IMP IO.File;
IMP Std.String;
IMP GetAPI;

DEF T <- <[Type.T, Target.T]
	ns, name, cname,
	methods, shared, virtual, fields, arrays,
	ctype, rtype,
	headers, libraries
>;

DEF New!(ns, name, cname) (
	VAR t <- T();
	t:ns <- ns;
	t:name <- name;
	t:cname <- cname;
	t:virtual <- [];
	t:methods <- [];
	t:shared <- [];
	t:fields <- [];
	t:arrays <- [];
	t:rtype <- "Gtk$" + ns + "$" + name + "$T";
	t:ctype <- cname + " *";
	Type.Define(cname + "*", t);
	t:headers <- ["#include <Gtk/" + ns + "/" + name + ".h>"];
	t:libraries <- ["Gtk/" + ns + "/" + name + ".rlib"];
	t:queue;
	RET t;
);

TO :addfield(t@T, name, cname, type) (
	t:fields:put(Type.Field(name, cname, type));
);

TO :addarray(t@T, name, cname, type) (
	t:arrays:put(Type.Field(name, cname, type));
);

TO :addvirtual(t@T, name, cname) (
	VAR method <- Type.Method(name, cname, []);
	method:addparam("self", t:cname + "*");
	t:virtual:put(method);
	RET method;
);

TO :addmethod(t@T, name, cname) (
	VAR method <- Type.Method(name, cname, []);
	method:addparam("self", t:cname + "*");
	t:methods:put(method);
	RET method;
);

TO :addshared(t@T, name, cname) (
	VAR method <- Type.Method(name, cname, []);
	t:shared:put(method);
	RET method;
);

TO :precall(t@T, name, arg) [
	t:ctype + " " + name + " = ((Gtk$GObject$Object_t *)" + arg + ".Val)->Handle;"
];

TO :return(t@T, result) [
	"if (" + result + " == 0) return FAILURE;",
	"Result->Val = Gtk$GObject$Object$to_riva(" + result + ");"
];

TO :toriva(t@T, arg, name) [
	arg + ".Val = Gtk$GObject$Object$to_riva(" + name + ");",
	arg + ".Ref = 0;"
];

TO :process(t@T, srcdir, incdir, libdir) (
	VAR headers <- {};
	VAR libraries <- {};
	VAR base <- t:ns + "/" + t:name;
	VAR cfile <- File.Open(srcdir + base + ".c", File.WRITE + File.TEXT);
	cfile:writes("#include <Gtk/", base, ".h>\n");
	cfile:writes("#include <Riva/Memory.h>\n");
	VAR method, param, i, returntype, types, names, n, params, ctor, type;
	EVERY method <- t:shared:values DO (
		EVERY headers:insert(Type.Lookup(method:params:values:type):headers:values);
		EVERY headers:insert(Type.Lookup(method:type):headers:values);
		EVERY libraries:insert(Type.Lookup(method:params:values:type):libraries:values);
		EVERY libraries:insert(Type.Lookup(method:type):libraries:values);
	);
	EVERY method <- t:methods:values DO (
		EVERY headers:insert(Type.Lookup(method:params:values:type):headers:values);
		EVERY headers:insert(Type.Lookup(method:type):headers:values);
		EVERY libraries:insert(Type.Lookup(method:params:values:type):libraries:values);
		EVERY libraries:insert(Type.Lookup(method:type):libraries:values);
	);
	EVERY headers:insert(Type.Lookup(t:fields:values:type):headers:values);
	EVERY libraries:insert(Type.Lookup(t:fields:values:type):libraries:values);
	EVERY headers:insert(Type.Lookup(t:arrays:values:type):headers:values);
	EVERY libraries:insert(Type.Lookup(t:arrays:values:type):libraries:values);
	EVERY cfile:writes(headers:keys, "\n");
	cfile:writes("TYPE(T);\n");
        EVERY cfile:writes("//  ", GetAPI.GetDesc(t:ns, t:cname):values, "\n");
        cfile:writes("\n");
	EVERY method <- t:shared:values DO (
		params <- method:params;
		n <- params:size;
		types <- params:map(<p> Type.Lookup(p:type));
		names <- params:map(:name);
		cfile:writes("GLOBAL_FUNCTION(", method:name, ", ", n, ") {\n");
                EVERY i <- 1:to(n) DO (
                    cfile:writes("//@", names[i], " : ", types[i]:rtype, "\n");
                );
                returntype <- Type.Lookup(method:type);
                cfile:writes("//:", returntype:rtype, "\n");
                EVERY cfile:writes("//  ", GetAPI.Get(t:ns, t:cname, method:cname):values, "\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:precall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		cfile:write("\t");
		returntype:ctype ~= "void" => cfile:writes(returntype:ctype, " result = ");
		cfile:writes(method:cname, "(");
		cfile:write(names[1]) => EVERY i <- 2:to(n) DO cfile:writes(", ", names[i]);
		cfile:write(");\n");
		returntype:ctype ~= "void" => (
			EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		);
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:fields:values DO (
		cfile:writes("METHOD(\"", method:name, "\", TYP, T) {\n");
                cfile:writes("//@self\n");
                returntype <- Type.Lookup(method:type);
                cfile:writes("//:", returntype:rtype, "\n");
                EVERY cfile:writes("//  ", GetAPI.Get(t:ns, t:cname, method:cname):values, "\n");
		cfile:writes("\t", t:ctype + " self = ((Gtk$GObject$Object_t *)Args[0].Val)->Handle;\n");
		cfile:writes("\t", returntype:ctype, " result = self->", method:cname, ";\n");
		EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:arrays:values DO (
		cfile:writes("METHOD(\"", method:name, "\", TYP, T, TYP, Std$Integer$SmallT) {\n");
                cfile:writes("//@self\n");
                returntype <- Type.Lookup(method:type);
                cfile:writes("//:", returntype:rtype, "\n");
                EVERY cfile:writes("//  ", GetAPI.Get(t:ns, t:cname, method:cname):values, "\n");
		cfile:writes("\t", t:ctype + " self = ((Gtk$GObject$Object_t *)Args[0].Val)->Handle;\n");
		cfile:writes("\tint index = ((Std$Integer_smallt *)Args[1].Val)->Value;\n");
		cfile:writes("\t", returntype:ctype, " result = self->", method:cname, "[index];\n");
		EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:methods:values DO (
		params <- method:params;
		n <- params:size;
		types <- params:map(<p> Type.Lookup(p:type));
		names <- params:map(:name);
		cfile:writes("METHOD(\"", method:name, "\", TYP, T");
		EVERY cfile:writes(", ", types[2:to(n)]:sigtype);
		cfile:write(") {\n");
                EVERY i <- 1:to(n) DO (
                    cfile:writes("//@", names[i], "\n");
                );
                returntype <- Type.Lookup(method:type);
                cfile:writes("//:", returntype:rtype, "\n");
                EVERY cfile:writes("//  ", GetAPI.Get(t:ns, t:cname, method:cname):values, "\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:precall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		cfile:write("\t");
		returntype:ctype ~= "void" => cfile:writes(returntype:ctype, " result = ");
		cfile:writes(method:cname, "(self");
		EVERY i <- 2:to(n) DO cfile:writes(", ", names[i]);
		cfile:writes(");\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:postcall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		returntype:ctype ~= "void" => (
			EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		);
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	cfile:close;
	VAR deffile <- File.Open(srcdir + base + ".rdef", File.WRITE + File.TEXT);
	EVERY deffile:writes("library(\"", libraries:keys, "\")\n");
	deffile:write(>>EOF
library("Gtk/GObject/Object.rlib")

EOF);
	deffile:write(>>EOF
if WINDOWS then
	_export = export
	export = function(Name, Alias)
		if Alias == nil then
			Alias = Name
		end
		_export("_" .. Name, Alias)
	end
end

export("T")
EOF);
	EVERY method <- t:shared:values DO deffile:writes("export(\"", method:name, "\")\n");
	deffile:close;
	VAR libfile <- File.Open(libdir + base + ".rlib", File.WRITE + File.TEXT);
	libfile:writes("module(\"Gtk\", \"", t:ns, "\", \"", t:name, "\")\n");
	libfile:write("if WINDOWS then\n");
	libfile:writes("\tprefix(\"_Gtk$", t:ns, "$", t:name, "$\")\n");
	libfile:write("else\n");
	libfile:writes("\tprefix(\"Gtk$", t:ns, "$", t:name, "$\")\n");
	libfile:write("end\n");
	libfile:write("export(\"T\")\n");
	libfile:close;
	VAR hfile <- File.Open(incdir + base + ".h", File.WRITE + File.TEXT);
	hfile:writes("#ifndef ", t:ns, "_", t:name, "_H\n");
	hfile:writes("#define ", t:ns, "_", t:name, "_H\n\n");
	hfile:write("#include <Std.h>\n");
	hfile:write("#include <Gtk/GObject/Object.h>\n\n");
	hfile:writes("#define RIVA_MODULE Gtk$", t:ns, "$", t:name, "\n");
	hfile:writes("#include <Riva-Header.h>\n\n");
	hfile:writes("extern Std$Type_t ", t:rtype, "[];\n\n");
	hfile:write("#undef RIVA_MODULE\n\n");
	hfile:write("#endif\n");
	hfile:close;
);

END Interface.
