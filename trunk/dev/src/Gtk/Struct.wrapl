MOD Struct;

IMP Type, Target;
IMP IO.File;
IMP Std.String;
IMP IO.Terminal USE Out;

DEF T <- <[Type.T, Target.T]
	ns, name, cname,
	methods, shared, ctors, fields, arrays,
	ctype, rtype,
	headers, libraries,
	ctor_prefix
>;

DEF S <- <[T]>;

DEF PrefixLength(cname) (
	VAR n <- cname:length;
	EVERY "A" <= cname:chars <= "Z" DO n <- n + 1;
	--Out:writes("PrefixLength(", cname, ") = ", n, "\n");
	RET n;
);

DEF New!(ns, name, cname) (
	VAR t <- T();
	t:ns <- ns;
	t:name <- name;
	t:cname <- cname;
	t:methods <- [];
	t:shared <- [];
	t:ctors <- [];
	t:fields <- [];
	t:arrays <- [];
	t:rtype <- "Gtk$" + ns + "$" + name + "$T";
	t:ctype <- cname + " *";
	t:ctor_prefix <- PrefixLength(cname);
	Type.Define(cname + "*", t);
	Type.Define("const-" + cname + "*", t);
	t:headers <- ["#include <Gtk/" + ns + "/" + name + ".h>"];
	t:libraries <- ["Gtk/" + ns + "/" + name + ".rlib"];
	t:queue;
        t:map;
	VAR s <- S();
	s:ns <- ns;
	s:name <- name;
	s:cname <- cname;
	s:rtype <- t:rtype;
	s:ctype <- cname;
	Type.Define(cname, s);
	s:headers <- t:headers;
	s:libraries <- t:libraries;
	RET t;
);

TO :addfield(t@T, name, cname, type) (
	t:fields:put(Type.Field(name, cname, type));
);

TO :addarray(t@T, name, cname, type) (
	t:arrays:put(Type.Field(name, cname, type));
);

TO :addmethod(t@T, name, cname) (
	VAR method <- Type.Method(name, cname, []);
	method:addparam("self", t:cname + "*");
	t:methods:put(method);
	RET method;
);

TO :addshared(t@T, name, cname) (
	VAR method <- Type.Method(name, cname, []);
	t:shared:put(method);
	RET method;
);

TO :addctor(t@T, cname) (
	VAR name <- "";
	VAR i <- t:ctor_prefix, n <- cname:length;
	cname[i] = "_" => (i <- i + 1);
	name <- name + String.Chr(String.Ord(cname[i]) - 32);
	REP (
		i <- i + 1;
		UNTIL i > n;
		cname[i] = "_" => (
			i <- i + 1;
			name <- name + String.Chr(String.Ord(cname[i]) - 32);
		) // (
			name <- name + cname[i];
		);
	);
	--Out:writes("Adding constructor ", cname, " -> ", name, "\n");
	VAR method <- Type.Method(name, cname, []);
	t:ctors:put(method);
	RET method;
);

TO :precall(t@S, name, arg) [
	t:ctype + " " + name + "= ((Gtk$" + t:ns + "$" + t:name + "_t *)" + arg + ".Val)->Value[0];"
];

TO :return(t@S, result) [
	"{",
	"\tGtk$" + t:ns + "$" + t:name + "_t * _ptr_" + result + " = new(Gtk$" + t:ns + "$" + t:name + "_t);",
	"\t_ptr_" + result + "->Type = " + t:rtype + ";",
        "\t_ptr_" + result + "->Value = new(" + t:cname + ");",
	"\t_ptr_" + result + "->Value[0] = " + result + ";",
	"\tResult->Val = _ptr_" + result + ";",
	"};"
];

TO :toriva(t@S, arg, name) [
	"{",
	"\tGtk$" + t:ns + "$" + t:name + "_t *_ptr_" + name + " = new(Gtk$" + t:ns + "$" + t:name + "_t);",
	"\t_ptr_" + name + "->Type = " + t:rtype + ";",
	"\t_ptr_" + name + "->Value = &" + name + ";",
	"\t" + arg + ".Val = _ptr_" + name + ";",
	"\t" + arg + ".Ref = 0;",
	"};"
];

TO :precall(t@T, name, arg) [
	t:ctype + " " + name + "= ((Gtk$" + t:ns + "$" + t:name + "_t *)" + arg + ".Val)->Value;"
];

TO :return(t@T, result) [
	"Gtk$" + t:ns + "$" + t:name + "_t * _ptr_" + result + " = new(Gtk$" + t:ns + "$" + t:name + "_t);",
	"_ptr_" + result + "->Type = " + t:rtype + ";",
	"_ptr_" + result + "->Value = " + result + ";",
	"Result->Val = _ptr_" + result + ";"
];

TO :toriva(t@T, arg, name) [
	"{",
	"\tGtk$" + t:ns + "$" + t:name + "_t *_ptr_" + name + " = new(Gtk$" + t:ns + "$" + t:name + "_t);",
	"\t_ptr_" + name + "->Type = " + t:rtype + ";",
        "\t_ptr_" + name + "->Value = new(" + t:cname + ");",
	"\t_ptr_" + name + "->Value = " + name + ";",
	"\t" + arg + ".Val = _ptr_" + name + ";",
	"\t" + arg + ".Ref = 0;",
	"};"
];

TO :process(t@T, srcdir, incdir, libdir) (
	VAR headers <- {}; --"#include <Gtk/GObject/Object.h>"};
	VAR libraries <- {};
	VAR base <- t:ns + "/" + t:name;
	VAR cfile <- File.Open(srcdir + base + ".c", File.WRITE + File.TEXT);
	cfile:writes("#include <Gtk/", base, ".h>\n");
	cfile:writes("#include <Riva/Memory.h>\n");
	VAR method, param, i, returntype, types, names, n, params, ctor, type;
	EVERY ctor <- t:ctors:values DO (
		EVERY headers:insert(Type.Lookup(ctor:params:values:type):headers:values);
		EVERY libraries:insert(Type.Lookup(ctor:params:values:type):libraries:values);
	);
	EVERY method <- t:shared:values DO (
		EVERY headers:insert(Type.Lookup(method:params:values:type):headers:values);
		EVERY headers:insert(Type.Lookup(method:type):headers:values);
		EVERY libraries:insert(Type.Lookup(method:params:values:type):libraries:values);
		EVERY libraries:insert(Type.Lookup(method:type):libraries:values);
	);
	EVERY method <- t:methods:values DO (
		EVERY headers:insert(Type.Lookup(method:params:values:type):headers:values);
		EVERY headers:insert(Type.Lookup(method:type):headers:values);
		EVERY libraries:insert(Type.Lookup(method:params:values:type):libraries:values);
		EVERY libraries:insert(Type.Lookup(method:type):libraries:values);
	);
	EVERY headers:insert(Type.Lookup(t:fields:values:type):headers:values);
	EVERY libraries:insert(Type.Lookup(t:fields:values:type):libraries:values);
	EVERY headers:insert(Type.Lookup(t:arrays:values:type):headers:values);
	EVERY libraries:insert(Type.Lookup(t:arrays:values:type):libraries:values);
	cfile:writes("/***********************************/\n");
	cfile:writes("// Number of included files = ", headers:size, "\n");
	EVERY cfile:writes(headers:keys, "\n");
	cfile:writes("/***********************************/\n");
	cfile:writes("TYPE(T);\n\n");
        cfile:writes("Gtk$", t:ns, "$", t:name, "_t Nil[] = {{T, 0}};\n\n");
	cfile:write("GLOBAL_FUNCTION(New, 0) {\n");
	cfile:writes("\tGtk$", t:ns, "$", t:name, "_t *result = new(Gtk$", t:ns, "$", t:name, "_t);\n");
	cfile:write("\tresult->Type = T;\n");
        cfile:writes("\tresult->Value = new(", t:cname, ");\n");
	cfile:write("\tResult->Val = result;\n");
	cfile:write("\treturn SUCCESS;\n");
	cfile:write("};\n\n");
	EVERY ctor <- t:ctors:values DO (
		params <- ctor:params;
		n <- params:size;
		types <- params:map(<p> Type.Lookup(p:type));
		names <- params:map(:name);
		cfile:writes("GLOBAL_FUNCTION(", ctor:name, ", ", n, ") {\n");
		cfile:writes("\tGtk$", t:ns, "$", t:name, "_t *result = new(Gtk$", t:ns, "$", t:name, "_t);\n");
		cfile:writes("\tresult->Type = T;\n");
                cfile:writes("\tresult->Value = new(", t:cname, ");\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:fromriva("result->Value->" + names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		cfile:write("\tResult->Val= result;\n");
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:shared:values DO (
		params <- method:params;
		n <- params:size;
		types <- params:map(<p> Type.Lookup(p:type));
		names <- params:map(:name);
		cfile:writes("GLOBAL_FUNCTION(", method:name, ", ", n, ") {\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:precall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		returntype <- Type.Lookup(method:type);
		cfile:write("\t");
		returntype:ctype ~= "void" => cfile:writes(returntype:ctype, " result = ");
		cfile:writes(method:cname, "(");
		cfile:write(names[1]) => EVERY i <- 2:to(n) DO cfile:writes(", ", names[i]);
		cfile:write(");\n");
		returntype:ctype ~= "void" => (
			EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		);
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:fields:values DO (
		cfile:writes("METHOD(\"", method:name, "\", TYP, T) {\n");
		cfile:writes("\tGtk$", t:ns, "$", t:name, "_t * self = Args[0].Val;\n");
		returntype <- Type.Lookup(method:type);
		cfile:writes("\t", returntype:ctype, " result = self->Value->", method:cname, ";\n");
		EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:arrays:values DO (
		cfile:writes("METHOD(\"", method:name, "\", TYP, T, TYP, Std$Integer$SmallT) {\n");
		cfile:writes("\tGtk$", t:ns, "$", t:name, "_t * self = Args[0].Val;\n");
		cfile:writes("\tint index = ((Std$Integer_smallt *)Args[1].Val)->Value;\n");
		returntype <- Type.Lookup(method:type);
		cfile:writes("\t", returntype:ctype, " result = self->Value->", method:cname, "[index];\n");
		EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	EVERY method <- t:methods:values DO (
		params <- method:params;
		n <- params:size;
		types <- params:map(<p> Type.Lookup(p:type));
		names <- params:map(:name);
		cfile:writes("METHOD(\"", method:name, "\", TYP, T");
		EVERY cfile:writes(", ", types[2:to(n)]:sigtype);
		cfile:write(") {\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:precall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		cfile:write("\t");
		returntype <- Type.Lookup(method:type);
		returntype:ctype ~= "void" => cfile:writes(returntype:ctype, " result = ");
		cfile:writes(method:cname, "(self");
		EVERY i <- 2:to(n) DO cfile:writes(", ", names[i]);
		cfile:writes(");\n");
		EVERY i <- 1:to(n) DO (
			EVERY cfile:writes("\t", types[i]:postcall(names[i], "Args[" + (i - 1)@String.T + "]"):values, "\n");
		);
		returntype:ctype ~= "void" => (
			EVERY cfile:writes("\t", returntype:return("result"):values, "\n");
		);
		cfile:write("\treturn SUCCESS;\n");
		cfile:write("};\n\n");
	);
	cfile:close;
	VAR deffile <- File.Open(srcdir + base + ".rdef", File.WRITE + File.TEXT);
	EVERY deffile:writes("library(\"", libraries:keys, "\")\n");
	deffile:write(>>EOF
library("Gtk/GObject/Object.rlib")

EOF);
	deffile:write(>>EOF
if WINDOWS then
	_export = export
	export = function(Name, Alias)
		if Alias == nil then
			Alias = Name
		end
		_export("_" .. Name, Alias)
	end
end

export("T")
export("Nil")
export("New")
EOF);
	EVERY ctor <- t:ctors:values DO deffile:writes("export(\"", ctor:name, "\")\n");
	EVERY method <- t:shared:values DO deffile:writes("export(\"", method:name, "\")\n");
	deffile:close;
	VAR libfile <- File.Open(libdir + base + ".rlib", File.WRITE + File.TEXT);
	libfile:writes("module(\"Gtk\", \"", t:ns, "\", \"", t:name, "\")\n");
	libfile:write("if WINDOWS then\n");
	libfile:writes("\tprefix(\"_Gtk$", t:ns, "$", t:name, "$\")\n");
	libfile:write("else\n");
	libfile:writes("\tprefix(\"Gtk$", t:ns, "$", t:name, "$\")\n");
	libfile:write("end\n");
	libfile:write("export(\"T\")\n");
        libfile:write("export(\"Nil\")\n");
	libfile:close;
	VAR hfile <- File.Open(incdir + base + ".h", File.WRITE + File.TEXT);
	hfile:writes("#ifndef ", t:ns, "_", t:name, "_H\n");
	hfile:writes("#define ", t:ns, "_", t:name, "_H\n\n");
	hfile:writes("#define RIVA_MODULE Gtk$", t:ns, "$", t:name, "\n");
	hfile:writes("#include <Std.h>\n\n");
	hfile:writes("#include <Riva-Header.h>\n\n");
	hfile:writes("typedef struct Gtk$", t:ns, "$", t:name, "_t {\n");
	hfile:writes("\tStd$Type_t *Type;\n");
	hfile:writes("\t", t:cname, " *Value;\n");
	hfile:writes("} Gtk$", t:ns, "$", t:name, "_t;\n\n");
	hfile:writes("extern Std$Type_t ", t:rtype, "[];\n");
        hfile:writes("extern Gtk$", t:ns, "$", t:name, "_t Gtk$", t:ns, "$", t:name, "$Nil[];\n\n");
	hfile:write("#undef RIVA_MODULE\n\n");
	hfile:write("#endif\n");
	hfile:close;
);

END Struct.
